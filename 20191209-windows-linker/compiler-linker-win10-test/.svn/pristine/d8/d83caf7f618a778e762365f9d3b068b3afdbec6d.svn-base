
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/XASIN.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Asin: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=2, align=4, at location [SP]
Jump Tables:
  jt#0:  BB#17 BB#18 BB#19 BB#17 BB#16 BB#20 BB#21
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg2
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	%A0<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; CPURegs:%vreg4
	STH %vreg4, <fi#5>, 0; mem:ST2[%errx](align=4) CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, 1; CPURegs:%vreg5
	%vreg6<def> = LDHS <fi#5>, 0; mem:LD2[%errx](align=4) CPURegs:%vreg6
	%vreg7<def> = LT %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#4>; CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg226<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg226
	%vreg227<def,tied1> = MovIGL %vreg226<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg227,%vreg226
	%vreg228<def> = MovGR %ZERO, 33; CPURegs:%vreg228
	ST %vreg228<kill>, %vreg227<kill>, 0; mem:ST4[@errno] CPURegs:%vreg228,%vreg227
	%vreg229<def> = LDHS <fi#5>, 0; mem:LD2[%errx](align=4) CPURegs:%vreg229
	%vreg230<def> = NEQI %vreg229<kill>, 2; CPURegs:%vreg230,%vreg229
	JC %vreg230<kill>, <BB#3>; CPURegs:%vreg230
	Jmp <BB#2>
    Successors according to CFG: BB#2(16) BB#3(16)

BB#2: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#1
	%vreg235<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg235
	%vreg236<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg236
	ST %vreg236<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg236
	ST %vreg235<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg235
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#3: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#1
	%vreg231<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg231
	%vreg232<def,tied1> = MovIGL %vreg231<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg232,%vreg231
	%vreg233<def> = LD %vreg232, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg233,%vreg232
	ST %vreg233<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg233
	%vreg234<def> = LD %vreg232, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg234,%vreg232
	ST %vreg234<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg234
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#4: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %SP; CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 0; CPURegs:%vreg9
	ST %vreg9, %vreg8, 12; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg8
	ST %vreg9, %vreg8, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg8
	%vreg10<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg10
	%vreg11<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg11
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg11; CPURegs:%vreg11
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = COPY %V0; CPURegs:%vreg12
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %SP; CPURegs:%vreg13
	ST %vreg9, %vreg13, 12; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg13
	ST %vreg9, %vreg13, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg13
	%vreg14<def> = MovGR %ZERO, -1; CPURegs:%vreg14
	%vreg15<def> = GT %vreg12, %vreg14; CPURegs:%vreg15,%vreg12,%vreg14
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg11; CPURegs:%vreg11
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %V0; CPURegs:%vreg16
	%vreg17<def> = NEQ %vreg16, %vreg9; CPURegs:%vreg17,%vreg16,%vreg9
	%vreg18<def> = ORu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	JC %vreg18<kill>, <BB#6>; CPURegs:%vreg18
	Jmp <BB#5>
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %if.then8
    Predecessors according to CFG: BB#4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg21<def> = COPY %SP; CPURegs:%vreg21
	%vreg22<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg22
	ST %vreg22<kill>, %vreg21, 12; mem:ST4[<unknown>] CPURegs:%vreg22,%vreg21
	%vreg23<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg23
	ST %vreg23<kill>, %vreg21, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg21
	%vreg24<def> = MovGR %ZERO, 0; CPURegs:%vreg24
	%vreg25<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg25
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	%vreg27<def> = COPY %V1; CPURegs:%vreg27
	ST %vreg27, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg27
	ST %vreg26, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg26
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg29
	%vreg30<def> = ORu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	ST %vreg30<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg30
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %if.else9
    Predecessors according to CFG: BB#4
	%vreg19<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg19
	%vreg20<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg20
	ST %vreg20<kill>, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg20
	ST %vreg19<kill>, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg19
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#6 BB#5
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg31<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg31
	%vreg32<def,tied1> = MovIGL %vreg31<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg32,%vreg31
	%vreg33<def> = COPY %SP; CPURegs:%vreg33
	%vreg34<def> = LD %vreg32, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg34,%vreg32
	ST %vreg34<kill>, %vreg33, 12; mem:ST4[<unknown>] CPURegs:%vreg34,%vreg33
	%vreg35<def> = LD %vreg32, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg35,%vreg32
	ST %vreg35<kill>, %vreg33, 8; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg33
	%vreg36<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg36
	%vreg37<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg37
	%A0<def> = COPY %vreg36; CPURegs:%vreg36
	%A1<def> = COPY %vreg37; CPURegs:%vreg37
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg38<def> = COPY %V0; CPURegs:%vreg38
	%vreg40<def> = LT %vreg38, %vreg9; CPURegs:%vreg40,%vreg38,%vreg9
	JC %vreg40<kill>, <BB#15>; CPURegs:%vreg40
	Jmp <BB#8>
    Successors according to CFG: BB#15(16) BB#8(16)

BB#8: derived from LLVM BB %if.else14
    Predecessors according to CFG: BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg41<def> = COPY %SP; CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg42
	ST %vreg42, %vreg41, 12; mem:ST4[<unknown>] CPURegs:%vreg42,%vreg41
	ST %vreg9, %vreg41, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg41
	%vreg44<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg44
	%vreg45<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg45
	%A0<def> = COPY %vreg44; CPURegs:%vreg44
	%A1<def> = COPY %vreg45; CPURegs:%vreg45
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg46<def> = COPY %V0; CPURegs:%vreg46
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg47<def> = COPY %SP; CPURegs:%vreg47
	ST %vreg42, %vreg47, 12; mem:ST4[<unknown>] CPURegs:%vreg42,%vreg47
	ST %vreg9, %vreg47, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg47
	%vreg49<def> = GT %vreg46, %vreg14; CPURegs:%vreg49,%vreg46,%vreg14
	%A0<def> = COPY %vreg44; CPURegs:%vreg44
	%A1<def> = COPY %vreg45; CPURegs:%vreg45
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg50<def> = COPY %V0; CPURegs:%vreg50
	%vreg51<def> = NEQ %vreg50, %vreg9; CPURegs:%vreg51,%vreg50,%vreg9
	%vreg52<def> = ORu %vreg51<kill>, %vreg49<kill>; CPURegs:%vreg52,%vreg51,%vreg49
	JC %vreg52<kill>, <BB#10>; CPURegs:%vreg52
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then17
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = COPY %SP; CPURegs:%vreg133
	%vreg134<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg134
	ST %vreg134, %vreg133, 12; mem:ST4[<unknown>] CPURegs:%vreg134,%vreg133
	%vreg135<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg135
	ST %vreg135, %vreg133, 8; mem:ST4[<unknown>] CPURegs:%vreg135,%vreg133
	%A0<def> = COPY %vreg135; CPURegs:%vreg135
	%A1<def> = COPY %vreg134; CPURegs:%vreg134
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg136<def> = COPY %V0; CPURegs:%vreg136
	%vreg137<def> = COPY %V1; CPURegs:%vreg137
	ST %vreg137, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg137
	ST %vreg136, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg136
	%vreg138<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg138
	%vreg139<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg139
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %SP; CPURegs:%vreg140
	%vreg141<def> = MovGR %ZERO, 4; CPURegs:%vreg141
	ST %vreg141<kill>, %vreg140, 12; mem:ST4[<unknown>] CPURegs:%vreg141,%vreg140
	%vreg142<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg142
	%vreg143<def,tied1> = MovIGL %vreg142<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg143,%vreg142
	ST %vreg143<kill>, %vreg140, 8; mem:ST4[<unknown>] CPURegs:%vreg143,%vreg140
	%A0<def> = COPY %vreg136; CPURegs:%vreg136
	%A1<def> = COPY %vreg137; CPURegs:%vreg137
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg144<def> = COPY %V0; CPURegs:%vreg144
	%vreg145<def> = COPY %V1; CPURegs:%vreg145
	%vreg146<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg146
	%vreg147<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg147
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg148<def> = COPY %SP; CPURegs:%vreg148
	%vreg149<def> = MovGR %ZERO, 5; CPURegs:%vreg149
	ST %vreg149<kill>, %vreg148, 12; mem:ST4[<unknown>] CPURegs:%vreg149,%vreg148
	%vreg150<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg150
	%vreg151<def,tied1> = MovIGL %vreg150<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg151,%vreg150
	ST %vreg151<kill>, %vreg148, 8; mem:ST4[<unknown>] CPURegs:%vreg151,%vreg148
	%A0<def> = COPY %vreg147; CPURegs:%vreg147
	%A1<def> = COPY %vreg146; CPURegs:%vreg146
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %V0; CPURegs:%vreg152
	%vreg153<def> = COPY %V1; CPURegs:%vreg153
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %SP; CPURegs:%vreg154
	ST %vreg137, %vreg154, 12; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg154
	ST %vreg136, %vreg154, 8; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg154
	%A0<def> = COPY %vreg139; CPURegs:%vreg139
	%A1<def> = COPY %vreg138; CPURegs:%vreg138
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg155<def> = COPY %V0; CPURegs:%vreg155
	%vreg156<def> = COPY %V1; CPURegs:%vreg156
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg157<def> = COPY %SP; CPURegs:%vreg157
	ST %vreg145, %vreg157, 12; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg157
	ST %vreg144, %vreg157, 8; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg157
	%A0<def> = COPY %vreg155; CPURegs:%vreg155
	%A1<def> = COPY %vreg156; CPURegs:%vreg156
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg158<def> = COPY %V0; CPURegs:%vreg158
	%vreg159<def> = COPY %V1; CPURegs:%vreg159
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg160<def> = COPY %SP; CPURegs:%vreg160
	ST %vreg153, %vreg160, 12; mem:ST4[<unknown>] CPURegs:%vreg153,%vreg160
	ST %vreg152, %vreg160, 8; mem:ST4[<unknown>] CPURegs:%vreg152,%vreg160
	%A0<def> = COPY %vreg158; CPURegs:%vreg158
	%A1<def> = COPY %vreg159; CPURegs:%vreg159
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg161<def> = COPY %V0; CPURegs:%vreg161
	%vreg162<def> = COPY %V1; CPURegs:%vreg162
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg163<def> = COPY %SP; CPURegs:%vreg163
	ST %vreg162, %vreg163, 12; mem:ST4[<unknown>] CPURegs:%vreg162,%vreg163
	ST %vreg161, %vreg163, 8; mem:ST4[<unknown>] CPURegs:%vreg161,%vreg163
	%vreg164<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg164
	%vreg165<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg165
	%A0<def> = COPY %vreg164; CPURegs:%vreg164
	%A1<def> = COPY %vreg165; CPURegs:%vreg165
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg166<def> = COPY %V0; CPURegs:%vreg166
	%vreg167<def> = COPY %V1; CPURegs:%vreg167
	ST %vreg167, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg167
	ST %vreg166, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg166
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#10: derived from LLVM BB %if.else22
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg53<def> = COPY %SP; CPURegs:%vreg53
	%vreg54<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg54
	ST %vreg54, %vreg53, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg53
	ST %vreg9, %vreg53, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg53
	%vreg56<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg56
	%vreg57<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg57
	%A0<def> = COPY %vreg56; CPURegs:%vreg56
	%A1<def> = COPY %vreg57; CPURegs:%vreg57
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg58<def> = COPY %V0; CPURegs:%vreg58
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg59<def> = COPY %SP; CPURegs:%vreg59
	ST %vreg54, %vreg59, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg59
	ST %vreg9, %vreg59, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg59
	%vreg61<def> = GT %vreg58, %vreg14; CPURegs:%vreg61,%vreg58,%vreg14
	%A0<def> = COPY %vreg56; CPURegs:%vreg56
	%A1<def> = COPY %vreg57; CPURegs:%vreg57
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg62<def> = COPY %V0; CPURegs:%vreg62
	%vreg63<def> = NEQ %vreg62, %vreg9; CPURegs:%vreg63,%vreg62,%vreg9
	%vreg64<def> = ORu %vreg63<kill>, %vreg61<kill>; CPURegs:%vreg64,%vreg63,%vreg61
	JC %vreg64<kill>, <BB#12>; CPURegs:%vreg64
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#12(16)

BB#11: derived from LLVM BB %if.then25
    Predecessors according to CFG: BB#10
	%vreg83<def> = MovGR %ZERO, 4; CPURegs:%vreg83
	%vreg84<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg84
	%vreg85<def> = ORu %vreg84<kill>, %vreg83; CPURegs:%vreg85,%vreg84,%vreg83
	ST %vreg85<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg85
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = COPY %SP; CPURegs:%vreg86
	%vreg87<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg87
	ST %vreg87<kill>, %vreg86, 12; mem:ST4[<unknown>] CPURegs:%vreg87,%vreg86
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg88
	ST %vreg88<kill>, %vreg86, 8; mem:ST4[<unknown>] CPURegs:%vreg88,%vreg86
	%vreg90<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg90
	%A0<def> = COPY %vreg9; CPURegs:%vreg9
	%A1<def> = COPY %vreg90; CPURegs:%vreg90
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg91<def> = COPY %V0; CPURegs:%vreg91
	%vreg92<def> = COPY %V1; CPURegs:%vreg92
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %SP; CPURegs:%vreg93
	%vreg94<def> = MovGR %ZERO, 1073741824; CPURegs:%vreg94
	ST %vreg94<kill>, %vreg93, 12; mem:ST4[<unknown>] CPURegs:%vreg94,%vreg93
	ST %vreg9, %vreg93, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg93
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg95<def> = COPY %V0; CPURegs:%vreg95
	%vreg96<def> = COPY %V1; CPURegs:%vreg96
	ST %vreg96, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg96
	ST %vreg95, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg95
	%vreg97<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg97
	%vreg98<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg98
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg98; CPURegs:%vreg98
	%A1<def> = COPY %vreg97; CPURegs:%vreg97
	CALL <ga:@sqrt>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg99<def> = COPY %V0; CPURegs:%vreg99
	%vreg100<def> = COPY %V1; CPURegs:%vreg100
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg101<def> = COPY %SP; CPURegs:%vreg101
	ST %vreg100, %vreg101, 12; mem:ST4[<unknown>] CPURegs:%vreg100,%vreg101
	ST %vreg99, %vreg101, 8; mem:ST4[<unknown>] CPURegs:%vreg99,%vreg101
	ST %vreg100, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg100
	ST %vreg99, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg99
	%A0<def> = COPY %vreg99; CPURegs:%vreg99
	%A1<def> = COPY %vreg100; CPURegs:%vreg100
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg102<def> = COPY %V0; CPURegs:%vreg102
	%vreg103<def> = COPY %V1; CPURegs:%vreg103
	ST %vreg103, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg103
	ST %vreg102, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg102
	%vreg104<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg104
	%vreg105<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg105
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %SP; CPURegs:%vreg106
	ST %vreg83, %vreg106, 12; mem:ST4[<unknown>] CPURegs:%vreg83,%vreg106
	%vreg107<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg107
	%vreg108<def,tied1> = MovIGL %vreg107<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg108,%vreg107
	ST %vreg108<kill>, %vreg106, 8; mem:ST4[<unknown>] CPURegs:%vreg108,%vreg106
	%A0<def> = COPY %vreg105; CPURegs:%vreg105
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg109<def> = COPY %V0; CPURegs:%vreg109
	%vreg110<def> = COPY %V1; CPURegs:%vreg110
	%vreg111<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg111
	%vreg112<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	%vreg114<def> = MovGR %ZERO, 5; CPURegs:%vreg114
	ST %vreg114<kill>, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg114,%vreg113
	%vreg115<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg115
	%vreg116<def,tied1> = MovIGL %vreg115<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg116,%vreg115
	ST %vreg116<kill>, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg116,%vreg113
	%A0<def> = COPY %vreg112; CPURegs:%vreg112
	%A1<def> = COPY %vreg111; CPURegs:%vreg111
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg117<def> = COPY %V0; CPURegs:%vreg117
	%vreg118<def> = COPY %V1; CPURegs:%vreg118
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg119<def> = COPY %SP; CPURegs:%vreg119
	ST %vreg104, %vreg119, 12; mem:ST4[<unknown>] CPURegs:%vreg104,%vreg119
	ST %vreg105, %vreg119, 8; mem:ST4[<unknown>] CPURegs:%vreg105,%vreg119
	%A0<def> = COPY %vreg102; CPURegs:%vreg102
	%A1<def> = COPY %vreg103; CPURegs:%vreg103
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %V0; CPURegs:%vreg120
	%vreg121<def> = COPY %V1; CPURegs:%vreg121
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg122<def> = COPY %SP; CPURegs:%vreg122
	ST %vreg110, %vreg122, 12; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg122
	ST %vreg109, %vreg122, 8; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg122
	%A0<def> = COPY %vreg120; CPURegs:%vreg120
	%A1<def> = COPY %vreg121; CPURegs:%vreg121
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg118, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg125
	ST %vreg117, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	ST %vreg127, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg127,%vreg128
	ST %vreg126, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg126,%vreg128
	%vreg129<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg129
	%vreg130<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg130
	%A0<def> = COPY %vreg129; CPURegs:%vreg129
	%A1<def> = COPY %vreg130; CPURegs:%vreg130
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ST %vreg132, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg132
	ST %vreg131, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg131
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#12: derived from LLVM BB %if.else37
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg65<def> = COPY %SP; CPURegs:%vreg65
	ST %vreg54, %vreg65, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg65
	ST %vreg9, %vreg65, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg65
	%vreg68<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg68
	%vreg69<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg69
	%A0<def> = COPY %vreg68; CPURegs:%vreg68
	%A1<def> = COPY %vreg69; CPURegs:%vreg69
	CALL <es:__nedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg70<def> = COPY %V0; CPURegs:%vreg70
	%vreg71<def> = NEQI %vreg70, 0; CPURegs:%vreg71,%vreg70
	JC %vreg71<kill>, <BB#14>; CPURegs:%vreg71
	Jmp <BB#13>
    Successors according to CFG: BB#13(20) BB#14(12)

BB#13: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#12
	%vreg79<def> = MovGR %ZERO, 4; CPURegs:%vreg79
	%vreg80<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg80
	%vreg81<def> = ORu %vreg80<kill>, %vreg79<kill>; CPURegs:%vreg81,%vreg80,%vreg79
	ST %vreg81<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg81
	ST %vreg9, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg9
	ST %vreg9, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg9
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#14: derived from LLVM BB %if.else42
    Predecessors according to CFG: BB#12
	%vreg72<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg72
	%vreg73<def,tied1> = MovIGL %vreg72<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg73,%vreg72
	%vreg74<def> = MovGR %ZERO, 33; CPURegs:%vreg74
	ST %vreg74<kill>, %vreg73<kill>, 0; mem:ST4[@errno] CPURegs:%vreg74,%vreg73
	%vreg75<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg75
	%vreg76<def,tied1> = MovIGL %vreg75<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg76,%vreg75
	%vreg77<def> = LD %vreg76, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg77,%vreg76
	ST %vreg77<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg77
	%vreg78<def> = LD %vreg76, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg78,%vreg76
	ST %vreg78<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg78
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#15: derived from LLVM BB %if.end46
    Predecessors according to CFG: BB#7 BB#13 BB#11 BB#9
	%vreg169<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg169
	%vreg168<def> = ADDiu %vreg169<kill>, -1; CPURegs:%vreg168,%vreg169
	%vreg170<def> = LTI %vreg168, 7; CPURegs:%vreg170,%vreg168
	JNC %vreg170<kill>, <BB#16>; CPURegs:%vreg170
    Successors according to CFG: BB#16(16) BB#23(16)

BB#23: derived from LLVM BB %if.end46
    Predecessors according to CFG: BB#15
	%vreg171<def> = MovGR %ZERO, 2; CPURegs:%vreg171
	%vreg172<def> = SHL %vreg168, %vreg171<kill>; CPURegs:%vreg172,%vreg168,%vreg171
	%vreg173<def> = MovIGH %ZERO, <jt#0>[TF=3]; CPURegs:%vreg173
	%vreg174<def,tied1> = MovIGL %vreg173<tied0>, <jt#0>[TF=4]; CPURegs:%vreg174,%vreg173
	%vreg175<def> = ADDu %vreg172<kill>, %vreg174<kill>; CPURegs:%vreg175,%vreg172,%vreg174
	%vreg176<def> = LD %vreg175<kill>, 0; mem:LD4[JumpTable] CPURegs:%vreg176,%vreg175
	Jmpr %vreg176<kill>; CPURegs:%vreg176
    Successors according to CFG: BB#17(32) BB#18(16) BB#19(16) BB#16(16) BB#20(16) BB#21(16)

BB#16: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#15 BB#23
	%vreg224<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg224
	%vreg225<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg225
	ST %vreg225<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg225
	ST %vreg224<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg224
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#17: derived from LLVM BB %sw.bb47
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg194<def> = COPY %SP; CPURegs:%vreg194
	%vreg195<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg195
	ST %vreg195<kill>, %vreg194, 12; mem:ST4[<unknown>] CPURegs:%vreg195,%vreg194
	%vreg196<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg196
	ST %vreg196<kill>, %vreg194, 8; mem:ST4[<unknown>] CPURegs:%vreg196,%vreg194
	%vreg197<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg197
	%vreg198<def> = MovGR %ZERO, 1072243195; CPURegs:%vreg198
	%A0<def> = COPY %vreg197; CPURegs:%vreg197
	%A1<def> = COPY %vreg198; CPURegs:%vreg198
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg199<def> = COPY %V0; CPURegs:%vreg199
	%vreg200<def> = COPY %V1; CPURegs:%vreg200
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg201<def> = COPY %SP; CPURegs:%vreg201
	ST %vreg198, %vreg201, 12; mem:ST4[<unknown>] CPURegs:%vreg198,%vreg201
	ST %vreg197, %vreg201, 8; mem:ST4[<unknown>] CPURegs:%vreg197,%vreg201
	%A0<def> = COPY %vreg199; CPURegs:%vreg199
	%A1<def> = COPY %vreg200; CPURegs:%vreg200
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg202<def> = COPY %V0; CPURegs:%vreg202
	%vreg203<def> = COPY %V1; CPURegs:%vreg203
	ST %vreg203, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg203
	ST %vreg202, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg202
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#18: derived from LLVM BB %sw.bb50
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg187<def> = COPY %SP; CPURegs:%vreg187
	%vreg188<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg188
	ST %vreg188<kill>, %vreg187, 12; mem:ST4[<unknown>] CPURegs:%vreg188,%vreg187
	%vreg189<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg189
	ST %vreg189<kill>, %vreg187, 8; mem:ST4[<unknown>] CPURegs:%vreg189,%vreg187
	%vreg190<def> = MovGR %ZERO, 0; CPURegs:%vreg190
	%vreg191<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg191
	%A0<def> = COPY %vreg190; CPURegs:%vreg190
	%A1<def> = COPY %vreg191; CPURegs:%vreg191
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg192<def> = COPY %V0; CPURegs:%vreg192
	%vreg193<def> = COPY %V1; CPURegs:%vreg193
	ST %vreg193, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg193
	ST %vreg192, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg192
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#19: derived from LLVM BB %sw.bb52
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg177<def> = COPY %SP; CPURegs:%vreg177
	%vreg178<def> = MovGR %ZERO, 1072243195; CPURegs:%vreg178
	ST %vreg178, %vreg177, 12; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg177
	%vreg179<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg179
	ST %vreg179, %vreg177, 8; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg177
	%vreg180<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg180
	%vreg181<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg181
	%A0<def> = COPY %vreg180; CPURegs:%vreg180
	%A1<def> = COPY %vreg181; CPURegs:%vreg181
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg182<def> = COPY %V0; CPURegs:%vreg182
	%vreg183<def> = COPY %V1; CPURegs:%vreg183
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg184<def> = COPY %SP; CPURegs:%vreg184
	ST %vreg178, %vreg184, 12; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg184
	ST %vreg179, %vreg184, 8; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg184
	%A0<def> = COPY %vreg182; CPURegs:%vreg182
	%A1<def> = COPY %vreg183; CPURegs:%vreg183
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg185<def> = COPY %V0; CPURegs:%vreg185
	%vreg186<def> = COPY %V1; CPURegs:%vreg186
	ST %vreg186, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg186
	ST %vreg185, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg185
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#20: derived from LLVM BB %sw.bb55
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg204<def> = COPY %SP; CPURegs:%vreg204
	%vreg205<def> = MovGR %ZERO, -1075240453; CPURegs:%vreg205
	ST %vreg205, %vreg204, 12; mem:ST4[<unknown>] CPURegs:%vreg205,%vreg204
	%vreg206<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg206
	ST %vreg206, %vreg204, 8; mem:ST4[<unknown>] CPURegs:%vreg206,%vreg204
	%vreg207<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg207
	%vreg208<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg208
	%A0<def> = COPY %vreg207; CPURegs:%vreg207
	%A1<def> = COPY %vreg208; CPURegs:%vreg208
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg209<def> = COPY %V0; CPURegs:%vreg209
	%vreg210<def> = COPY %V1; CPURegs:%vreg210
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg211<def> = COPY %SP; CPURegs:%vreg211
	ST %vreg205, %vreg211, 12; mem:ST4[<unknown>] CPURegs:%vreg205,%vreg211
	ST %vreg206, %vreg211, 8; mem:ST4[<unknown>] CPURegs:%vreg206,%vreg211
	%A0<def> = COPY %vreg209; CPURegs:%vreg209
	%A1<def> = COPY %vreg210; CPURegs:%vreg210
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg212<def> = COPY %V0; CPURegs:%vreg212
	%vreg213<def> = COPY %V1; CPURegs:%vreg213
	ST %vreg213, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg213
	ST %vreg212, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg212
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#21: derived from LLVM BB %sw.bb58
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg214<def> = COPY %SP; CPURegs:%vreg214
	%vreg215<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg215
	ST %vreg215<kill>, %vreg214, 12; mem:ST4[<unknown>] CPURegs:%vreg215,%vreg214
	%vreg216<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg216
	ST %vreg216<kill>, %vreg214, 8; mem:ST4[<unknown>] CPURegs:%vreg216,%vreg214
	%vreg217<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg217
	%vreg218<def> = MovGR %ZERO, 1073291771; CPURegs:%vreg218
	%A0<def> = COPY %vreg217; CPURegs:%vreg217
	%A1<def> = COPY %vreg218; CPURegs:%vreg218
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg219<def> = COPY %V0; CPURegs:%vreg219
	%vreg220<def> = COPY %V1; CPURegs:%vreg220
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg221<def> = COPY %SP; CPURegs:%vreg221
	ST %vreg218, %vreg221, 12; mem:ST4[<unknown>] CPURegs:%vreg218,%vreg221
	ST %vreg217, %vreg221, 8; mem:ST4[<unknown>] CPURegs:%vreg217,%vreg221
	%A0<def> = COPY %vreg219; CPURegs:%vreg219
	%A1<def> = COPY %vreg220; CPURegs:%vreg220
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg222<def> = COPY %V0; CPURegs:%vreg222
	%vreg223<def> = COPY %V1; CPURegs:%vreg223
	ST %vreg223, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg223
	ST %vreg222, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg222
    Successors according to CFG: BB#22

BB#22: derived from LLVM BB %return
    Predecessors according to CFG: BB#14 BB#19 BB#18 BB#17 BB#20 BB#21 BB#16 BB#3 BB#2
	%vreg237<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg237
	%vreg238<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg238
	%V0<def> = COPY %vreg237; CPURegs:%vreg237
	%V1<def> = COPY %vreg238; CPURegs:%vreg238
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function _Asin.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Asin: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=2, align=4, at location [SP]
Jump Tables:
  jt#0:  BB#17 BB#18 BB#19 BB#17 BB#16 BB#20 BB#21
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg2
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	%A0<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; CPURegs:%vreg4
	STH %vreg4, <fi#5>, 0; mem:ST2[%errx](align=4) CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, 1; CPURegs:%vreg5
	%vreg6<def> = LDHS <fi#5>, 0; mem:LD2[%errx](align=4) CPURegs:%vreg6
	%vreg7<def> = LT %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#4>; CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg226<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg226
	%vreg227<def,tied1> = MovIGL %vreg226<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg227,%vreg226
	%vreg228<def> = MovGR %ZERO, 33; CPURegs:%vreg228
	ST %vreg228<kill>, %vreg227<kill>, 0; mem:ST4[@errno] CPURegs:%vreg228,%vreg227
	%vreg229<def> = LDHS <fi#5>, 0; mem:LD2[%errx](align=4) CPURegs:%vreg229
	%vreg230<def> = NEQI %vreg229<kill>, 2; CPURegs:%vreg230,%vreg229
	JC %vreg230<kill>, <BB#3>; CPURegs:%vreg230
	Jmp <BB#2>
    Successors according to CFG: BB#2(16) BB#3(16)

BB#2: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#1
	%vreg235<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg235
	%vreg236<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg236
	ST %vreg236<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg236
	ST %vreg235<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg235
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#3: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#1
	%vreg231<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg231
	%vreg232<def,tied1> = MovIGL %vreg231<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg232,%vreg231
	%vreg233<def> = LD %vreg232, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg233,%vreg232
	ST %vreg233<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg233
	%vreg234<def> = LD %vreg232, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg234,%vreg232
	ST %vreg234<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg234
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#4: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %SP; CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 0; CPURegs:%vreg9
	ST %vreg9, %vreg8, 12; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg8
	ST %vreg9, %vreg8, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg8
	%vreg10<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg10
	%vreg11<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg11
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg11; CPURegs:%vreg11
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = COPY %V0; CPURegs:%vreg12
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %SP; CPURegs:%vreg13
	ST %vreg9, %vreg13, 12; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg13
	ST %vreg9, %vreg13, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg13
	%vreg14<def> = MovGR %ZERO, -1; CPURegs:%vreg14
	%vreg15<def> = GT %vreg12, %vreg14; CPURegs:%vreg15,%vreg12,%vreg14
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg11; CPURegs:%vreg11
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %V0; CPURegs:%vreg16
	%vreg17<def> = NEQ %vreg16, %vreg9; CPURegs:%vreg17,%vreg16,%vreg9
	%vreg18<def> = ORu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	JC %vreg18<kill>, <BB#6>; CPURegs:%vreg18
	Jmp <BB#5>
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %if.then8
    Predecessors according to CFG: BB#4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg21<def> = COPY %SP; CPURegs:%vreg21
	%vreg22<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg22
	ST %vreg22<kill>, %vreg21, 12; mem:ST4[<unknown>] CPURegs:%vreg22,%vreg21
	%vreg23<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg23
	ST %vreg23<kill>, %vreg21, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg21
	%vreg24<def> = MovGR %ZERO, 0; CPURegs:%vreg24
	%vreg25<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg25
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	%vreg27<def> = COPY %V1; CPURegs:%vreg27
	ST %vreg27, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg27
	ST %vreg26, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg26
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg29
	%vreg30<def> = ORu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	ST %vreg30<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg30
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %if.else9
    Predecessors according to CFG: BB#4
	%vreg19<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg19
	%vreg20<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg20
	ST %vreg20<kill>, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg20
	ST %vreg19<kill>, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg19
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#6 BB#5
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg31<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg31
	%vreg32<def,tied1> = MovIGL %vreg31<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg32,%vreg31
	%vreg33<def> = COPY %SP; CPURegs:%vreg33
	%vreg34<def> = LD %vreg32, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg34,%vreg32
	ST %vreg34<kill>, %vreg33, 12; mem:ST4[<unknown>] CPURegs:%vreg34,%vreg33
	%vreg35<def> = LD %vreg32, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg35,%vreg32
	ST %vreg35<kill>, %vreg33, 8; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg33
	%vreg36<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg36
	%vreg37<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg37
	%A0<def> = COPY %vreg36; CPURegs:%vreg36
	%A1<def> = COPY %vreg37; CPURegs:%vreg37
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg38<def> = COPY %V0; CPURegs:%vreg38
	%vreg40<def> = LT %vreg38, %vreg9; CPURegs:%vreg40,%vreg38,%vreg9
	JC %vreg40<kill>, <BB#15>; CPURegs:%vreg40
	Jmp <BB#8>
    Successors according to CFG: BB#15(16) BB#8(16)

BB#8: derived from LLVM BB %if.else14
    Predecessors according to CFG: BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg41<def> = COPY %SP; CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg42
	ST %vreg42, %vreg41, 12; mem:ST4[<unknown>] CPURegs:%vreg42,%vreg41
	ST %vreg9, %vreg41, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg41
	%vreg44<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg44
	%vreg45<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg45
	%A0<def> = COPY %vreg44; CPURegs:%vreg44
	%A1<def> = COPY %vreg45; CPURegs:%vreg45
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg46<def> = COPY %V0; CPURegs:%vreg46
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg47<def> = COPY %SP; CPURegs:%vreg47
	ST %vreg42, %vreg47, 12; mem:ST4[<unknown>] CPURegs:%vreg42,%vreg47
	ST %vreg9, %vreg47, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg47
	%vreg49<def> = GT %vreg46, %vreg14; CPURegs:%vreg49,%vreg46,%vreg14
	%A0<def> = COPY %vreg44; CPURegs:%vreg44
	%A1<def> = COPY %vreg45; CPURegs:%vreg45
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg50<def> = COPY %V0; CPURegs:%vreg50
	%vreg51<def> = NEQ %vreg50, %vreg9; CPURegs:%vreg51,%vreg50,%vreg9
	%vreg52<def> = ORu %vreg51<kill>, %vreg49<kill>; CPURegs:%vreg52,%vreg51,%vreg49
	JC %vreg52<kill>, <BB#10>; CPURegs:%vreg52
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then17
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = COPY %SP; CPURegs:%vreg133
	%vreg134<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg134
	ST %vreg134, %vreg133, 12; mem:ST4[<unknown>] CPURegs:%vreg134,%vreg133
	%vreg135<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg135
	ST %vreg135, %vreg133, 8; mem:ST4[<unknown>] CPURegs:%vreg135,%vreg133
	%A0<def> = COPY %vreg135; CPURegs:%vreg135
	%A1<def> = COPY %vreg134; CPURegs:%vreg134
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg136<def> = COPY %V0; CPURegs:%vreg136
	%vreg137<def> = COPY %V1; CPURegs:%vreg137
	ST %vreg137, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg137
	ST %vreg136, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg136
	%vreg138<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg138
	%vreg139<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg139
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %SP; CPURegs:%vreg140
	%vreg141<def> = MovGR %ZERO, 4; CPURegs:%vreg141
	ST %vreg141<kill>, %vreg140, 12; mem:ST4[<unknown>] CPURegs:%vreg141,%vreg140
	%vreg142<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg142
	%vreg143<def,tied1> = MovIGL %vreg142<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg143,%vreg142
	ST %vreg143<kill>, %vreg140, 8; mem:ST4[<unknown>] CPURegs:%vreg143,%vreg140
	%A0<def> = COPY %vreg136; CPURegs:%vreg136
	%A1<def> = COPY %vreg137; CPURegs:%vreg137
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg144<def> = COPY %V0; CPURegs:%vreg144
	%vreg145<def> = COPY %V1; CPURegs:%vreg145
	%vreg146<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg146
	%vreg147<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg147
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg148<def> = COPY %SP; CPURegs:%vreg148
	%vreg149<def> = MovGR %ZERO, 5; CPURegs:%vreg149
	ST %vreg149<kill>, %vreg148, 12; mem:ST4[<unknown>] CPURegs:%vreg149,%vreg148
	%vreg150<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg150
	%vreg151<def,tied1> = MovIGL %vreg150<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg151,%vreg150
	ST %vreg151<kill>, %vreg148, 8; mem:ST4[<unknown>] CPURegs:%vreg151,%vreg148
	%A0<def> = COPY %vreg147; CPURegs:%vreg147
	%A1<def> = COPY %vreg146; CPURegs:%vreg146
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %V0; CPURegs:%vreg152
	%vreg153<def> = COPY %V1; CPURegs:%vreg153
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %SP; CPURegs:%vreg154
	ST %vreg137, %vreg154, 12; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg154
	ST %vreg136, %vreg154, 8; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg154
	%A0<def> = COPY %vreg139; CPURegs:%vreg139
	%A1<def> = COPY %vreg138; CPURegs:%vreg138
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg155<def> = COPY %V0; CPURegs:%vreg155
	%vreg156<def> = COPY %V1; CPURegs:%vreg156
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg157<def> = COPY %SP; CPURegs:%vreg157
	ST %vreg145, %vreg157, 12; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg157
	ST %vreg144, %vreg157, 8; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg157
	%A0<def> = COPY %vreg155; CPURegs:%vreg155
	%A1<def> = COPY %vreg156; CPURegs:%vreg156
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg158<def> = COPY %V0; CPURegs:%vreg158
	%vreg159<def> = COPY %V1; CPURegs:%vreg159
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg160<def> = COPY %SP; CPURegs:%vreg160
	ST %vreg153, %vreg160, 12; mem:ST4[<unknown>] CPURegs:%vreg153,%vreg160
	ST %vreg152, %vreg160, 8; mem:ST4[<unknown>] CPURegs:%vreg152,%vreg160
	%A0<def> = COPY %vreg158; CPURegs:%vreg158
	%A1<def> = COPY %vreg159; CPURegs:%vreg159
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg161<def> = COPY %V0; CPURegs:%vreg161
	%vreg162<def> = COPY %V1; CPURegs:%vreg162
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg163<def> = COPY %SP; CPURegs:%vreg163
	ST %vreg162, %vreg163, 12; mem:ST4[<unknown>] CPURegs:%vreg162,%vreg163
	ST %vreg161, %vreg163, 8; mem:ST4[<unknown>] CPURegs:%vreg161,%vreg163
	%vreg164<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg164
	%vreg165<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg165
	%A0<def> = COPY %vreg164; CPURegs:%vreg164
	%A1<def> = COPY %vreg165; CPURegs:%vreg165
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg166<def> = COPY %V0; CPURegs:%vreg166
	%vreg167<def> = COPY %V1; CPURegs:%vreg167
	ST %vreg167, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg167
	ST %vreg166, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg166
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#10: derived from LLVM BB %if.else22
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg53<def> = COPY %SP; CPURegs:%vreg53
	%vreg54<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg54
	ST %vreg54, %vreg53, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg53
	ST %vreg9, %vreg53, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg53
	%vreg56<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg56
	%vreg57<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg57
	%A0<def> = COPY %vreg56; CPURegs:%vreg56
	%A1<def> = COPY %vreg57; CPURegs:%vreg57
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg58<def> = COPY %V0; CPURegs:%vreg58
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg59<def> = COPY %SP; CPURegs:%vreg59
	ST %vreg54, %vreg59, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg59
	ST %vreg9, %vreg59, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg59
	%vreg61<def> = GT %vreg58, %vreg14; CPURegs:%vreg61,%vreg58,%vreg14
	%A0<def> = COPY %vreg56; CPURegs:%vreg56
	%A1<def> = COPY %vreg57; CPURegs:%vreg57
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg62<def> = COPY %V0; CPURegs:%vreg62
	%vreg63<def> = NEQ %vreg62, %vreg9; CPURegs:%vreg63,%vreg62,%vreg9
	%vreg64<def> = ORu %vreg63<kill>, %vreg61<kill>; CPURegs:%vreg64,%vreg63,%vreg61
	JC %vreg64<kill>, <BB#12>; CPURegs:%vreg64
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#12(16)

BB#11: derived from LLVM BB %if.then25
    Predecessors according to CFG: BB#10
	%vreg83<def> = MovGR %ZERO, 4; CPURegs:%vreg83
	%vreg84<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg84
	%vreg85<def> = ORu %vreg84<kill>, %vreg83; CPURegs:%vreg85,%vreg84,%vreg83
	ST %vreg85<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg85
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = COPY %SP; CPURegs:%vreg86
	%vreg87<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg87
	ST %vreg87<kill>, %vreg86, 12; mem:ST4[<unknown>] CPURegs:%vreg87,%vreg86
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg88
	ST %vreg88<kill>, %vreg86, 8; mem:ST4[<unknown>] CPURegs:%vreg88,%vreg86
	%vreg90<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg90
	%A0<def> = COPY %vreg9; CPURegs:%vreg9
	%A1<def> = COPY %vreg90; CPURegs:%vreg90
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg91<def> = COPY %V0; CPURegs:%vreg91
	%vreg92<def> = COPY %V1; CPURegs:%vreg92
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %SP; CPURegs:%vreg93
	%vreg94<def> = MovGR %ZERO, 1073741824; CPURegs:%vreg94
	ST %vreg94<kill>, %vreg93, 12; mem:ST4[<unknown>] CPURegs:%vreg94,%vreg93
	ST %vreg9, %vreg93, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg93
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg95<def> = COPY %V0; CPURegs:%vreg95
	%vreg96<def> = COPY %V1; CPURegs:%vreg96
	ST %vreg96, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg96
	ST %vreg95, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg95
	%vreg97<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg97
	%vreg98<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg98
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg98; CPURegs:%vreg98
	%A1<def> = COPY %vreg97; CPURegs:%vreg97
	CALL <ga:@sqrt>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg99<def> = COPY %V0; CPURegs:%vreg99
	%vreg100<def> = COPY %V1; CPURegs:%vreg100
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg101<def> = COPY %SP; CPURegs:%vreg101
	ST %vreg100, %vreg101, 12; mem:ST4[<unknown>] CPURegs:%vreg100,%vreg101
	ST %vreg99, %vreg101, 8; mem:ST4[<unknown>] CPURegs:%vreg99,%vreg101
	ST %vreg100, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg100
	ST %vreg99, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg99
	%A0<def> = COPY %vreg99; CPURegs:%vreg99
	%A1<def> = COPY %vreg100; CPURegs:%vreg100
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg102<def> = COPY %V0; CPURegs:%vreg102
	%vreg103<def> = COPY %V1; CPURegs:%vreg103
	ST %vreg103, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg103
	ST %vreg102, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg102
	%vreg104<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg104
	%vreg105<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg105
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %SP; CPURegs:%vreg106
	ST %vreg83, %vreg106, 12; mem:ST4[<unknown>] CPURegs:%vreg83,%vreg106
	%vreg107<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg107
	%vreg108<def,tied1> = MovIGL %vreg107<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg108,%vreg107
	ST %vreg108<kill>, %vreg106, 8; mem:ST4[<unknown>] CPURegs:%vreg108,%vreg106
	%A0<def> = COPY %vreg105; CPURegs:%vreg105
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg109<def> = COPY %V0; CPURegs:%vreg109
	%vreg110<def> = COPY %V1; CPURegs:%vreg110
	%vreg111<def> = LD <fi#3>, 4; mem:LD4[%g+4] CPURegs:%vreg111
	%vreg112<def> = LD <fi#3>, 0; mem:LD4[%g](align=8) CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	%vreg114<def> = MovGR %ZERO, 5; CPURegs:%vreg114
	ST %vreg114<kill>, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg114,%vreg113
	%vreg115<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg115
	%vreg116<def,tied1> = MovIGL %vreg115<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg116,%vreg115
	ST %vreg116<kill>, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg116,%vreg113
	%A0<def> = COPY %vreg112; CPURegs:%vreg112
	%A1<def> = COPY %vreg111; CPURegs:%vreg111
	CALL <ga:@_Poly>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg117<def> = COPY %V0; CPURegs:%vreg117
	%vreg118<def> = COPY %V1; CPURegs:%vreg118
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg119<def> = COPY %SP; CPURegs:%vreg119
	ST %vreg104, %vreg119, 12; mem:ST4[<unknown>] CPURegs:%vreg104,%vreg119
	ST %vreg105, %vreg119, 8; mem:ST4[<unknown>] CPURegs:%vreg105,%vreg119
	%A0<def> = COPY %vreg102; CPURegs:%vreg102
	%A1<def> = COPY %vreg103; CPURegs:%vreg103
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %V0; CPURegs:%vreg120
	%vreg121<def> = COPY %V1; CPURegs:%vreg121
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg122<def> = COPY %SP; CPURegs:%vreg122
	ST %vreg110, %vreg122, 12; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg122
	ST %vreg109, %vreg122, 8; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg122
	%A0<def> = COPY %vreg120; CPURegs:%vreg120
	%A1<def> = COPY %vreg121; CPURegs:%vreg121
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg118, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg125
	ST %vreg117, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	ST %vreg127, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg127,%vreg128
	ST %vreg126, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg126,%vreg128
	%vreg129<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg129
	%vreg130<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg130
	%A0<def> = COPY %vreg129; CPURegs:%vreg129
	%A1<def> = COPY %vreg130; CPURegs:%vreg130
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ST %vreg132, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg132
	ST %vreg131, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg131
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#12: derived from LLVM BB %if.else37
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg65<def> = COPY %SP; CPURegs:%vreg65
	ST %vreg54, %vreg65, 12; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg65
	ST %vreg9, %vreg65, 8; mem:ST4[<unknown>] CPURegs:%vreg9,%vreg65
	%vreg68<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg68
	%vreg69<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg69
	%A0<def> = COPY %vreg68; CPURegs:%vreg68
	%A1<def> = COPY %vreg69; CPURegs:%vreg69
	CALL <es:__nedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg70<def> = COPY %V0; CPURegs:%vreg70
	%vreg71<def> = NEQI %vreg70, 0; CPURegs:%vreg71,%vreg70
	JC %vreg71<kill>, <BB#14>; CPURegs:%vreg71
	Jmp <BB#13>
    Successors according to CFG: BB#13(20) BB#14(12)

BB#13: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#12
	%vreg79<def> = MovGR %ZERO, 4; CPURegs:%vreg79
	%vreg80<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg80
	%vreg81<def> = ORu %vreg80<kill>, %vreg79<kill>; CPURegs:%vreg81,%vreg80,%vreg79
	ST %vreg81<kill>, <fi#2>, 0; mem:ST4[%idx.addr] CPURegs:%vreg81
	ST %vreg9, <fi#4>, 4; mem:ST4[%y+4] CPURegs:%vreg9
	ST %vreg9, <fi#4>, 0; mem:ST4[%y](align=8) CPURegs:%vreg9
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#14: derived from LLVM BB %if.else42
    Predecessors according to CFG: BB#12
	%vreg72<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg72
	%vreg73<def,tied1> = MovIGL %vreg72<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg73,%vreg72
	%vreg74<def> = MovGR %ZERO, 33; CPURegs:%vreg74
	ST %vreg74<kill>, %vreg73<kill>, 0; mem:ST4[@errno] CPURegs:%vreg74,%vreg73
	%vreg75<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg75
	%vreg76<def,tied1> = MovIGL %vreg75<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg76,%vreg75
	%vreg77<def> = LD %vreg76, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg77,%vreg76
	ST %vreg77<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg77
	%vreg78<def> = LD %vreg76, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg78,%vreg76
	ST %vreg78<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg78
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#15: derived from LLVM BB %if.end46
    Predecessors according to CFG: BB#7 BB#13 BB#11 BB#9
	%vreg169<def> = LD <fi#2>, 0; mem:LD4[%idx.addr] CPURegs:%vreg169
	%vreg168<def> = ADDiu %vreg169<kill>, -1; CPURegs:%vreg168,%vreg169
	%vreg170<def> = LTI %vreg168, 7; CPURegs:%vreg170,%vreg168
	JNC %vreg170<kill>, <BB#16>; CPURegs:%vreg170
    Successors according to CFG: BB#16(16) BB#23(16)

BB#23: derived from LLVM BB %if.end46
    Predecessors according to CFG: BB#15
	%vreg171<def> = MovGR %ZERO, 2; CPURegs:%vreg171
	%vreg172<def> = SHL %vreg168, %vreg171<kill>; CPURegs:%vreg172,%vreg168,%vreg171
	%vreg173<def> = MovIGH %ZERO, <jt#0>[TF=3]; CPURegs:%vreg173
	%vreg174<def,tied1> = MovIGL %vreg173<tied0>, <jt#0>[TF=4]; CPURegs:%vreg174,%vreg173
	%vreg175<def> = ADDu %vreg172<kill>, %vreg174<kill>; CPURegs:%vreg175,%vreg172,%vreg174
	%vreg176<def> = LD %vreg175<kill>, 0; mem:LD4[JumpTable] CPURegs:%vreg176,%vreg175
	Jmpr %vreg176<kill>; CPURegs:%vreg176
    Successors according to CFG: BB#17(32) BB#18(16) BB#19(16) BB#16(16) BB#20(16) BB#21(16)

BB#16: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#15 BB#23
	%vreg224<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg224
	%vreg225<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg225
	ST %vreg225<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg225
	ST %vreg224<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg224
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#17: derived from LLVM BB %sw.bb47
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg194<def> = COPY %SP; CPURegs:%vreg194
	%vreg195<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg195
	ST %vreg195<kill>, %vreg194, 12; mem:ST4[<unknown>] CPURegs:%vreg195,%vreg194
	%vreg196<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg196
	ST %vreg196<kill>, %vreg194, 8; mem:ST4[<unknown>] CPURegs:%vreg196,%vreg194
	%vreg197<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg197
	%vreg198<def> = MovGR %ZERO, 1072243195; CPURegs:%vreg198
	%A0<def> = COPY %vreg197; CPURegs:%vreg197
	%A1<def> = COPY %vreg198; CPURegs:%vreg198
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg199<def> = COPY %V0; CPURegs:%vreg199
	%vreg200<def> = COPY %V1; CPURegs:%vreg200
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg201<def> = COPY %SP; CPURegs:%vreg201
	ST %vreg198, %vreg201, 12; mem:ST4[<unknown>] CPURegs:%vreg198,%vreg201
	ST %vreg197, %vreg201, 8; mem:ST4[<unknown>] CPURegs:%vreg197,%vreg201
	%A0<def> = COPY %vreg199; CPURegs:%vreg199
	%A1<def> = COPY %vreg200; CPURegs:%vreg200
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg202<def> = COPY %V0; CPURegs:%vreg202
	%vreg203<def> = COPY %V1; CPURegs:%vreg203
	ST %vreg203, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg203
	ST %vreg202, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg202
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#18: derived from LLVM BB %sw.bb50
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg187<def> = COPY %SP; CPURegs:%vreg187
	%vreg188<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg188
	ST %vreg188<kill>, %vreg187, 12; mem:ST4[<unknown>] CPURegs:%vreg188,%vreg187
	%vreg189<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg189
	ST %vreg189<kill>, %vreg187, 8; mem:ST4[<unknown>] CPURegs:%vreg189,%vreg187
	%vreg190<def> = MovGR %ZERO, 0; CPURegs:%vreg190
	%vreg191<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg191
	%A0<def> = COPY %vreg190; CPURegs:%vreg190
	%A1<def> = COPY %vreg191; CPURegs:%vreg191
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg192<def> = COPY %V0; CPURegs:%vreg192
	%vreg193<def> = COPY %V1; CPURegs:%vreg193
	ST %vreg193, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg193
	ST %vreg192, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg192
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#19: derived from LLVM BB %sw.bb52
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg177<def> = COPY %SP; CPURegs:%vreg177
	%vreg178<def> = MovGR %ZERO, 1072243195; CPURegs:%vreg178
	ST %vreg178, %vreg177, 12; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg177
	%vreg179<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg179
	ST %vreg179, %vreg177, 8; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg177
	%vreg180<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg180
	%vreg181<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg181
	%A0<def> = COPY %vreg180; CPURegs:%vreg180
	%A1<def> = COPY %vreg181; CPURegs:%vreg181
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg182<def> = COPY %V0; CPURegs:%vreg182
	%vreg183<def> = COPY %V1; CPURegs:%vreg183
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg184<def> = COPY %SP; CPURegs:%vreg184
	ST %vreg178, %vreg184, 12; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg184
	ST %vreg179, %vreg184, 8; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg184
	%A0<def> = COPY %vreg182; CPURegs:%vreg182
	%A1<def> = COPY %vreg183; CPURegs:%vreg183
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg185<def> = COPY %V0; CPURegs:%vreg185
	%vreg186<def> = COPY %V1; CPURegs:%vreg186
	ST %vreg186, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg186
	ST %vreg185, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg185
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#20: derived from LLVM BB %sw.bb55
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg204<def> = COPY %SP; CPURegs:%vreg204
	%vreg205<def> = MovGR %ZERO, -1075240453; CPURegs:%vreg205
	ST %vreg205, %vreg204, 12; mem:ST4[<unknown>] CPURegs:%vreg205,%vreg204
	%vreg206<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg206
	ST %vreg206, %vreg204, 8; mem:ST4[<unknown>] CPURegs:%vreg206,%vreg204
	%vreg207<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg207
	%vreg208<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg208
	%A0<def> = COPY %vreg207; CPURegs:%vreg207
	%A1<def> = COPY %vreg208; CPURegs:%vreg208
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg209<def> = COPY %V0; CPURegs:%vreg209
	%vreg210<def> = COPY %V1; CPURegs:%vreg210
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg211<def> = COPY %SP; CPURegs:%vreg211
	ST %vreg205, %vreg211, 12; mem:ST4[<unknown>] CPURegs:%vreg205,%vreg211
	ST %vreg206, %vreg211, 8; mem:ST4[<unknown>] CPURegs:%vreg206,%vreg211
	%A0<def> = COPY %vreg209; CPURegs:%vreg209
	%A1<def> = COPY %vreg210; CPURegs:%vreg210
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg212<def> = COPY %V0; CPURegs:%vreg212
	%vreg213<def> = COPY %V1; CPURegs:%vreg213
	ST %vreg213, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg213
	ST %vreg212, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg212
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#21: derived from LLVM BB %sw.bb58
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg214<def> = COPY %SP; CPURegs:%vreg214
	%vreg215<def> = LD <fi#4>, 4; mem:LD4[%y+4] CPURegs:%vreg215
	ST %vreg215<kill>, %vreg214, 12; mem:ST4[<unknown>] CPURegs:%vreg215,%vreg214
	%vreg216<def> = LD <fi#4>, 0; mem:LD4[%y](align=8) CPURegs:%vreg216
	ST %vreg216<kill>, %vreg214, 8; mem:ST4[<unknown>] CPURegs:%vreg216,%vreg214
	%vreg217<def> = MovGR %ZERO, 1413754136; CPURegs:%vreg217
	%vreg218<def> = MovGR %ZERO, 1073291771; CPURegs:%vreg218
	%A0<def> = COPY %vreg217; CPURegs:%vreg217
	%A1<def> = COPY %vreg218; CPURegs:%vreg218
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg219<def> = COPY %V0; CPURegs:%vreg219
	%vreg220<def> = COPY %V1; CPURegs:%vreg220
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg221<def> = COPY %SP; CPURegs:%vreg221
	ST %vreg218, %vreg221, 12; mem:ST4[<unknown>] CPURegs:%vreg218,%vreg221
	ST %vreg217, %vreg221, 8; mem:ST4[<unknown>] CPURegs:%vreg217,%vreg221
	%A0<def> = COPY %vreg219; CPURegs:%vreg219
	%A1<def> = COPY %vreg220; CPURegs:%vreg220
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg222<def> = COPY %V0; CPURegs:%vreg222
	%vreg223<def> = COPY %V1; CPURegs:%vreg223
	ST %vreg223, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg223
	ST %vreg222, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg222
    Successors according to CFG: BB#22

BB#22: derived from LLVM BB %return
    Predecessors according to CFG: BB#14 BB#19 BB#18 BB#17 BB#20 BB#21 BB#16 BB#3 BB#2
	%vreg237<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg237
	%vreg238<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg238
	%V0<def> = COPY %vreg237; CPURegs:%vreg237
	%V1<def> = COPY %vreg238; CPURegs:%vreg238
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function _Asin.

