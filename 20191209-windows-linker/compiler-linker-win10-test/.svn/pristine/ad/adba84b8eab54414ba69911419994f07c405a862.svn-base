
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name lms.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/lms.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/lms.ll -x c ./testcase_8slots/lms.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg12<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg12
	%vreg11<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg11
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	%vreg14<def> = MovGR %ZERO, 7; CPURegs:%vreg14
	ST %vreg14<kill>, %vreg6, 0; mem:ST4[%d](tbaa=<badref>) CPURegs:%vreg14,%vreg6
	%vreg15<def> = MovGR %ZERO, 8; CPURegs:%vreg15
	ST %vreg15<kill>, %vreg7, 0; mem:ST4[%x](tbaa=<badref>) CPURegs:%vreg15,%vreg7
	%vreg16<def> = MovGR %ZERO, 1; CPURegs:%vreg16
	ST %vreg16<kill>, %vreg10, 0; mem:ST4[%delta](tbaa=<badref>) CPURegs:%vreg16,%vreg10
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg13<def> = MovGR %ZERO, 0; CPURegs:%vreg13
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg13, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg13,%vreg5
	%vreg1<def> = PHI %vreg12, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg1,%vreg12,%vreg4
	%vreg2<def> = PHI %vreg11, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg2,%vreg11,%vreg3
	%vreg17<def> = MovGR %ZERO, 1; CPURegs:%vreg17
	ST %vreg17, %vreg2, 0; mem:ST4[%p_H.addr.03](tbaa=<badref>) CPURegs:%vreg17,%vreg2
	ST %vreg17, %vreg1, 0; mem:ST4[%p_X.addr.04](tbaa=<badref>) CPURegs:%vreg17,%vreg1
	%vreg4<def> = ADDiu %vreg1, 4; CPURegs:%vreg4,%vreg1
	%vreg3<def> = ADDiu %vreg2, 4; CPURegs:%vreg3,%vreg2
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg18<def> = NEQI %vreg5, 16; CPURegs:%vreg18,%vreg5
	JC %vreg18<kill>, <BB#1>; CPURegs:%vreg18
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 24, %SP<imp-def,dead>, %SP<imp-use>
	%vreg19<def> = COPY %SP; CPURegs:%vreg19
	%vreg20<def> = LEA <fi#0>, 0; CPURegs:%vreg20
	ST %vreg20<kill>, %vreg19, 8; mem:ST4[<unknown>] CPURegs:%vreg20,%vreg19
	%vreg21<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg22,%vreg21
	ST %vreg22, %vreg19, 16; mem:ST4[<unknown>] CPURegs:%vreg22,%vreg19
	%vreg23<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg23
	%vreg24<def,tied1> = MovIGL %vreg23<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg24,%vreg23
	ST %vreg24, %vreg19, 12; mem:ST4[<unknown>] CPURegs:%vreg24,%vreg19
	%vreg25<def> = LEA <fi#1>, 0; CPURegs:%vreg25
	%vreg26<def> = LEA <fi#2>, 0; CPURegs:%vreg26
	%A0<def> = COPY %vreg25; CPURegs:%vreg25
	%A1<def> = COPY %vreg26; CPURegs:%vreg26
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 24, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg27<def> = MovGR %ZERO, 0; CPURegs:%vreg27
	ST %vreg27<kill>, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg27
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg17<def> = ADDiu %vreg24, 60; CPURegs:%vreg17,%vreg24
	%vreg16<def> = ADDiu %vreg22, 60; CPURegs:%vreg16,%vreg22
	%vreg15<def> = ADDiu %vreg22, 56; CPURegs:%vreg15,%vreg22
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg15, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg15,%vreg5
	%vreg1<def> = PHI %vreg16, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg1,%vreg16,%vreg6
	%vreg2<def> = PHI %vreg17, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg17,%vreg4
	%vreg3<def> = PHI %vreg18, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg3,%vreg18,%vreg7
	%vreg28<def> = LD %vreg2, 0; mem:LD4[%p_H.026](tbaa=<badref>) CPURegs:%vreg28,%vreg2
	%vreg29<def> = LD %vreg0, 0; mem:LD4[%p_X2.028](tbaa=<badref>) CPURegs:%vreg29,%vreg0
	ST %vreg29, %vreg1, 0; mem:ST4[%p_X.027](tbaa=<badref>) CPURegs:%vreg29,%vreg1
	%vreg30<def> = MUL32 %vreg29, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#3>, 0; mem:LD4[%y](tbaa=<badref>) CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	ST %vreg32<kill>, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg32
	%vreg6<def> = ADDiu %vreg1, -4; CPURegs:%vreg6,%vreg1
	%vreg5<def> = ADDiu %vreg0, -4; CPURegs:%vreg5,%vreg0
	%vreg4<def> = ADDiu %vreg2, -4; CPURegs:%vreg4,%vreg2
	%vreg7<def> = ADDiu %vreg3, 1; CPURegs:%vreg7,%vreg3
	%vreg33<def> = NEQI %vreg7, 16; CPURegs:%vreg33,%vreg7
	JC %vreg33<kill>, <BB#1>; CPURegs:%vreg33
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg37<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg37
	%vreg34<def,tied1> = MovIGL %vreg37<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg34,%vreg37
	%vreg38<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg38
	%vreg35<def,tied1> = MovIGL %vreg38<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg35,%vreg38
	%vreg39<def> = LD %vreg35, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.H, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg39,%vreg35
	%vreg40<def> = LD <fi#2>, 0; mem:LD4[%x](tbaa=<badref>) CPURegs:%vreg40
	ST %vreg40, %vreg34, 0; mem:ST4[getelementptr inbounds ([16 x i32]* @main.X, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg40,%vreg34
	%vreg41<def> = MUL32 %vreg40, %vreg39<kill>; CPURegs:%vreg41,%vreg40,%vreg39
	%vreg42<def> = LD <fi#3>, 0; mem:LD4[%y](tbaa=<badref>) CPURegs:%vreg42
	%vreg43<def> = ADDu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	ST %vreg43, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg43
	%vreg44<def> = LD <fi#1>, 0; mem:LD4[%d](tbaa=<badref>) CPURegs:%vreg44
	%vreg45<def> = SUBu %vreg44<kill>, %vreg43; CPURegs:%vreg45,%vreg44,%vreg43
	%vreg46<def> = LD <fi#0>, 0; mem:LD4[%delta](tbaa=<badref>) CPURegs:%vreg46
	%vreg8<def> = MUL32 %vreg45<kill>, %vreg46<kill>; CPURegs:%vreg8,%vreg45,%vreg46
	%vreg36<def> = MovGR %ZERO, 0; CPURegs:%vreg36
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.body8
    Predecessors according to CFG: BB#2 BB#3
	%vreg9<def> = PHI %vreg34, <BB#2>, %vreg12, <BB#3>; CPURegs:%vreg9,%vreg34,%vreg12
	%vreg10<def> = PHI %vreg35, <BB#2>, %vreg13, <BB#3>; CPURegs:%vreg10,%vreg35,%vreg13
	%vreg11<def> = PHI %vreg36, <BB#2>, %vreg14, <BB#3>; CPURegs:%vreg11,%vreg36,%vreg14
	%vreg47<def> = LD %vreg9, 0; mem:LD4[%p_X.124](tbaa=<badref>) CPURegs:%vreg47,%vreg9
	%vreg48<def> = MUL32 %vreg8, %vreg47<kill>; CPURegs:%vreg48,%vreg8,%vreg47
	%vreg49<def> = LD %vreg10, 0; mem:LD4[%p_H.123](tbaa=<badref>) CPURegs:%vreg49,%vreg10
	%vreg50<def> = ADDu %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	ST %vreg50<kill>, %vreg10, 0; mem:ST4[%p_H.123](tbaa=<badref>) CPURegs:%vreg50,%vreg10
	%vreg13<def> = ADDiu %vreg10, 4; CPURegs:%vreg13,%vreg10
	%vreg12<def> = ADDiu %vreg9, 4; CPURegs:%vreg12,%vreg9
	%vreg14<def> = ADDiu %vreg11, 1; CPURegs:%vreg14,%vreg11
	%vreg51<def> = NEQI %vreg14, 16; CPURegs:%vreg51,%vreg14
	JC %vreg51<kill>, <BB#3>; CPURegs:%vreg51
	Jmp <BB#4>
    Successors according to CFG: BB#4(4) BB#3(124)

BB#4: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#3
	ADJCALLSTACKDOWN 24, %SP<imp-def,dead>, %SP<imp-use>
	%vreg52<def> = COPY %SP; CPURegs:%vreg52
	%vreg53<def> = LEA <fi#3>, 0; CPURegs:%vreg53
	ST %vreg53<kill>, %vreg52, 8; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg52
	%vreg54<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg54
	%vreg55<def,tied1> = MovIGL %vreg54<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg55,%vreg54
	ST %vreg55<kill>, %vreg52, 16; mem:ST4[<unknown>] CPURegs:%vreg55,%vreg52
	%vreg56<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg56
	%vreg57<def,tied1> = MovIGL %vreg56<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg57,%vreg56
	ST %vreg57<kill>, %vreg52, 12; mem:ST4[<unknown>] CPURegs:%vreg57,%vreg52
	%vreg58<def> = LEA <fi#1>, 0; CPURegs:%vreg58
	%vreg59<def> = LEA <fi#2>, 0; CPURegs:%vreg59
	%A0<def> = COPY %vreg58; CPURegs:%vreg58
	%A1<def> = COPY %vreg59; CPURegs:%vreg59
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 24, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg60<def> = MovGR %ZERO, 0; CPURegs:%vreg60
	%V0<def> = COPY %vreg60; CPURegs:%vreg60
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg12<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg12
	%vreg11<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg11
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	%vreg14<def> = MovGR %ZERO, 7; CPURegs:%vreg14
	ST %vreg14<kill>, %vreg6, 0; mem:ST4[%d](tbaa=<badref>) CPURegs:%vreg14,%vreg6
	%vreg15<def> = MovGR %ZERO, 8; CPURegs:%vreg15
	ST %vreg15<kill>, %vreg7, 0; mem:ST4[%x](tbaa=<badref>) CPURegs:%vreg15,%vreg7
	%vreg16<def> = MovGR %ZERO, 1; CPURegs:%vreg16
	ST %vreg16<kill>, %vreg10, 0; mem:ST4[%delta](tbaa=<badref>) CPURegs:%vreg16,%vreg10
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg13<def> = MovGR %ZERO, 0; CPURegs:%vreg13
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg13, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg13,%vreg5
	%vreg1<def> = PHI %vreg12, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg1,%vreg12,%vreg4
	%vreg2<def> = PHI %vreg11, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg2,%vreg11,%vreg3
	%vreg17<def> = MovGR %ZERO, 1; CPURegs:%vreg17
	ST %vreg17, %vreg2, 0; mem:ST4[%p_H.addr.03](tbaa=<badref>) CPURegs:%vreg17,%vreg2
	ST %vreg17, %vreg1, 0; mem:ST4[%p_X.addr.04](tbaa=<badref>) CPURegs:%vreg17,%vreg1
	%vreg4<def> = ADDiu %vreg1, 4; CPURegs:%vreg4,%vreg1
	%vreg3<def> = ADDiu %vreg2, 4; CPURegs:%vreg3,%vreg2
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg18<def> = NEQI %vreg5, 16; CPURegs:%vreg18,%vreg5
	JC %vreg18<kill>, <BB#1>; CPURegs:%vreg18
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 24, %SP<imp-def,dead>, %SP<imp-use>
	%vreg19<def> = COPY %SP; CPURegs:%vreg19
	%vreg20<def> = LEA <fi#0>, 0; CPURegs:%vreg20
	ST %vreg20<kill>, %vreg19, 8; mem:ST4[<unknown>] CPURegs:%vreg20,%vreg19
	%vreg21<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg22,%vreg21
	ST %vreg22, %vreg19, 16; mem:ST4[<unknown>] CPURegs:%vreg22,%vreg19
	%vreg23<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg23
	%vreg24<def,tied1> = MovIGL %vreg23<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg24,%vreg23
	ST %vreg24, %vreg19, 12; mem:ST4[<unknown>] CPURegs:%vreg24,%vreg19
	%vreg25<def> = LEA <fi#1>, 0; CPURegs:%vreg25
	%vreg26<def> = LEA <fi#2>, 0; CPURegs:%vreg26
	%A0<def> = COPY %vreg25; CPURegs:%vreg25
	%A1<def> = COPY %vreg26; CPURegs:%vreg26
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 24, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg27<def> = MovGR %ZERO, 0; CPURegs:%vreg27
	ST %vreg27<kill>, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg27
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg17<def> = ADDiu %vreg24, 60; CPURegs:%vreg17,%vreg24
	%vreg16<def> = ADDiu %vreg22, 60; CPURegs:%vreg16,%vreg22
	%vreg15<def> = ADDiu %vreg22, 56; CPURegs:%vreg15,%vreg22
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg15, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg15,%vreg5
	%vreg1<def> = PHI %vreg16, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg1,%vreg16,%vreg6
	%vreg2<def> = PHI %vreg17, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg17,%vreg4
	%vreg3<def> = PHI %vreg18, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg3,%vreg18,%vreg7
	%vreg28<def> = LD %vreg2, 0; mem:LD4[%p_H.026](tbaa=<badref>) CPURegs:%vreg28,%vreg2
	%vreg29<def> = LD %vreg0, 0; mem:LD4[%p_X2.028](tbaa=<badref>) CPURegs:%vreg29,%vreg0
	ST %vreg29, %vreg1, 0; mem:ST4[%p_X.027](tbaa=<badref>) CPURegs:%vreg29,%vreg1
	%vreg30<def> = MUL32 %vreg29, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#3>, 0; mem:LD4[%y](tbaa=<badref>) CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	ST %vreg32<kill>, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg32
	%vreg6<def> = ADDiu %vreg1, -4; CPURegs:%vreg6,%vreg1
	%vreg5<def> = ADDiu %vreg0, -4; CPURegs:%vreg5,%vreg0
	%vreg4<def> = ADDiu %vreg2, -4; CPURegs:%vreg4,%vreg2
	%vreg7<def> = ADDiu %vreg3, 1; CPURegs:%vreg7,%vreg3
	%vreg33<def> = NEQI %vreg7, 16; CPURegs:%vreg33,%vreg7
	JC %vreg33<kill>, <BB#1>; CPURegs:%vreg33
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg37<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg37
	%vreg34<def,tied1> = MovIGL %vreg37<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg34,%vreg37
	%vreg38<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg38
	%vreg35<def,tied1> = MovIGL %vreg38<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg35,%vreg38
	%vreg39<def> = LD %vreg35, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.H, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg39,%vreg35
	%vreg40<def> = LD <fi#2>, 0; mem:LD4[%x](tbaa=<badref>) CPURegs:%vreg40
	ST %vreg40, %vreg34, 0; mem:ST4[getelementptr inbounds ([16 x i32]* @main.X, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg40,%vreg34
	%vreg41<def> = MUL32 %vreg40, %vreg39<kill>; CPURegs:%vreg41,%vreg40,%vreg39
	%vreg42<def> = LD <fi#3>, 0; mem:LD4[%y](tbaa=<badref>) CPURegs:%vreg42
	%vreg43<def> = ADDu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	ST %vreg43, <fi#3>, 0; mem:ST4[%y](tbaa=<badref>) CPURegs:%vreg43
	%vreg44<def> = LD <fi#1>, 0; mem:LD4[%d](tbaa=<badref>) CPURegs:%vreg44
	%vreg45<def> = SUBu %vreg44<kill>, %vreg43; CPURegs:%vreg45,%vreg44,%vreg43
	%vreg46<def> = LD <fi#0>, 0; mem:LD4[%delta](tbaa=<badref>) CPURegs:%vreg46
	%vreg8<def> = MUL32 %vreg45<kill>, %vreg46<kill>; CPURegs:%vreg8,%vreg45,%vreg46
	%vreg36<def> = MovGR %ZERO, 0; CPURegs:%vreg36
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.body8
    Predecessors according to CFG: BB#2 BB#3
	%vreg9<def> = PHI %vreg34, <BB#2>, %vreg12, <BB#3>; CPURegs:%vreg9,%vreg34,%vreg12
	%vreg10<def> = PHI %vreg35, <BB#2>, %vreg13, <BB#3>; CPURegs:%vreg10,%vreg35,%vreg13
	%vreg11<def> = PHI %vreg36, <BB#2>, %vreg14, <BB#3>; CPURegs:%vreg11,%vreg36,%vreg14
	%vreg47<def> = LD %vreg9, 0; mem:LD4[%p_X.124](tbaa=<badref>) CPURegs:%vreg47,%vreg9
	%vreg48<def> = MUL32 %vreg8, %vreg47<kill>; CPURegs:%vreg48,%vreg8,%vreg47
	%vreg49<def> = LD %vreg10, 0; mem:LD4[%p_H.123](tbaa=<badref>) CPURegs:%vreg49,%vreg10
	%vreg50<def> = ADDu %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	ST %vreg50<kill>, %vreg10, 0; mem:ST4[%p_H.123](tbaa=<badref>) CPURegs:%vreg50,%vreg10
	%vreg13<def> = ADDiu %vreg10, 4; CPURegs:%vreg13,%vreg10
	%vreg12<def> = ADDiu %vreg9, 4; CPURegs:%vreg12,%vreg9
	%vreg14<def> = ADDiu %vreg11, 1; CPURegs:%vreg14,%vreg11
	%vreg51<def> = NEQI %vreg14, 16; CPURegs:%vreg51,%vreg14
	JC %vreg51<kill>, <BB#3>; CPURegs:%vreg51
	Jmp <BB#4>
    Successors according to CFG: BB#4(4) BB#3(124)

BB#4: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#3
	ADJCALLSTACKDOWN 24, %SP<imp-def,dead>, %SP<imp-use>
	%vreg52<def> = COPY %SP; CPURegs:%vreg52
	%vreg53<def> = LEA <fi#3>, 0; CPURegs:%vreg53
	ST %vreg53<kill>, %vreg52, 8; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg52
	%vreg54<def> = MovIGH %ZERO, <ga:@main.X>[TF=3]; CPURegs:%vreg54
	%vreg55<def,tied1> = MovIGL %vreg54<tied0>, <ga:@main.X>[TF=4]; CPURegs:%vreg55,%vreg54
	ST %vreg55<kill>, %vreg52, 16; mem:ST4[<unknown>] CPURegs:%vreg55,%vreg52
	%vreg56<def> = MovIGH %ZERO, <ga:@main.H>[TF=3]; CPURegs:%vreg56
	%vreg57<def,tied1> = MovIGL %vreg56<tied0>, <ga:@main.H>[TF=4]; CPURegs:%vreg57,%vreg56
	ST %vreg57<kill>, %vreg52, 12; mem:ST4[<unknown>] CPURegs:%vreg57,%vreg52
	%vreg58<def> = LEA <fi#1>, 0; CPURegs:%vreg58
	%vreg59<def> = LEA <fi#2>, 0; CPURegs:%vreg59
	%A0<def> = COPY %vreg58; CPURegs:%vreg58
	%A1<def> = COPY %vreg59; CPURegs:%vreg59
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 24, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg60<def> = MovGR %ZERO, 0; CPURegs:%vreg60
	%V0<def> = COPY %vreg60; CPURegs:%vreg60
	RetLR %V0<imp-use>

# End machine code for function main.

