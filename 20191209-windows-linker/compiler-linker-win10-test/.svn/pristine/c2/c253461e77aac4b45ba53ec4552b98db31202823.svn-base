
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name fir.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/fir.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/fir.ll -x c ./testcase_8slots/fir.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg10<def> = MovGR %ZERO, 1; CPURegs:%vreg10
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg5
	%vreg1<def> = PHI %vreg8, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg1,%vreg8,%vreg3
	%vreg2<def> = PHI %vreg9, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg9,%vreg4
	ST %vreg0, %vreg1, 0; mem:ST4[%px.addr.06](tbaa=<badref>) CPURegs:%vreg0,%vreg1
	ST %vreg0, %vreg2, 0; mem:ST4[%ph.addr.05](tbaa=<badref>) CPURegs:%vreg0,%vreg2
	%vreg4<def> = ADDiu %vreg2, 4; CPURegs:%vreg4,%vreg2
	%vreg3<def> = ADDiu %vreg1, 4; CPURegs:%vreg3,%vreg1
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg11<def> = NEQI %vreg5, 17; CPURegs:%vreg11,%vreg5
	JC %vreg11<kill>, <BB#1>; CPURegs:%vreg11
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg14
	%vreg15<def,tied1> = MovIGL %vreg14<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg15,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg17,%vreg16
	%A0<def> = COPY %vreg15; CPURegs:%vreg15
	%A1<def> = COPY %vreg17; CPURegs:%vreg17
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	%vreg13<def> = ADDiu %vreg15, 60; CPURegs:%vreg13,%vreg15
	%vreg12<def> = ADDiu %vreg15, 56; CPURegs:%vreg12,%vreg15
	%vreg11<def> = ADDiu %vreg17, 60; CPURegs:%vreg11,%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg6
	%vreg1<def> = PHI %vreg11, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg1,%vreg11,%vreg5
	%vreg2<def> = PHI %vreg12, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg2,%vreg12,%vreg7
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg8
	%vreg4<def> = PHI %vreg10, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg4,%vreg10,%vreg9
	%vreg18<def> = LD %vreg1, 0; mem:LD4[%ph.016](tbaa=<badref>) CPURegs:%vreg18,%vreg1
	%vreg19<def> = LD %vreg3, 0; mem:LD4[%px.014](tbaa=<badref>) CPURegs:%vreg19,%vreg3
	%vreg20<def> = MUL32 %vreg19<kill>, %vreg18<kill>; CPURegs:%vreg20,%vreg19,%vreg18
	%vreg21<def> = LD %vreg2, 0; mem:LD4[%px2.015](tbaa=<badref>) CPURegs:%vreg21,%vreg2
	ST %vreg21<kill>, %vreg3, 0; mem:ST4[%px.014](tbaa=<badref>) CPURegs:%vreg21,%vreg3
	%vreg6<def> = ADDu %vreg20<kill>, %vreg0; CPURegs:%vreg6,%vreg20,%vreg0
	%vreg8<def> = ADDiu %vreg3, -4; CPURegs:%vreg8,%vreg3
	%vreg7<def> = ADDiu %vreg2, -4; CPURegs:%vreg7,%vreg2
	%vreg5<def> = ADDiu %vreg1, -4; CPURegs:%vreg5,%vreg1
	%vreg9<def> = ADDiu %vreg4, 1; CPURegs:%vreg9,%vreg4
	%vreg22<def> = NEQI %vreg9, 15; CPURegs:%vreg22,%vreg9
	JC %vreg22<kill>, <BB#1>; CPURegs:%vreg22
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg23<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg23
	%vreg24<def,tied1> = MovIGL %vreg23<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg24,%vreg23
	%vreg25<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg25
	%vreg26<def,tied1> = MovIGL %vreg25<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg26,%vreg25
	%vreg27<def> = LD %vreg26, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.x, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD %vreg24, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.h, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg28,%vreg24
	%vreg29<def> = MovGR %ZERO, 100; CPURegs:%vreg29
	ST %vreg29<kill>, %vreg26, 0; mem:ST4[getelementptr inbounds ([16 x i32]* @main.x, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg29,%vreg26
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg26; CPURegs:%vreg26
	%A1<def> = COPY %vreg24; CPURegs:%vreg24
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg30<def> = MUL32 %vreg27<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg27,%vreg28
	%vreg31<def> = ADDu %vreg30<kill>, %vreg6; CPURegs:%vreg31,%vreg30,%vreg6
	%V0<def> = COPY %vreg31; CPURegs:%vreg31
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg10<def> = MovGR %ZERO, 1; CPURegs:%vreg10
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg5
	%vreg1<def> = PHI %vreg8, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg1,%vreg8,%vreg3
	%vreg2<def> = PHI %vreg9, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg9,%vreg4
	ST %vreg0, %vreg1, 0; mem:ST4[%px.addr.06](tbaa=<badref>) CPURegs:%vreg0,%vreg1
	ST %vreg0, %vreg2, 0; mem:ST4[%ph.addr.05](tbaa=<badref>) CPURegs:%vreg0,%vreg2
	%vreg4<def> = ADDiu %vreg2, 4; CPURegs:%vreg4,%vreg2
	%vreg3<def> = ADDiu %vreg1, 4; CPURegs:%vreg3,%vreg1
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg11<def> = NEQI %vreg5, 17; CPURegs:%vreg11,%vreg5
	JC %vreg11<kill>, <BB#1>; CPURegs:%vreg11
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg14
	%vreg15<def,tied1> = MovIGL %vreg14<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg15,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg17,%vreg16
	%A0<def> = COPY %vreg15; CPURegs:%vreg15
	%A1<def> = COPY %vreg17; CPURegs:%vreg17
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	%vreg13<def> = ADDiu %vreg15, 60; CPURegs:%vreg13,%vreg15
	%vreg12<def> = ADDiu %vreg15, 56; CPURegs:%vreg12,%vreg15
	%vreg11<def> = ADDiu %vreg17, 60; CPURegs:%vreg11,%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg6
	%vreg1<def> = PHI %vreg11, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg1,%vreg11,%vreg5
	%vreg2<def> = PHI %vreg12, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg2,%vreg12,%vreg7
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg8
	%vreg4<def> = PHI %vreg10, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg4,%vreg10,%vreg9
	%vreg18<def> = LD %vreg1, 0; mem:LD4[%ph.016](tbaa=<badref>) CPURegs:%vreg18,%vreg1
	%vreg19<def> = LD %vreg3, 0; mem:LD4[%px.014](tbaa=<badref>) CPURegs:%vreg19,%vreg3
	%vreg20<def> = MUL32 %vreg19<kill>, %vreg18<kill>; CPURegs:%vreg20,%vreg19,%vreg18
	%vreg21<def> = LD %vreg2, 0; mem:LD4[%px2.015](tbaa=<badref>) CPURegs:%vreg21,%vreg2
	ST %vreg21<kill>, %vreg3, 0; mem:ST4[%px.014](tbaa=<badref>) CPURegs:%vreg21,%vreg3
	%vreg6<def> = ADDu %vreg20<kill>, %vreg0; CPURegs:%vreg6,%vreg20,%vreg0
	%vreg8<def> = ADDiu %vreg3, -4; CPURegs:%vreg8,%vreg3
	%vreg7<def> = ADDiu %vreg2, -4; CPURegs:%vreg7,%vreg2
	%vreg5<def> = ADDiu %vreg1, -4; CPURegs:%vreg5,%vreg1
	%vreg9<def> = ADDiu %vreg4, 1; CPURegs:%vreg9,%vreg4
	%vreg22<def> = NEQI %vreg9, 15; CPURegs:%vreg22,%vreg9
	JC %vreg22<kill>, <BB#1>; CPURegs:%vreg22
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg23<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg23
	%vreg24<def,tied1> = MovIGL %vreg23<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg24,%vreg23
	%vreg25<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg25
	%vreg26<def,tied1> = MovIGL %vreg25<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg26,%vreg25
	%vreg27<def> = LD %vreg26, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.x, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD %vreg24, 0; mem:LD4[getelementptr inbounds ([16 x i32]* @main.h, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg28,%vreg24
	%vreg29<def> = MovGR %ZERO, 100; CPURegs:%vreg29
	ST %vreg29<kill>, %vreg26, 0; mem:ST4[getelementptr inbounds ([16 x i32]* @main.x, i32 0, i32 0)](tbaa=<badref>) CPURegs:%vreg29,%vreg26
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg26; CPURegs:%vreg26
	%A1<def> = COPY %vreg24; CPURegs:%vreg24
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg30<def> = MUL32 %vreg27<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg27,%vreg28
	%vreg31<def> = ADDu %vreg30<kill>, %vreg6; CPURegs:%vreg31,%vreg30,%vreg6
	%V0<def> = COPY %vreg31; CPURegs:%vreg31
	RetLR %V0<imp-use>

# End machine code for function main.

