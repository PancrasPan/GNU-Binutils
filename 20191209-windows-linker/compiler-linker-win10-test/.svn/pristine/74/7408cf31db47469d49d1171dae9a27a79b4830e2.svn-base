
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name linklist.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/linklist.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/linklist.ll -x c ./testcase_8slots/linklist.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg7<def> = MovGR %ZERO, 1; CPURegs:%vreg7
	ST %vreg7<kill>, <fi#0>, 0; mem:ST4[%key](align=8)(tbaa=<badref>) CPURegs:%vreg7
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	ST %vreg8<kill>, <fi#1>, 0; mem:ST4[%key1](align=8)(tbaa=<badref>) CPURegs:%vreg8
	%vreg0<def> = LEA <fi#1>, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 4; mem:ST4[%next](tbaa=<badref>) CPURegs:%vreg0
	%vreg9<def> = MovGR %ZERO, 0; CPURegs:%vreg9
	ST %vreg9<kill>, <fi#1>, 4; mem:ST4[%next2](tbaa=<badref>) CPURegs:%vreg9
	%vreg10<def> = MovGR %ZERO, 4; CPURegs:%vreg10
	%vreg6<def> = LEA <fi#0>, 0; CPURegs:%vreg6
	%vreg1<def> = ORu %vreg6, %vreg10<kill>; CPURegs:%vreg1,%vreg6,%vreg10
	%vreg11<def> = LD <fi#0>, 4; mem:LD4[%next314](tbaa=<badref>) CPURegs:%vreg11
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#2>; CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#2(12) BB#1(20)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg1, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg2,%vreg1,%vreg5
	%vreg3<def> = PHI %vreg6, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg3,%vreg6,%vreg4
	%vreg13<def> = LD %vreg3, 0; mem:LD4[%key4](tbaa=<badref>) CPURegs:%vreg13,%vreg3
	%vreg14<def> = ADDiu %vreg13<kill>, 1; CPURegs:%vreg14,%vreg13
	ST %vreg14<kill>, %vreg3, 0; mem:ST4[%key4](tbaa=<badref>) CPURegs:%vreg14,%vreg3
	%vreg4<def> = LD %vreg2, 0; mem:LD4[%next317](tbaa=<badref>) CPURegs:%vreg4,%vreg2
	%vreg5<def> = ADDiu %vreg4, 4; CPURegs:%vreg5,%vreg4
	%vreg15<def> = LD %vreg4, 4; mem:LD4[%next3](tbaa=<badref>) CPURegs:%vreg15,%vreg4
	%vreg16<def> = NEQI %vreg15<kill>, 0; CPURegs:%vreg16,%vreg15
	JC %vreg16<kill>, <BB#1>; CPURegs:%vreg16
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg17<def> = LD %vreg0, 0; mem:LD4[%key1](tbaa=<badref>) CPURegs:%vreg17,%vreg0
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg7<def> = MovGR %ZERO, 1; CPURegs:%vreg7
	ST %vreg7<kill>, <fi#0>, 0; mem:ST4[%key](align=8)(tbaa=<badref>) CPURegs:%vreg7
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	ST %vreg8<kill>, <fi#1>, 0; mem:ST4[%key1](align=8)(tbaa=<badref>) CPURegs:%vreg8
	%vreg0<def> = LEA <fi#1>, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 4; mem:ST4[%next](tbaa=<badref>) CPURegs:%vreg0
	%vreg9<def> = MovGR %ZERO, 0; CPURegs:%vreg9
	ST %vreg9<kill>, <fi#1>, 4; mem:ST4[%next2](tbaa=<badref>) CPURegs:%vreg9
	%vreg10<def> = MovGR %ZERO, 4; CPURegs:%vreg10
	%vreg6<def> = LEA <fi#0>, 0; CPURegs:%vreg6
	%vreg1<def> = ORu %vreg6, %vreg10<kill>; CPURegs:%vreg1,%vreg6,%vreg10
	%vreg11<def> = LD <fi#0>, 4; mem:LD4[%next314](tbaa=<badref>) CPURegs:%vreg11
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#2>; CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#2(12) BB#1(20)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg1, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg2,%vreg1,%vreg5
	%vreg3<def> = PHI %vreg6, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg3,%vreg6,%vreg4
	%vreg13<def> = LD %vreg3, 0; mem:LD4[%key4](tbaa=<badref>) CPURegs:%vreg13,%vreg3
	%vreg14<def> = ADDiu %vreg13<kill>, 1; CPURegs:%vreg14,%vreg13
	ST %vreg14<kill>, %vreg3, 0; mem:ST4[%key4](tbaa=<badref>) CPURegs:%vreg14,%vreg3
	%vreg4<def> = LD %vreg2, 0; mem:LD4[%next317](tbaa=<badref>) CPURegs:%vreg4,%vreg2
	%vreg5<def> = ADDiu %vreg4, 4; CPURegs:%vreg5,%vreg4
	%vreg15<def> = LD %vreg4, 4; mem:LD4[%next3](tbaa=<badref>) CPURegs:%vreg15,%vreg4
	%vreg16<def> = NEQI %vreg15<kill>, 0; CPURegs:%vreg16,%vreg15
	JC %vreg16<kill>, <BB#1>; CPURegs:%vreg16
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg17<def> = LD %vreg0, 0; mem:LD4[%key1](tbaa=<badref>) CPURegs:%vreg17,%vreg0
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function main.

