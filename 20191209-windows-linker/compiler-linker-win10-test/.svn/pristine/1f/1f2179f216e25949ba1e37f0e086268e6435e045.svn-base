
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%Z.addr] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 0; CPURegs:%vreg1
	ST %vreg1<kill>, %vreg0, 0; mem:ST4[%0] CPURegs:%vreg1,%vreg0
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg2,%vreg1
	ST %vreg2<kill>, <fi#1>, 0; mem:ST4[%p_a] CPURegs:%vreg2
	%vreg3<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg4,%vreg3
	ST %vreg4<kill>, <fi#2>, 0; mem:ST4[%p_b] CPURegs:%vreg4
	%vreg5<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg6,%vreg5
	ST %vreg6, <fi#3>, 0; mem:ST4[%p_z] CPURegs:%vreg6
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	ST %vreg0, <fi#4>, 0; mem:ST4[%f] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg7<def> = LD <fi#4>, 0; mem:LD4[%f] CPURegs:%vreg7
	%vreg8<def> = LTI %vreg7<kill>, 2; CPURegs:%vreg8,%vreg7
	JNC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg12<def> = LD <fi#1>, 0; mem:LD4[%p_a] CPURegs:%vreg12
	%vreg13<def> = ADDiu %vreg12, 4; CPURegs:%vreg13,%vreg12
	ST %vreg13<kill>, <fi#1>, 0; mem:ST4[%p_a] CPURegs:%vreg13
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%1] CPURegs:%vreg14,%vreg12
	%vreg15<def> = LD <fi#2>, 0; mem:LD4[%p_b] CPURegs:%vreg15
	%vreg16<def> = ADDiu %vreg15, 4; CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#2>, 0; mem:ST4[%p_b] CPURegs:%vreg16
	%vreg17<def> = LD %vreg15, 0; mem:LD4[%3] CPURegs:%vreg17,%vreg15
	%vreg18<def> = MUL32 %vreg14<kill>, %vreg17<kill>; CPURegs:%vreg18,%vreg14,%vreg17
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%p_z] CPURegs:%vreg19
	%vreg20<def> = LD %vreg19, 0; mem:LD4[%5] CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg20<kill>, %vreg18<kill>; CPURegs:%vreg21,%vreg20,%vreg18
	ST %vreg21<kill>, %vreg19, 0; mem:ST4[%5] CPURegs:%vreg21,%vreg19
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%f] CPURegs:%vreg22
	%vreg23<def> = ADDiu %vreg22<kill>, 1; CPURegs:%vreg23,%vreg22
	ST %vreg23<kill>, <fi#4>, 0; mem:ST4[%f] CPURegs:%vreg23
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = MovGR %ZERO, 0; CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%Z.addr] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 0; CPURegs:%vreg1
	ST %vreg1<kill>, %vreg0, 0; mem:ST4[%0] CPURegs:%vreg1,%vreg0
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg2,%vreg1
	ST %vreg2<kill>, <fi#1>, 0; mem:ST4[%p_a] CPURegs:%vreg2
	%vreg3<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg4,%vreg3
	ST %vreg4<kill>, <fi#2>, 0; mem:ST4[%p_b] CPURegs:%vreg4
	%vreg5<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg6,%vreg5
	ST %vreg6, <fi#3>, 0; mem:ST4[%p_z] CPURegs:%vreg6
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	ST %vreg0, <fi#4>, 0; mem:ST4[%f] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg7<def> = LD <fi#4>, 0; mem:LD4[%f] CPURegs:%vreg7
	%vreg8<def> = LTI %vreg7<kill>, 2; CPURegs:%vreg8,%vreg7
	JNC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg12<def> = LD <fi#1>, 0; mem:LD4[%p_a] CPURegs:%vreg12
	%vreg13<def> = ADDiu %vreg12, 4; CPURegs:%vreg13,%vreg12
	ST %vreg13<kill>, <fi#1>, 0; mem:ST4[%p_a] CPURegs:%vreg13
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%1] CPURegs:%vreg14,%vreg12
	%vreg15<def> = LD <fi#2>, 0; mem:LD4[%p_b] CPURegs:%vreg15
	%vreg16<def> = ADDiu %vreg15, 4; CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#2>, 0; mem:ST4[%p_b] CPURegs:%vreg16
	%vreg17<def> = LD %vreg15, 0; mem:LD4[%3] CPURegs:%vreg17,%vreg15
	%vreg18<def> = MUL32 %vreg14<kill>, %vreg17<kill>; CPURegs:%vreg18,%vreg14,%vreg17
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%p_z] CPURegs:%vreg19
	%vreg20<def> = LD %vreg19, 0; mem:LD4[%5] CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg20<kill>, %vreg18<kill>; CPURegs:%vreg21,%vreg20,%vreg18
	ST %vreg21<kill>, %vreg19, 0; mem:ST4[%5] CPURegs:%vreg21,%vreg19
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%f] CPURegs:%vreg22
	%vreg23<def> = ADDiu %vreg22<kill>, 1; CPURegs:%vreg23,%vreg22
	ST %vreg23<kill>, <fi#4>, 0; mem:ST4[%f] CPURegs:%vreg23
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = MovGR %ZERO, 0; CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function main.

