	.text
	.file	"./c_standard_lib-master/MATH/TAN.ll"
	.globl	tan
	.align	2
	.type	tan,@function
tan:                                    # @tan
# BB#0:                                 # %entry
{
	addi	GR30, GR30, -112
}
{
	store32	GR31, GR30, 27
	store32	GR29, GR30, 26
}
{
	store32	GR20, GR30, 25
	store32	GR19, GR30, 24
}
{
	store32	GR18, GR30, 23
	store32	GR17, GR30, 22
}
{
	store32	GR16, GR30, 21
	store32	GR5, GR30, 17
}
{
	store32	GR4, GR30, 16
	addi	GR4, GR30, 64
}
{
	call	_Dtest
}
{
	nop
}
{
	nop
}
{
	eqi	 GR2, 0
}
{
	jc	 $BB0_5
}
{
	nop
}
{
	nop
}
# BB#1:                                 # %entry
{
	eqi	 GR2, 1
}
{
	jnc	 $BB0_2
}
{
	nop
}
{
	nop
}
# BB#4:                                 # %sw.bb1
{
	movigh	GR2,%hi(errno)
}
{
	movigl	GR2,%lo(errno)
	movigl	GR3,33
}
{
	movigh	GR3,0
}
{
	store32	GR3, GR2, 0
	movigh	GR2,%hi(_Nan)
}
{
	movigl	GR2,%lo(_Nan)
}
{
	load32	GR3, GR2, 1
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 19
	load32	GR2, GR2, 0
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 18
}
{
	jmp	$BB0_21
}
{
	nop
}
{
	nop
}
$BB0_5:                                 # %sw.bb2
{
	movigl	GR2,0
}
{
	movigh	GR2,0
}
{
	store32	GR2, GR30, 19
}
{
	store32	GR2, GR30, 18
}
{
	jmp	$BB0_21
}
{
	nop
}
{
	nop
}
$BB0_2:                                 # %entry
{
	neqi	 GR2, 2
}
{
	jc	 $BB0_6
}
{
	nop
}
{
	nop
}
# BB#3:                                 # %sw.bb
{
	movigh	GR2,%hi(errno)
}
{
	movigl	GR2,%lo(errno)
	movigl	GR3,33
}
{
	movigh	GR3,0
}
{
	store32	GR3, GR2, 0
	load32	GR2, GR30, 16
	load32	GR3, GR30, 17
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 19
}
{
	store32	GR2, GR30, 18
}
{
	jmp	$BB0_21
}
{
	nop
}
{
	nop
}
$BB0_6:                                 # %sw.default
{
	movigl	GR2,7107
}
{
	movigh	GR2,-15895
}
{
	store32	GR2, GR30, 3
	movigl	GR18,0
}
{
	movigh	GR18,-12288
}
{
	store32	GR18, GR30, 2
}
{
	load32	GR4, GR30, 16
}
{
	nop
}
{
	load32	GR5, GR30, 17
}
{
	nop
}
{
	nop
}
{
	call	__ltdf2
}
{
	nop
}
{
	nop
}
{
	movigl	GR29,0
}
{
	movigh	GR29,0
}
{
	lt	 GR2, GR29
}
{
	jc	 $BB0_8
}
{
	nop
}
{
	nop
}
# BB#7:                                 # %lor.lhs.false
{
	movigl	GR19,7107
}
{
	movigh	GR19,16873
}
{
	store32	GR19, GR30, 3
}
{
	store32	GR18, GR30, 2
}
{
	load32	GR16, GR30, 16
}
{
	nop
}
{
	load32	GR17, GR30, 17
}
{
	nop
}
{
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__ledf2
}
{
	nop
}
{
	nop
}
{
	store32	GR19, GR30, 3
}
{
	store32	GR18, GR30, 2
	movigl	GR3,1
}
{
	movigh	GR3,0
}
{
	lt	 GR2, GR3
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__unorddf2
}
{
	nop
}
{
	nop
}
{
	neq	 GR2, GR29
}
{
	or	GR2, GR2, GR18
}
{
	jc	 $BB0_9
}
{
	nop
}
{
	nop
}
$BB0_8:                                 # %if.then
{
	movigl	GR16,8699
}
{
	movigh	GR16,16409
}
{
	store32	GR16, GR30, 3
	movigl	GR17,11544
}
{
	movigh	GR17,21572
}
{
	store32	GR17, GR30, 2
}
{
	load32	GR4, GR30, 16
}
{
	nop
}
{
	load32	GR5, GR30, 17
}
{
	nop
}
{
	nop
}
{
	call	__divdf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 15
}
{
	store32	GR2, GR30, 14
	addi	GR4, GR30, 56
	movigl	GR5,0
}
{
	movigh	GR5,0
}
{
	call	_Dint
}
{
	nop
}
{
	nop
}
{
	store32	GR16, GR30, 3
}
{
	store32	GR17, GR30, 2
}
{
	load32	GR4, GR30, 14
}
{
	nop
}
{
	load32	GR5, GR30, 15
}
{
	nop
}
{
	nop
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 3
}
{
	store32	GR2, GR30, 2
}
{
	load32	GR4, GR30, 16
}
{
	nop
}
{
	load32	GR5, GR30, 17
}
{
	nop
}
{
	nop
}
{
	call	__subdf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 17
}
{
	store32	GR2, GR30, 16
}
$BB0_9:                                 # %if.end
{
	movigl	GR2,24368
}
{
	movigh	GR2,16356
}
{
	store32	GR2, GR30, 3
	movigl	GR2,-14205
}
{
	movigh	GR2,28105
}
{
	store32	GR2, GR30, 2
}
{
	load32	GR4, GR30, 16
}
{
	nop
}
{
	load32	GR5, GR30, 17
}
{
	nop
}
{
	nop
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	movg2g	GR16,GR2
}
{
	movg2g	GR17,GR3
}
{
	store32	GR29, GR30, 3
}
{
	store32	GR29, GR30, 2
}
{
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__ledf2
}
{
	nop
}
{
	nop
}
{
	store32	GR29, GR30, 3
}
{
	store32	GR29, GR30, 2
	movigl	GR19,1
}
{
	movigh	GR19,0
}
{
	lt	 GR2, GR19
	store32	GR17, GR30, 15
}
{
	store32	GR16, GR30, 14
}
{
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__unorddf2
}
{
	nop
}
{
	nop
}
{
	neq	 GR2, GR29
}
{
	or	GR2, GR2, GR18
}
{
	jc	 $BB0_11
}
{
	nop
}
{
	nop
}
# BB#10:                                # %cond.true
{
	store32	GR19, GR30, 5
	movigl	GR2,0
}
{
	movigh	GR2,16352
}
{
	jmp	$BB0_12
}
{
	nop
}
{
	nop
}
$BB0_11:                                # %cond.false
{
	store32	GR19, GR30, 5
	movigl	GR2,0
}
{
	movigh	GR2,-16416
}
$BB0_12:                                # %cond.end
{
	store32	GR2, GR30, 3
}
{
	store32	GR29, GR30, 2
}
{
	load32	GR4, GR30, 14
}
{
	nop
}
{
	load32	GR5, GR30, 15
}
{
	nop
}
{
	nop
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__fixdfsi
}
{
	nop
}
{
	nop
}
{
	movg2g	GR16,GR2
}
{
	movg2g	GR4,GR16
}
{
	call	__dsp_floatsidf
}
{
	nop
}
{
	nop
}
{
	movg2g	GR17,GR2
}
{
	movg2g	GR18,GR3
	movigl	GR2,8699
}
{
	movigh	GR2,-16391
}
{
	store32	GR2, GR30, 3
}
{
	store32	GR29, GR30, 2
}
{
	movg2g	GR4,GR17
}
{
	movg2g	GR5,GR18
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	movg2g	GR19,GR2
}
{
	movg2g	GR20,GR3
	movigl	GR2,4363
}
{
	movigh	GR2,-16747
}
{
	store32	GR2, GR30, 3
	movigl	GR2,-23002
}
{
	movigh	GR2,17937
}
{
	store32	GR2, GR30, 2
}
{
	movg2g	GR4,GR17
}
{
	movg2g	GR5,GR18
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 7
	store32	GR3, GR30, 6
}
{
	store32	GR20, GR30, 3
}
{
	store32	GR19, GR30, 2
}
{
	store32	GR16, GR30, 11
	store32	GR18, GR30, 15
}
{
	store32	GR17, GR30, 14
	load32	GR4, GR30, 16
}
{
	nop
}
{
	load32	GR5, GR30, 17
}
{
	nop
}
{
	nop
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR30, 6
}                                       # 4-byte Folded Reload
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
	load32	GR4, GR30, 7
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR29, GR30, 3
}
{
	store32	GR29, GR30, 2
}
{
	store32	GR3, GR30, 15
}
{
	store32	GR2, GR30, 14
	movigl	GR2,0
}
{
	movigh	GR2,16368
}
{
	store32	GR2, GR30, 13
}
{
	store32	GR29, GR30, 12
	load32	GR16, GR30, 14
}
{
	nop
}
{
	load32	GR17, GR30, 15
}
{
	nop
}
{
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__gedf2
}
{
	nop
}
{
	nop
}
{
	store32	GR29, GR30, 3
}
{
	store32	GR29, GR30, 2
	movigl	GR18,-1
}
{
	movigh	GR18,-1
}
{
	gt	 GR2, GR18
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	__unorddf2
}
{
	nop
}
{
	nop
}
{
	neq	 GR2, GR29
}
{
	or	GR2, GR2, GR19
	movigh	GR3,%hi(_Rteps)
}
{
	movigl	GR3,%lo(_Rteps)
}
{
	load32	GR16, GR3, 1
	load32	GR17, GR3, 0
}
{
	nop
}
{
	jc	 $BB0_14
}
{
	nop
}
{
	nop
}
# BB#13:                                # %cond.true19
{
	movigl	GR2,0
}
{
	movigh	GR2,-32768
	load32	GR3, GR30, 15
}
{
	nop
}
{
	nop
}
{
	xor	GR19, GR3, GR2
}
{
	jmp	$BB0_15
}
{
	nop
}
{
	nop
}
$BB0_14:                                # %cond.false21
{
	load32	GR19, GR30, 15
}
{
	nop
}
{
	nop
}
$BB0_15:                                # %cond.end22
{
	load32	GR20, GR30, 14
}
{
	nop
}
{
	store32	GR19, GR30, 3
}
{
	store32	GR20, GR30, 2
}
{
	movg2g	GR4,GR17
}
{
	movg2g	GR5,GR16
}
{
	call	__gedf2
}
{
	nop
}
{
	nop
}
{
	store32	GR19, GR30, 3
}
{
	store32	GR20, GR30, 2
	gt	 GR2, GR18
}
{
	movg2g	GR4,GR17
}
{
	movg2g	GR5,GR16
}
{
	call	__unorddf2
}
{
	nop
}
{
	nop
}
{
	neq	 GR2, GR29
}
{
	or	GR2, GR2, GR18
}
{
	jc	 $BB0_17
}
{
	nop
}
{
	nop
}
# BB#16:                                # %if.then26
{
	load32	GR5, GR30, 15
}
{
	nop
}
{
	nop
}
{
	store32	GR5, GR30, 3
}
{
	load32	GR4, GR30, 14
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	movg2g	GR16,GR2
}
{
	movg2g	GR17,GR3
}
{
	store32	GR17, GR30, 3
}
{
	store32	GR16, GR30, 2
	movigh	GR18,%hi(q)
}
{
	movigl	GR18,%lo(q)
}
{
	load32	GR4, GR18, 0
}
{
	nop
}
{
	load32	GR5, GR18, 1
}
{
	nop
}
{
	nop
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR18, 3
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR18, 2
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR17, GR30, 3
}
{
	store32	GR16, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR18, 5
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR18, 4
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR17, GR30, 3
}
{
	store32	GR16, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR18, 7
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR18, 6
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR17, GR30, 3
}
{
	store32	GR16, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 3
}
{
	store32	GR2, GR30, 2
}
{
	store32	GR17, GR30, 9
}
{
	store32	GR16, GR30, 8
	load32	GR4, GR30, 12
}
{
	nop
}
{
	load32	GR5, GR30, 13
}
{
	nop
}
{
	nop
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 13
}
{
	store32	GR2, GR30, 12
	load32	GR16, GR30, 9
}
{
	nop
}
{
	nop
}
{
	store32	GR16, GR30, 3
}
{
	load32	GR17, GR30, 8
}
{
	nop
}
{
	nop
}
{
	store32	GR17, GR30, 2
	movigh	GR18,%hi(p)
}
{
	movigl	GR18,%lo(p)
}
{
	load32	GR4, GR18, 0
}
{
	nop
}
{
	load32	GR5, GR18, 1
}
{
	nop
}
{
	nop
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR18, 3
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR18, 2
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR16, GR30, 3
}
{
	store32	GR17, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR18, 5
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR18, 4
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR16, GR30, 3
}
{
	store32	GR17, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	load32	GR16, GR30, 15
}
{
	nop
}
{
	nop
}
{
	store32	GR16, GR30, 3
}
{
	load32	GR17, GR30, 14
}
{
	nop
}
{
	nop
}
{
	store32	GR17, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	call	__muldf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 3
}
{
	store32	GR2, GR30, 2
}
{
	movg2g	GR4,GR17
}
{
	movg2g	GR5,GR16
}
{
	call	__adddf3
}
{
	nop
}
{
	nop
}
{
	store32	GR3, GR30, 15
}
{
	store32	GR2, GR30, 14
}
$BB0_17:                                # %if.end43
{
	load8	GR2, GR30, 11
	load32	GR3, GR30, 5
}
{
	nop
}
{
	nop
}
{
	and	GR2, GR2, GR3
}
{
	eqi	 GR2, 0
}
{
	jc	 $BB0_19
}
{
	nop
}
{
	nop
}
# BB#18:                                # %cond.true44
{
	load32	GR2, GR30, 13
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 3
}
{
	load32	GR2, GR30, 12
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 2
	movigl	GR4,0
}
{
	movigh	GR4,0
	movigl	GR5,0
}
{
	movigh	GR5,-32768
}
{
	call	__subdf3
}
{
	nop
}
{
	nop
}
{
	load32	GR4, GR30, 15
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 3
}
{
	load32	GR4, GR30, 14
}
{
	nop
}
{
	nop
}
{
	store32	GR4, GR30, 2
}
{
	movg2g	GR4,GR2
}
{
	movg2g	GR5,GR3
}
{
	jmp	$BB0_20
}
{
	nop
}
{
	nop
}
$BB0_19:                                # %cond.false47
{
	load32	GR2, GR30, 13
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 3
}
{
	load32	GR2, GR30, 12
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 2
}
{
	load32	GR4, GR30, 14
}
{
	nop
}
{
	load32	GR5, GR30, 15
}
{
	nop
}
{
	nop
}
$BB0_20:                                # %cond.end49
{
	call	__divdf3
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 18
}
{
	store32	GR3, GR30, 19
}
$BB0_21:                                # %return
{
	load32	GR2, GR30, 18
	load32	GR3, GR30, 19
}
{
	load32	GR16, GR30, 21
	load32	GR17, GR30, 22
}
{
	load32	GR18, GR30, 23
	load32	GR19, GR30, 24
}
{
	load32	GR20, GR30, 25
	load32	GR29, GR30, 26
}
{
	load32	GR31, GR30, 27
	addi	GR30, GR30, 112
}
{
	ret	GR31
}
{
	nop
}
{
	nop
}
$tmp0:
	.size	tan, ($tmp0)-tan

	.type	q,@object               # @q
	.section	.rodata,"a",@progbits
	.align	3
q:
	.8byte	4512808539503622377     # double 4.981943e-07
	.8byte	-4668984435821426623    # double -3.118153e-04
	.8byte	4583054317442703705     # double 2.566383e-02
	.8byte	-4621292793908962859    # double -4.667168e-01
	.size	q, 32

	.type	p,@object               # @p
	.align	3
p:
	.8byte	-4687478966215063772    # double -1.786171e-05
	.8byte	4570043676171676383     # double 3.424888e-03
	.8byte	-4629398369514747648    # double -1.333835e-01
	.size	p, 24


