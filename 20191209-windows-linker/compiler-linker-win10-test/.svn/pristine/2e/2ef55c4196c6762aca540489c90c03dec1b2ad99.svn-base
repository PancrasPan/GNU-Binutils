
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/SINH.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function sinh: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg12, %A1 in %vreg13

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg13<def> = COPY %A1; CPURegs:%vreg13
	%vreg12<def> = COPY %A0; CPURegs:%vreg12
	ST %vreg13, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg13
	ST %vreg12, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg12
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = LEA <fi#1>, 0; CPURegs:%vreg15
	%A0<def> = COPY %vreg15; CPURegs:%vreg15
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %V0; CPURegs:%vreg16
	%vreg17<def> = EQI %vreg16, 0; CPURegs:%vreg17,%vreg16
	JC %vreg17<kill>, <BB#6>; CPURegs:%vreg17
	Jmp <BB#22>
    Successors according to CFG: BB#6(16) BB#22(32)

BB#22: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg14<def> = COPY %vreg16; CPURegs:%vreg14,%vreg16
	%vreg18<def> = EQI %vreg14, 1; CPURegs:%vreg18,%vreg14
	JC %vreg18<kill>, <BB#2>; CPURegs:%vreg18
	Jmp <BB#23>
    Successors according to CFG: BB#2(16) BB#23(16)

BB#23: derived from LLVM BB %entry
    Predecessors according to CFG: BB#22
	%vreg19<def> = NEQI %vreg14, 2; CPURegs:%vreg19,%vreg14
	JC %vreg19<kill>, <BB#7>; CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#23
	%vreg34<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg34
	%vreg35<def,tied1> = MovIGL %vreg34<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovGR %ZERO, 33; CPURegs:%vreg36
	ST %vreg36<kill>, %vreg35<kill>, 0; mem:ST4[@errno] CPURegs:%vreg36,%vreg35
	%vreg37<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg37
	%vreg38<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg38
	ST %vreg38<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg38
	ST %vreg37<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg37
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#22
	%vreg21<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg22,%vreg21
	%vreg23<def> = MovGR %ZERO, 34; CPURegs:%vreg23
	ST %vreg23<kill>, %vreg22<kill>, 0; mem:ST4[@errno] CPURegs:%vreg23,%vreg22
	%vreg24<def> = MovGR %ZERO, 128; CPURegs:%vreg24
	%vreg25<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg25
	%vreg26<def> = AND %vreg25<kill>, %vreg24<kill>; CPURegs:%vreg26,%vreg25,%vreg24
	%vreg27<def> = EQI %vreg26<kill>, 0; CPURegs:%vreg27,%vreg26
	JC %vreg27<kill>, <BB#4>; CPURegs:%vreg27
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#2
	%vreg30<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg30
	%vreg31<def,tied1> = MovIGL %vreg30<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg31,%vreg30
	%vreg32<def> = LD %vreg31, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg32,%vreg31
	%vreg33<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg33
	%vreg1<def> = XORu %vreg32<kill>, %vreg33<kill>; CPURegs:%vreg1,%vreg32,%vreg33
	%vreg0<def> = LD %vreg31, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg0,%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#2
	%vreg28<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg28
	%vreg29<def,tied1> = MovIGL %vreg28<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg29,%vreg28
	%vreg3<def> = LD %vreg29, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg3,%vreg29
	%vreg2<def> = LD %vreg29, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg2,%vreg29
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#4 BB#3
	%vreg4<def> = PHI %vreg2, <BB#4>, %vreg0, <BB#3>; CPURegs:%vreg4,%vreg2,%vreg0
	%vreg5<def> = PHI %vreg3, <BB#4>, %vreg1, <BB#3>; CPURegs:%vreg5,%vreg3,%vreg1
	ST %vreg4, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg4
	ST %vreg5, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg5
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#6: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	ST %vreg20, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg20
	ST %vreg20, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#7: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg39<def> = COPY %SP; CPURegs:%vreg39
	%vreg40<def> = MovGR %ZERO, 0; CPURegs:%vreg40
	ST %vreg40, %vreg39, 12; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg39
	ST %vreg40, %vreg39, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg39
	%vreg41<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg41
	%vreg42<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg42
	%A0<def> = COPY %vreg41; CPURegs:%vreg41
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg43<def> = COPY %V0; CPURegs:%vreg43
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg44<def> = COPY %SP; CPURegs:%vreg44
	ST %vreg40, %vreg44, 12; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg44
	ST %vreg40, %vreg44, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg44
	%vreg45<def> = MovGR %ZERO, -1; CPURegs:%vreg45
	%vreg46<def> = GT %vreg43, %vreg45; CPURegs:%vreg46,%vreg43,%vreg45
	%A0<def> = COPY %vreg41; CPURegs:%vreg41
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg47<def> = COPY %V0; CPURegs:%vreg47
	%vreg48<def> = NEQ %vreg47, %vreg40; CPURegs:%vreg48,%vreg47,%vreg40
	%vreg49<def> = ORu %vreg48<kill>, %vreg46<kill>; CPURegs:%vreg49,%vreg48,%vreg46
	JC %vreg49<kill>, <BB#9>; CPURegs:%vreg49
	Jmp <BB#8>
    Successors according to CFG: BB#8(16) BB#9(16)

BB#8: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg51<def> = COPY %SP; CPURegs:%vreg51
	%vreg52<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg52
	ST %vreg52<kill>, %vreg51, 12; mem:ST4[<unknown>] CPURegs:%vreg52,%vreg51
	%vreg53<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg53
	ST %vreg53<kill>, %vreg51, 8; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg51
	%vreg54<def> = MovGR %ZERO, 0; CPURegs:%vreg54
	%vreg55<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg55
	%A0<def> = COPY %vreg54; CPURegs:%vreg54
	%A1<def> = COPY %vreg55; CPURegs:%vreg55
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %V0; CPURegs:%vreg56
	%vreg57<def> = COPY %V1; CPURegs:%vreg57
	ST %vreg57, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg57
	ST %vreg56, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg56
	%vreg58<def> = MovGR %ZERO, 1; CPURegs:%vreg58
	STH %vreg58<kill>, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg58
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#9: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#7
	STH %vreg40, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg40
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#9 BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg59<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg59
	%vreg60<def,tied1> = MovIGL %vreg59<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg60,%vreg59
	%vreg61<def> = COPY %SP; CPURegs:%vreg61
	%vreg62<def> = LD %vreg60, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg62,%vreg60
	ST %vreg62<kill>, %vreg61, 12; mem:ST4[<unknown>] CPURegs:%vreg62,%vreg61
	%vreg63<def> = LD %vreg60, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg63,%vreg60
	ST %vreg63<kill>, %vreg61, 8; mem:ST4[<unknown>] CPURegs:%vreg63,%vreg61
	%vreg64<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg64
	%vreg65<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg65
	%A0<def> = COPY %vreg64; CPURegs:%vreg64
	%A1<def> = COPY %vreg65; CPURegs:%vreg65
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg66<def> = COPY %V0; CPURegs:%vreg66
	%vreg68<def> = LT %vreg66, %vreg40; CPURegs:%vreg68,%vreg66,%vreg40
	JC %vreg68<kill>, <BB#17>; CPURegs:%vreg68
	Jmp <BB#11>
    Successors according to CFG: BB#17(16) BB#11(16)

BB#11: derived from LLVM BB %if.else9
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg69<def> = COPY %SP; CPURegs:%vreg69
	%vreg70<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg70
	ST %vreg70, %vreg69, 12; mem:ST4[<unknown>] CPURegs:%vreg70,%vreg69
	ST %vreg40, %vreg69, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg69
	%vreg72<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg72
	%vreg73<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg73
	%A0<def> = COPY %vreg72; CPURegs:%vreg72
	%A1<def> = COPY %vreg73; CPURegs:%vreg73
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg74<def> = COPY %V0; CPURegs:%vreg74
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg75<def> = COPY %SP; CPURegs:%vreg75
	ST %vreg70, %vreg75, 12; mem:ST4[<unknown>] CPURegs:%vreg70,%vreg75
	ST %vreg40, %vreg75, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg75
	%vreg77<def> = GT %vreg74, %vreg45; CPURegs:%vreg77,%vreg74,%vreg45
	%A0<def> = COPY %vreg72; CPURegs:%vreg72
	%A1<def> = COPY %vreg73; CPURegs:%vreg73
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg78<def> = COPY %V0; CPURegs:%vreg78
	%vreg79<def> = NEQ %vreg78, %vreg40; CPURegs:%vreg79,%vreg78,%vreg40
	%vreg80<def> = ORu %vreg79<kill>, %vreg77<kill>; CPURegs:%vreg80,%vreg79,%vreg77
	JC %vreg80<kill>, <BB#13>; CPURegs:%vreg80
	Jmp <BB#12>
    Successors according to CFG: BB#12(16) BB#13(16)

BB#12: derived from LLVM BB %if.then12
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg114<def> = COPY %SP; CPURegs:%vreg114
	%vreg115<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg115
	ST %vreg115, %vreg114, 12; mem:ST4[<unknown>] CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg116
	ST %vreg116, %vreg114, 8; mem:ST4[<unknown>] CPURegs:%vreg116,%vreg114
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg115; CPURegs:%vreg115
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg117<def> = COPY %V0; CPURegs:%vreg117
	%vreg118<def> = COPY %V1; CPURegs:%vreg118
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg119<def> = COPY %SP; CPURegs:%vreg119
	ST %vreg118, %vreg119, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg119
	ST %vreg117, %vreg119, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg119
	%vreg120<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg120
	%vreg121<def,tied1> = MovIGL %vreg120<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg121, 0; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg122,%vreg121
	%vreg123<def> = LD %vreg121, 4; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg123,%vreg121
	%A0<def> = COPY %vreg122; CPURegs:%vreg122
	%A1<def> = COPY %vreg123; CPURegs:%vreg123
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg124<def> = COPY %V0; CPURegs:%vreg124
	%vreg125<def> = COPY %V1; CPURegs:%vreg125
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %SP; CPURegs:%vreg126
	%vreg127<def> = LD %vreg121, 12; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg127,%vreg121
	ST %vreg127<kill>, %vreg126, 12; mem:ST4[<unknown>] CPURegs:%vreg127,%vreg126
	%vreg128<def> = LD %vreg121, 8; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg128,%vreg121
	ST %vreg128<kill>, %vreg126, 8; mem:ST4[<unknown>] CPURegs:%vreg128,%vreg126
	%A0<def> = COPY %vreg124; CPURegs:%vreg124
	%A1<def> = COPY %vreg125; CPURegs:%vreg125
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg129<def> = COPY %V0; CPURegs:%vreg129
	%vreg130<def> = COPY %V1; CPURegs:%vreg130
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %SP; CPURegs:%vreg131
	ST %vreg118, %vreg131, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg131
	ST %vreg117, %vreg131, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg131
	%A0<def> = COPY %vreg129; CPURegs:%vreg129
	%A1<def> = COPY %vreg130; CPURegs:%vreg130
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg132<def> = COPY %V0; CPURegs:%vreg132
	%vreg133<def> = COPY %V1; CPURegs:%vreg133
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg134<def> = COPY %SP; CPURegs:%vreg134
	%vreg135<def> = LD %vreg121, 20; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg135,%vreg121
	ST %vreg135<kill>, %vreg134, 12; mem:ST4[<unknown>] CPURegs:%vreg135,%vreg134
	%vreg136<def> = LD %vreg121, 16; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg136,%vreg121
	ST %vreg136<kill>, %vreg134, 8; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg134
	%A0<def> = COPY %vreg132; CPURegs:%vreg132
	%A1<def> = COPY %vreg133; CPURegs:%vreg133
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg137<def> = COPY %V0; CPURegs:%vreg137
	%vreg138<def> = COPY %V1; CPURegs:%vreg138
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg139<def> = COPY %SP; CPURegs:%vreg139
	ST %vreg118, %vreg139, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg139
	ST %vreg117, %vreg139, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg139
	%A0<def> = COPY %vreg137; CPURegs:%vreg137
	%A1<def> = COPY %vreg138; CPURegs:%vreg138
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %V0; CPURegs:%vreg140
	%vreg141<def> = COPY %V1; CPURegs:%vreg141
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg142<def> = COPY %SP; CPURegs:%vreg142
	%vreg143<def> = LD %vreg121, 28; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 3)+4] CPURegs:%vreg143,%vreg121
	ST %vreg143<kill>, %vreg142, 12; mem:ST4[<unknown>] CPURegs:%vreg143,%vreg142
	%vreg144<def> = LD %vreg121, 24; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 3)](align=8) CPURegs:%vreg144,%vreg121
	ST %vreg144<kill>, %vreg142, 8; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg142
	%A0<def> = COPY %vreg140; CPURegs:%vreg140
	%A1<def> = COPY %vreg141; CPURegs:%vreg141
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg145<def> = COPY %V0; CPURegs:%vreg145
	%vreg146<def> = COPY %V1; CPURegs:%vreg146
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg147<def> = COPY %SP; CPURegs:%vreg147
	ST %vreg118, %vreg147, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg147
	ST %vreg117, %vreg147, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg147
	%vreg148<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg148
	%vreg149<def,tied1> = MovIGL %vreg148<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg149,%vreg148
	%vreg150<def> = LD %vreg149, 0; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg150,%vreg149
	%vreg151<def> = LD %vreg149, 4; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg151,%vreg149
	%A0<def> = COPY %vreg150; CPURegs:%vreg150
	%A1<def> = COPY %vreg151; CPURegs:%vreg151
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %V0; CPURegs:%vreg152
	%vreg153<def> = COPY %V1; CPURegs:%vreg153
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %SP; CPURegs:%vreg154
	%vreg155<def> = LD %vreg149, 12; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg155,%vreg149
	ST %vreg155<kill>, %vreg154, 12; mem:ST4[<unknown>] CPURegs:%vreg155,%vreg154
	%vreg156<def> = LD %vreg149, 8; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg156,%vreg149
	ST %vreg156<kill>, %vreg154, 8; mem:ST4[<unknown>] CPURegs:%vreg156,%vreg154
	%A0<def> = COPY %vreg152; CPURegs:%vreg152
	%A1<def> = COPY %vreg153; CPURegs:%vreg153
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg157<def> = COPY %V0; CPURegs:%vreg157
	%vreg158<def> = COPY %V1; CPURegs:%vreg158
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %SP; CPURegs:%vreg159
	ST %vreg118, %vreg159, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg159
	ST %vreg117, %vreg159, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg159
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg160<def> = COPY %V0; CPURegs:%vreg160
	%vreg161<def> = COPY %V1; CPURegs:%vreg161
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg162<def> = COPY %SP; CPURegs:%vreg162
	%vreg163<def> = LD %vreg149, 20; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg163,%vreg149
	ST %vreg163<kill>, %vreg162, 12; mem:ST4[<unknown>] CPURegs:%vreg163,%vreg162
	%vreg164<def> = LD %vreg149, 16; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg164,%vreg149
	ST %vreg164<kill>, %vreg162, 8; mem:ST4[<unknown>] CPURegs:%vreg164,%vreg162
	%A0<def> = COPY %vreg160; CPURegs:%vreg160
	%A1<def> = COPY %vreg161; CPURegs:%vreg161
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg165<def> = COPY %V0; CPURegs:%vreg165
	%vreg166<def> = COPY %V1; CPURegs:%vreg166
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg167<def> = COPY %SP; CPURegs:%vreg167
	ST %vreg118, %vreg167, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg167
	ST %vreg117, %vreg167, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg167
	%A0<def> = COPY %vreg165; CPURegs:%vreg165
	%A1<def> = COPY %vreg166; CPURegs:%vreg166
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg168<def> = COPY %V0; CPURegs:%vreg168
	%vreg169<def> = COPY %V1; CPURegs:%vreg169
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg170<def> = COPY %SP; CPURegs:%vreg170
	%vreg171<def> = LD %vreg149, 28; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)+4] CPURegs:%vreg171,%vreg149
	ST %vreg171<kill>, %vreg170, 12; mem:ST4[<unknown>] CPURegs:%vreg171,%vreg170
	%vreg172<def> = LD %vreg149, 24; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)](align=8) CPURegs:%vreg172,%vreg149
	ST %vreg172<kill>, %vreg170, 8; mem:ST4[<unknown>] CPURegs:%vreg172,%vreg170
	%A0<def> = COPY %vreg168; CPURegs:%vreg168
	%A1<def> = COPY %vreg169; CPURegs:%vreg169
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg173<def> = COPY %V0; CPURegs:%vreg173
	%vreg174<def> = COPY %V1; CPURegs:%vreg174
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg175<def> = COPY %SP; CPURegs:%vreg175
	ST %vreg118, %vreg175, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg175
	ST %vreg117, %vreg175, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg175
	ST %vreg118, <fi#3>, 4; mem:ST4[%y+4] CPURegs:%vreg118
	ST %vreg117, <fi#3>, 0; mem:ST4[%y](align=8) CPURegs:%vreg117
	%vreg176<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg176
	%vreg177<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg177
	%A0<def> = COPY %vreg176; CPURegs:%vreg176
	%A1<def> = COPY %vreg177; CPURegs:%vreg177
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg178<def> = COPY %V0; CPURegs:%vreg178
	%vreg179<def> = COPY %V1; CPURegs:%vreg179
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg180<def> = COPY %SP; CPURegs:%vreg180
	ST %vreg146, %vreg180, 12; mem:ST4[<unknown>] CPURegs:%vreg146,%vreg180
	ST %vreg145, %vreg180, 8; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg180
	%A0<def> = COPY %vreg178; CPURegs:%vreg178
	%A1<def> = COPY %vreg179; CPURegs:%vreg179
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg181<def> = COPY %V0; CPURegs:%vreg181
	%vreg182<def> = COPY %V1; CPURegs:%vreg182
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg183<def> = COPY %SP; CPURegs:%vreg183
	ST %vreg174, %vreg183, 12; mem:ST4[<unknown>] CPURegs:%vreg174,%vreg183
	ST %vreg173, %vreg183, 8; mem:ST4[<unknown>] CPURegs:%vreg173,%vreg183
	%A0<def> = COPY %vreg181; CPURegs:%vreg181
	%A1<def> = COPY %vreg182; CPURegs:%vreg182
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg184<def> = COPY %V0; CPURegs:%vreg184
	%vreg185<def> = COPY %V1; CPURegs:%vreg185
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg186<def> = COPY %SP; CPURegs:%vreg186
	ST %vreg185, %vreg186, 12; mem:ST4[<unknown>] CPURegs:%vreg185,%vreg186
	ST %vreg184, %vreg186, 8; mem:ST4[<unknown>] CPURegs:%vreg184,%vreg186
	%A0<def> = COPY %vreg176; CPURegs:%vreg176
	%A1<def> = COPY %vreg177; CPURegs:%vreg177
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg187<def> = COPY %V0; CPURegs:%vreg187
	%vreg188<def> = COPY %V1; CPURegs:%vreg188
	ST %vreg188, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg188
	ST %vreg187, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg187
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#13: derived from LLVM BB %if.else27
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg81<def> = LEA <fi#1>, 0; CPURegs:%vreg81
	%vreg82<def> = MovGR %ZERO, -1; CPURegs:%vreg82
	%A0<def> = COPY %vreg81; CPURegs:%vreg81
	%A1<def> = COPY %vreg82; CPURegs:%vreg82
	CALL <ga:@_Exp>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg83<def> = COPY %V0; CPURegs:%vreg83
	%vreg85<def> = LT %vreg83, %vreg40; CPURegs:%vreg85,%vreg83,%vreg40
	JC %vreg85<kill>, <BB#15>; CPURegs:%vreg85
	Jmp <BB#14>
    Successors according to CFG: BB#14(16) BB#15(16)

BB#14: derived from LLVM BB %if.then32
    Predecessors according to CFG: BB#13
	%vreg111<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg111
	%vreg112<def,tied1> = MovIGL %vreg111<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg112,%vreg111
	%vreg113<def> = MovGR %ZERO, 34; CPURegs:%vreg113
	ST %vreg113<kill>, %vreg112<kill>, 0; mem:ST4[@errno] CPURegs:%vreg113,%vreg112
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#15: derived from LLVM BB %if.else33
    Predecessors according to CFG: BB#13
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = MovIGH %ZERO, <ga:@_Xbig>[TF=3]; CPURegs:%vreg86
	%vreg87<def,tied1> = MovIGL %vreg86<tied0>, <ga:@_Xbig>[TF=4]; CPURegs:%vreg87,%vreg86
	%vreg88<def> = COPY %SP; CPURegs:%vreg88
	%vreg89<def> = LD %vreg87, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Xbig, i32 0, i32 0)+4] CPURegs:%vreg89,%vreg87
	ST %vreg89, %vreg88, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg88
	%vreg90<def> = LD %vreg87, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Xbig, i32 0, i32 0)](align=8) CPURegs:%vreg90,%vreg87
	ST %vreg90, %vreg88, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg88
	%vreg91<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg91
	%vreg92<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg92
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %V0; CPURegs:%vreg93
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg94<def> = COPY %SP; CPURegs:%vreg94
	ST %vreg89, %vreg94, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg94
	ST %vreg90, %vreg94, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg94
	%vreg96<def> = GT %vreg93, %vreg82; CPURegs:%vreg96,%vreg93,%vreg82
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg97<def> = COPY %V0; CPURegs:%vreg97
	%vreg99<def> = NEQ %vreg97, %vreg40; CPURegs:%vreg99,%vreg97,%vreg40
	%vreg100<def> = ORu %vreg99<kill>, %vreg96<kill>; CPURegs:%vreg100,%vreg99,%vreg96
	JC %vreg100<kill>, <BB#17>; CPURegs:%vreg100
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#17(16)

BB#16: derived from LLVM BB %if.then36
    Predecessors according to CFG: BB#15
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg101<def> = COPY %SP; CPURegs:%vreg101
	%vreg102<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg102
	ST %vreg102, %vreg101, 12; mem:ST4[<unknown>] CPURegs:%vreg102,%vreg101
	%vreg103<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg103
	ST %vreg103, %vreg101, 8; mem:ST4[<unknown>] CPURegs:%vreg103,%vreg101
	%vreg104<def> = MovGR %ZERO, 0; CPURegs:%vreg104
	%vreg105<def> = MovGR %ZERO, -1076887552; CPURegs:%vreg105
	%A0<def> = COPY %vreg104; CPURegs:%vreg104
	%A1<def> = COPY %vreg105; CPURegs:%vreg105
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	ST %vreg107, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg107,%vreg108
	ST %vreg106, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg106,%vreg108
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg102; CPURegs:%vreg102
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg109<def> = COPY %V0; CPURegs:%vreg109
	%vreg110<def> = COPY %V1; CPURegs:%vreg110
	ST %vreg110, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg110
	ST %vreg109, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg109
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %if.end42
    Predecessors according to CFG: BB#10 BB#15 BB#16 BB#14 BB#12
	%vreg189<def> = LDHS <fi#2>, 0; mem:LD2[%neg](align=4) CPURegs:%vreg189
	%vreg190<def> = EQI %vreg189<kill>, 0; CPURegs:%vreg190,%vreg189
	JC %vreg190<kill>, <BB#19>; CPURegs:%vreg190
	Jmp <BB#18>
    Successors according to CFG: BB#18(20) BB#19(12)

BB#18: derived from LLVM BB %cond.true45
    Predecessors according to CFG: BB#17
	%vreg191<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg191
	%vreg192<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg192
	%vreg7<def> = XORu %vreg192<kill>, %vreg191<kill>; CPURegs:%vreg7,%vreg192,%vreg191
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg6
	Jmp <BB#20>
    Successors according to CFG: BB#20

BB#19: derived from LLVM BB %cond.false47
    Predecessors according to CFG: BB#17
	%vreg9<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg9
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg8
    Successors according to CFG: BB#20

BB#20: derived from LLVM BB %cond.end48
    Predecessors according to CFG: BB#19 BB#18
	%vreg10<def> = PHI %vreg8, <BB#19>, %vreg6, <BB#18>; CPURegs:%vreg10,%vreg8,%vreg6
	%vreg11<def> = PHI %vreg9, <BB#19>, %vreg7, <BB#18>; CPURegs:%vreg11,%vreg9,%vreg7
	ST %vreg10, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg10
	ST %vreg11, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg11
    Successors according to CFG: BB#21

BB#21: derived from LLVM BB %return
    Predecessors according to CFG: BB#6 BB#5 BB#1 BB#20
	%vreg193<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg193
	%vreg194<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg194
	%V0<def> = COPY %vreg193; CPURegs:%vreg193
	%V1<def> = COPY %vreg194; CPURegs:%vreg194
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function sinh.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function sinh: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg12, %A1 in %vreg13

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg13<def> = COPY %A1; CPURegs:%vreg13
	%vreg12<def> = COPY %A0; CPURegs:%vreg12
	ST %vreg13, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg13
	ST %vreg12, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg12
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = LEA <fi#1>, 0; CPURegs:%vreg15
	%A0<def> = COPY %vreg15; CPURegs:%vreg15
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %V0; CPURegs:%vreg16
	%vreg17<def> = EQI %vreg16, 0; CPURegs:%vreg17,%vreg16
	JC %vreg17<kill>, <BB#6>; CPURegs:%vreg17
	Jmp <BB#22>
    Successors according to CFG: BB#6(16) BB#22(32)

BB#22: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg14<def> = COPY %vreg16; CPURegs:%vreg14,%vreg16
	%vreg18<def> = EQI %vreg14, 1; CPURegs:%vreg18,%vreg14
	JC %vreg18<kill>, <BB#2>; CPURegs:%vreg18
	Jmp <BB#23>
    Successors according to CFG: BB#2(16) BB#23(16)

BB#23: derived from LLVM BB %entry
    Predecessors according to CFG: BB#22
	%vreg19<def> = NEQI %vreg14, 2; CPURegs:%vreg19,%vreg14
	JC %vreg19<kill>, <BB#7>; CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#23
	%vreg34<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg34
	%vreg35<def,tied1> = MovIGL %vreg34<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovGR %ZERO, 33; CPURegs:%vreg36
	ST %vreg36<kill>, %vreg35<kill>, 0; mem:ST4[@errno] CPURegs:%vreg36,%vreg35
	%vreg37<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg37
	%vreg38<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg38
	ST %vreg38<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg38
	ST %vreg37<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg37
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#22
	%vreg21<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg22,%vreg21
	%vreg23<def> = MovGR %ZERO, 34; CPURegs:%vreg23
	ST %vreg23<kill>, %vreg22<kill>, 0; mem:ST4[@errno] CPURegs:%vreg23,%vreg22
	%vreg24<def> = MovGR %ZERO, 128; CPURegs:%vreg24
	%vreg25<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg25
	%vreg26<def> = AND %vreg25<kill>, %vreg24<kill>; CPURegs:%vreg26,%vreg25,%vreg24
	%vreg27<def> = EQI %vreg26<kill>, 0; CPURegs:%vreg27,%vreg26
	JC %vreg27<kill>, <BB#4>; CPURegs:%vreg27
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#2
	%vreg30<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg30
	%vreg31<def,tied1> = MovIGL %vreg30<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg31,%vreg30
	%vreg32<def> = LD %vreg31, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg32,%vreg31
	%vreg33<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg33
	%vreg1<def> = XORu %vreg32<kill>, %vreg33<kill>; CPURegs:%vreg1,%vreg32,%vreg33
	%vreg0<def> = LD %vreg31, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg0,%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#2
	%vreg28<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg28
	%vreg29<def,tied1> = MovIGL %vreg28<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg29,%vreg28
	%vreg3<def> = LD %vreg29, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg3,%vreg29
	%vreg2<def> = LD %vreg29, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg2,%vreg29
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#4 BB#3
	%vreg4<def> = PHI %vreg2, <BB#4>, %vreg0, <BB#3>; CPURegs:%vreg4,%vreg2,%vreg0
	%vreg5<def> = PHI %vreg3, <BB#4>, %vreg1, <BB#3>; CPURegs:%vreg5,%vreg3,%vreg1
	ST %vreg4, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg4
	ST %vreg5, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg5
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#6: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	ST %vreg20, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg20
	ST %vreg20, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#21>
    Successors according to CFG: BB#21

BB#7: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#23
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg39<def> = COPY %SP; CPURegs:%vreg39
	%vreg40<def> = MovGR %ZERO, 0; CPURegs:%vreg40
	ST %vreg40, %vreg39, 12; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg39
	ST %vreg40, %vreg39, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg39
	%vreg41<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg41
	%vreg42<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg42
	%A0<def> = COPY %vreg41; CPURegs:%vreg41
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg43<def> = COPY %V0; CPURegs:%vreg43
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg44<def> = COPY %SP; CPURegs:%vreg44
	ST %vreg40, %vreg44, 12; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg44
	ST %vreg40, %vreg44, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg44
	%vreg45<def> = MovGR %ZERO, -1; CPURegs:%vreg45
	%vreg46<def> = GT %vreg43, %vreg45; CPURegs:%vreg46,%vreg43,%vreg45
	%A0<def> = COPY %vreg41; CPURegs:%vreg41
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg47<def> = COPY %V0; CPURegs:%vreg47
	%vreg48<def> = NEQ %vreg47, %vreg40; CPURegs:%vreg48,%vreg47,%vreg40
	%vreg49<def> = ORu %vreg48<kill>, %vreg46<kill>; CPURegs:%vreg49,%vreg48,%vreg46
	JC %vreg49<kill>, <BB#9>; CPURegs:%vreg49
	Jmp <BB#8>
    Successors according to CFG: BB#8(16) BB#9(16)

BB#8: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg51<def> = COPY %SP; CPURegs:%vreg51
	%vreg52<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg52
	ST %vreg52<kill>, %vreg51, 12; mem:ST4[<unknown>] CPURegs:%vreg52,%vreg51
	%vreg53<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg53
	ST %vreg53<kill>, %vreg51, 8; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg51
	%vreg54<def> = MovGR %ZERO, 0; CPURegs:%vreg54
	%vreg55<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg55
	%A0<def> = COPY %vreg54; CPURegs:%vreg54
	%A1<def> = COPY %vreg55; CPURegs:%vreg55
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %V0; CPURegs:%vreg56
	%vreg57<def> = COPY %V1; CPURegs:%vreg57
	ST %vreg57, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg57
	ST %vreg56, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg56
	%vreg58<def> = MovGR %ZERO, 1; CPURegs:%vreg58
	STH %vreg58<kill>, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg58
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#9: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#7
	STH %vreg40, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg40
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#9 BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg59<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg59
	%vreg60<def,tied1> = MovIGL %vreg59<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg60,%vreg59
	%vreg61<def> = COPY %SP; CPURegs:%vreg61
	%vreg62<def> = LD %vreg60, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg62,%vreg60
	ST %vreg62<kill>, %vreg61, 12; mem:ST4[<unknown>] CPURegs:%vreg62,%vreg61
	%vreg63<def> = LD %vreg60, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg63,%vreg60
	ST %vreg63<kill>, %vreg61, 8; mem:ST4[<unknown>] CPURegs:%vreg63,%vreg61
	%vreg64<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg64
	%vreg65<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg65
	%A0<def> = COPY %vreg64; CPURegs:%vreg64
	%A1<def> = COPY %vreg65; CPURegs:%vreg65
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg66<def> = COPY %V0; CPURegs:%vreg66
	%vreg68<def> = LT %vreg66, %vreg40; CPURegs:%vreg68,%vreg66,%vreg40
	JC %vreg68<kill>, <BB#17>; CPURegs:%vreg68
	Jmp <BB#11>
    Successors according to CFG: BB#17(16) BB#11(16)

BB#11: derived from LLVM BB %if.else9
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg69<def> = COPY %SP; CPURegs:%vreg69
	%vreg70<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg70
	ST %vreg70, %vreg69, 12; mem:ST4[<unknown>] CPURegs:%vreg70,%vreg69
	ST %vreg40, %vreg69, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg69
	%vreg72<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg72
	%vreg73<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg73
	%A0<def> = COPY %vreg72; CPURegs:%vreg72
	%A1<def> = COPY %vreg73; CPURegs:%vreg73
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg74<def> = COPY %V0; CPURegs:%vreg74
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg75<def> = COPY %SP; CPURegs:%vreg75
	ST %vreg70, %vreg75, 12; mem:ST4[<unknown>] CPURegs:%vreg70,%vreg75
	ST %vreg40, %vreg75, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg75
	%vreg77<def> = GT %vreg74, %vreg45; CPURegs:%vreg77,%vreg74,%vreg45
	%A0<def> = COPY %vreg72; CPURegs:%vreg72
	%A1<def> = COPY %vreg73; CPURegs:%vreg73
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg78<def> = COPY %V0; CPURegs:%vreg78
	%vreg79<def> = NEQ %vreg78, %vreg40; CPURegs:%vreg79,%vreg78,%vreg40
	%vreg80<def> = ORu %vreg79<kill>, %vreg77<kill>; CPURegs:%vreg80,%vreg79,%vreg77
	JC %vreg80<kill>, <BB#13>; CPURegs:%vreg80
	Jmp <BB#12>
    Successors according to CFG: BB#12(16) BB#13(16)

BB#12: derived from LLVM BB %if.then12
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg114<def> = COPY %SP; CPURegs:%vreg114
	%vreg115<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg115
	ST %vreg115, %vreg114, 12; mem:ST4[<unknown>] CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg116
	ST %vreg116, %vreg114, 8; mem:ST4[<unknown>] CPURegs:%vreg116,%vreg114
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg115; CPURegs:%vreg115
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg117<def> = COPY %V0; CPURegs:%vreg117
	%vreg118<def> = COPY %V1; CPURegs:%vreg118
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg119<def> = COPY %SP; CPURegs:%vreg119
	ST %vreg118, %vreg119, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg119
	ST %vreg117, %vreg119, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg119
	%vreg120<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg120
	%vreg121<def,tied1> = MovIGL %vreg120<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg121, 0; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg122,%vreg121
	%vreg123<def> = LD %vreg121, 4; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg123,%vreg121
	%A0<def> = COPY %vreg122; CPURegs:%vreg122
	%A1<def> = COPY %vreg123; CPURegs:%vreg123
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg124<def> = COPY %V0; CPURegs:%vreg124
	%vreg125<def> = COPY %V1; CPURegs:%vreg125
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %SP; CPURegs:%vreg126
	%vreg127<def> = LD %vreg121, 12; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg127,%vreg121
	ST %vreg127<kill>, %vreg126, 12; mem:ST4[<unknown>] CPURegs:%vreg127,%vreg126
	%vreg128<def> = LD %vreg121, 8; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg128,%vreg121
	ST %vreg128<kill>, %vreg126, 8; mem:ST4[<unknown>] CPURegs:%vreg128,%vreg126
	%A0<def> = COPY %vreg124; CPURegs:%vreg124
	%A1<def> = COPY %vreg125; CPURegs:%vreg125
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg129<def> = COPY %V0; CPURegs:%vreg129
	%vreg130<def> = COPY %V1; CPURegs:%vreg130
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %SP; CPURegs:%vreg131
	ST %vreg118, %vreg131, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg131
	ST %vreg117, %vreg131, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg131
	%A0<def> = COPY %vreg129; CPURegs:%vreg129
	%A1<def> = COPY %vreg130; CPURegs:%vreg130
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg132<def> = COPY %V0; CPURegs:%vreg132
	%vreg133<def> = COPY %V1; CPURegs:%vreg133
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg134<def> = COPY %SP; CPURegs:%vreg134
	%vreg135<def> = LD %vreg121, 20; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg135,%vreg121
	ST %vreg135<kill>, %vreg134, 12; mem:ST4[<unknown>] CPURegs:%vreg135,%vreg134
	%vreg136<def> = LD %vreg121, 16; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg136,%vreg121
	ST %vreg136<kill>, %vreg134, 8; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg134
	%A0<def> = COPY %vreg132; CPURegs:%vreg132
	%A1<def> = COPY %vreg133; CPURegs:%vreg133
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg137<def> = COPY %V0; CPURegs:%vreg137
	%vreg138<def> = COPY %V1; CPURegs:%vreg138
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg139<def> = COPY %SP; CPURegs:%vreg139
	ST %vreg118, %vreg139, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg139
	ST %vreg117, %vreg139, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg139
	%A0<def> = COPY %vreg137; CPURegs:%vreg137
	%A1<def> = COPY %vreg138; CPURegs:%vreg138
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %V0; CPURegs:%vreg140
	%vreg141<def> = COPY %V1; CPURegs:%vreg141
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg142<def> = COPY %SP; CPURegs:%vreg142
	%vreg143<def> = LD %vreg121, 28; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 3)+4] CPURegs:%vreg143,%vreg121
	ST %vreg143<kill>, %vreg142, 12; mem:ST4[<unknown>] CPURegs:%vreg143,%vreg142
	%vreg144<def> = LD %vreg121, 24; mem:LD4[getelementptr inbounds ([4 x double]* @p, i32 0, i32 3)](align=8) CPURegs:%vreg144,%vreg121
	ST %vreg144<kill>, %vreg142, 8; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg142
	%A0<def> = COPY %vreg140; CPURegs:%vreg140
	%A1<def> = COPY %vreg141; CPURegs:%vreg141
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg145<def> = COPY %V0; CPURegs:%vreg145
	%vreg146<def> = COPY %V1; CPURegs:%vreg146
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg147<def> = COPY %SP; CPURegs:%vreg147
	ST %vreg118, %vreg147, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg147
	ST %vreg117, %vreg147, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg147
	%vreg148<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg148
	%vreg149<def,tied1> = MovIGL %vreg148<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg149,%vreg148
	%vreg150<def> = LD %vreg149, 0; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg150,%vreg149
	%vreg151<def> = LD %vreg149, 4; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg151,%vreg149
	%A0<def> = COPY %vreg150; CPURegs:%vreg150
	%A1<def> = COPY %vreg151; CPURegs:%vreg151
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %V0; CPURegs:%vreg152
	%vreg153<def> = COPY %V1; CPURegs:%vreg153
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %SP; CPURegs:%vreg154
	%vreg155<def> = LD %vreg149, 12; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg155,%vreg149
	ST %vreg155<kill>, %vreg154, 12; mem:ST4[<unknown>] CPURegs:%vreg155,%vreg154
	%vreg156<def> = LD %vreg149, 8; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg156,%vreg149
	ST %vreg156<kill>, %vreg154, 8; mem:ST4[<unknown>] CPURegs:%vreg156,%vreg154
	%A0<def> = COPY %vreg152; CPURegs:%vreg152
	%A1<def> = COPY %vreg153; CPURegs:%vreg153
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg157<def> = COPY %V0; CPURegs:%vreg157
	%vreg158<def> = COPY %V1; CPURegs:%vreg158
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %SP; CPURegs:%vreg159
	ST %vreg118, %vreg159, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg159
	ST %vreg117, %vreg159, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg159
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg160<def> = COPY %V0; CPURegs:%vreg160
	%vreg161<def> = COPY %V1; CPURegs:%vreg161
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg162<def> = COPY %SP; CPURegs:%vreg162
	%vreg163<def> = LD %vreg149, 20; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg163,%vreg149
	ST %vreg163<kill>, %vreg162, 12; mem:ST4[<unknown>] CPURegs:%vreg163,%vreg162
	%vreg164<def> = LD %vreg149, 16; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg164,%vreg149
	ST %vreg164<kill>, %vreg162, 8; mem:ST4[<unknown>] CPURegs:%vreg164,%vreg162
	%A0<def> = COPY %vreg160; CPURegs:%vreg160
	%A1<def> = COPY %vreg161; CPURegs:%vreg161
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg165<def> = COPY %V0; CPURegs:%vreg165
	%vreg166<def> = COPY %V1; CPURegs:%vreg166
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg167<def> = COPY %SP; CPURegs:%vreg167
	ST %vreg118, %vreg167, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg167
	ST %vreg117, %vreg167, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg167
	%A0<def> = COPY %vreg165; CPURegs:%vreg165
	%A1<def> = COPY %vreg166; CPURegs:%vreg166
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg168<def> = COPY %V0; CPURegs:%vreg168
	%vreg169<def> = COPY %V1; CPURegs:%vreg169
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg170<def> = COPY %SP; CPURegs:%vreg170
	%vreg171<def> = LD %vreg149, 28; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)+4] CPURegs:%vreg171,%vreg149
	ST %vreg171<kill>, %vreg170, 12; mem:ST4[<unknown>] CPURegs:%vreg171,%vreg170
	%vreg172<def> = LD %vreg149, 24; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)](align=8) CPURegs:%vreg172,%vreg149
	ST %vreg172<kill>, %vreg170, 8; mem:ST4[<unknown>] CPURegs:%vreg172,%vreg170
	%A0<def> = COPY %vreg168; CPURegs:%vreg168
	%A1<def> = COPY %vreg169; CPURegs:%vreg169
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg173<def> = COPY %V0; CPURegs:%vreg173
	%vreg174<def> = COPY %V1; CPURegs:%vreg174
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg175<def> = COPY %SP; CPURegs:%vreg175
	ST %vreg118, %vreg175, 12; mem:ST4[<unknown>] CPURegs:%vreg118,%vreg175
	ST %vreg117, %vreg175, 8; mem:ST4[<unknown>] CPURegs:%vreg117,%vreg175
	ST %vreg118, <fi#3>, 4; mem:ST4[%y+4] CPURegs:%vreg118
	ST %vreg117, <fi#3>, 0; mem:ST4[%y](align=8) CPURegs:%vreg117
	%vreg176<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg176
	%vreg177<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg177
	%A0<def> = COPY %vreg176; CPURegs:%vreg176
	%A1<def> = COPY %vreg177; CPURegs:%vreg177
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg178<def> = COPY %V0; CPURegs:%vreg178
	%vreg179<def> = COPY %V1; CPURegs:%vreg179
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg180<def> = COPY %SP; CPURegs:%vreg180
	ST %vreg146, %vreg180, 12; mem:ST4[<unknown>] CPURegs:%vreg146,%vreg180
	ST %vreg145, %vreg180, 8; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg180
	%A0<def> = COPY %vreg178; CPURegs:%vreg178
	%A1<def> = COPY %vreg179; CPURegs:%vreg179
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg181<def> = COPY %V0; CPURegs:%vreg181
	%vreg182<def> = COPY %V1; CPURegs:%vreg182
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg183<def> = COPY %SP; CPURegs:%vreg183
	ST %vreg174, %vreg183, 12; mem:ST4[<unknown>] CPURegs:%vreg174,%vreg183
	ST %vreg173, %vreg183, 8; mem:ST4[<unknown>] CPURegs:%vreg173,%vreg183
	%A0<def> = COPY %vreg181; CPURegs:%vreg181
	%A1<def> = COPY %vreg182; CPURegs:%vreg182
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg184<def> = COPY %V0; CPURegs:%vreg184
	%vreg185<def> = COPY %V1; CPURegs:%vreg185
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg186<def> = COPY %SP; CPURegs:%vreg186
	ST %vreg185, %vreg186, 12; mem:ST4[<unknown>] CPURegs:%vreg185,%vreg186
	ST %vreg184, %vreg186, 8; mem:ST4[<unknown>] CPURegs:%vreg184,%vreg186
	%A0<def> = COPY %vreg176; CPURegs:%vreg176
	%A1<def> = COPY %vreg177; CPURegs:%vreg177
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg187<def> = COPY %V0; CPURegs:%vreg187
	%vreg188<def> = COPY %V1; CPURegs:%vreg188
	ST %vreg188, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg188
	ST %vreg187, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg187
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#13: derived from LLVM BB %if.else27
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg81<def> = LEA <fi#1>, 0; CPURegs:%vreg81
	%vreg82<def> = MovGR %ZERO, -1; CPURegs:%vreg82
	%A0<def> = COPY %vreg81; CPURegs:%vreg81
	%A1<def> = COPY %vreg82; CPURegs:%vreg82
	CALL <ga:@_Exp>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg83<def> = COPY %V0; CPURegs:%vreg83
	%vreg85<def> = LT %vreg83, %vreg40; CPURegs:%vreg85,%vreg83,%vreg40
	JC %vreg85<kill>, <BB#15>; CPURegs:%vreg85
	Jmp <BB#14>
    Successors according to CFG: BB#14(16) BB#15(16)

BB#14: derived from LLVM BB %if.then32
    Predecessors according to CFG: BB#13
	%vreg111<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg111
	%vreg112<def,tied1> = MovIGL %vreg111<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg112,%vreg111
	%vreg113<def> = MovGR %ZERO, 34; CPURegs:%vreg113
	ST %vreg113<kill>, %vreg112<kill>, 0; mem:ST4[@errno] CPURegs:%vreg113,%vreg112
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#15: derived from LLVM BB %if.else33
    Predecessors according to CFG: BB#13
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = MovIGH %ZERO, <ga:@_Xbig>[TF=3]; CPURegs:%vreg86
	%vreg87<def,tied1> = MovIGL %vreg86<tied0>, <ga:@_Xbig>[TF=4]; CPURegs:%vreg87,%vreg86
	%vreg88<def> = COPY %SP; CPURegs:%vreg88
	%vreg89<def> = LD %vreg87, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Xbig, i32 0, i32 0)+4] CPURegs:%vreg89,%vreg87
	ST %vreg89, %vreg88, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg88
	%vreg90<def> = LD %vreg87, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Xbig, i32 0, i32 0)](align=8) CPURegs:%vreg90,%vreg87
	ST %vreg90, %vreg88, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg88
	%vreg91<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg91
	%vreg92<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg92
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %V0; CPURegs:%vreg93
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg94<def> = COPY %SP; CPURegs:%vreg94
	ST %vreg89, %vreg94, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg94
	ST %vreg90, %vreg94, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg94
	%vreg96<def> = GT %vreg93, %vreg82; CPURegs:%vreg96,%vreg93,%vreg82
	%A0<def> = COPY %vreg91; CPURegs:%vreg91
	%A1<def> = COPY %vreg92; CPURegs:%vreg92
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg97<def> = COPY %V0; CPURegs:%vreg97
	%vreg99<def> = NEQ %vreg97, %vreg40; CPURegs:%vreg99,%vreg97,%vreg40
	%vreg100<def> = ORu %vreg99<kill>, %vreg96<kill>; CPURegs:%vreg100,%vreg99,%vreg96
	JC %vreg100<kill>, <BB#17>; CPURegs:%vreg100
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#17(16)

BB#16: derived from LLVM BB %if.then36
    Predecessors according to CFG: BB#15
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg101<def> = COPY %SP; CPURegs:%vreg101
	%vreg102<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg102
	ST %vreg102, %vreg101, 12; mem:ST4[<unknown>] CPURegs:%vreg102,%vreg101
	%vreg103<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg103
	ST %vreg103, %vreg101, 8; mem:ST4[<unknown>] CPURegs:%vreg103,%vreg101
	%vreg104<def> = MovGR %ZERO, 0; CPURegs:%vreg104
	%vreg105<def> = MovGR %ZERO, -1076887552; CPURegs:%vreg105
	%A0<def> = COPY %vreg104; CPURegs:%vreg104
	%A1<def> = COPY %vreg105; CPURegs:%vreg105
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	ST %vreg107, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg107,%vreg108
	ST %vreg106, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg106,%vreg108
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg102; CPURegs:%vreg102
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg109<def> = COPY %V0; CPURegs:%vreg109
	%vreg110<def> = COPY %V1; CPURegs:%vreg110
	ST %vreg110, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg110
	ST %vreg109, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg109
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %if.end42
    Predecessors according to CFG: BB#10 BB#15 BB#16 BB#14 BB#12
	%vreg189<def> = LDHS <fi#2>, 0; mem:LD2[%neg](align=4) CPURegs:%vreg189
	%vreg190<def> = EQI %vreg189<kill>, 0; CPURegs:%vreg190,%vreg189
	JC %vreg190<kill>, <BB#19>; CPURegs:%vreg190
	Jmp <BB#18>
    Successors according to CFG: BB#18(20) BB#19(12)

BB#18: derived from LLVM BB %cond.true45
    Predecessors according to CFG: BB#17
	%vreg191<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg191
	%vreg192<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg192
	%vreg7<def> = XORu %vreg192<kill>, %vreg191<kill>; CPURegs:%vreg7,%vreg192,%vreg191
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg6
	Jmp <BB#20>
    Successors according to CFG: BB#20

BB#19: derived from LLVM BB %cond.false47
    Predecessors according to CFG: BB#17
	%vreg9<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg9
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg8
    Successors according to CFG: BB#20

BB#20: derived from LLVM BB %cond.end48
    Predecessors according to CFG: BB#19 BB#18
	%vreg10<def> = PHI %vreg8, <BB#19>, %vreg6, <BB#18>; CPURegs:%vreg10,%vreg8,%vreg6
	%vreg11<def> = PHI %vreg9, <BB#19>, %vreg7, <BB#18>; CPURegs:%vreg11,%vreg9,%vreg7
	ST %vreg10, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg10
	ST %vreg11, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg11
    Successors according to CFG: BB#21

BB#21: derived from LLVM BB %return
    Predecessors according to CFG: BB#6 BB#5 BB#1 BB#20
	%vreg193<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg193
	%vreg194<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg194
	%V0<def> = COPY %vreg193; CPURegs:%vreg193
	%V1<def> = COPY %vreg194; CPURegs:%vreg194
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function sinh.

