
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name division.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/division.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/division.ll -x c ./testcase_8slots/division.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function integer_div: SSA
Function Live Ins: %A0 in %vreg13, %A1 in %vreg14

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg14<def> = COPY %A1; CPURegs:%vreg14
	%vreg13<def> = COPY %A0; CPURegs:%vreg13
	%vreg16<def> = COPY %vreg14; CPURegs:%vreg16,%vreg14
	%vreg18<def> = LEU %vreg13, %vreg14; CPURegs:%vreg18,%vreg13,%vreg14
	%vreg15<def> = COPY %vreg13; CPURegs:%vreg15,%vreg13
	%vreg17<def> = MovGR %ZERO, 0; CPURegs:%vreg17
	JC %vreg18<kill>, <BB#7>; CPURegs:%vreg18
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %for.cond.preheader
    Predecessors according to CFG: BB#0 BB#6
	%vreg0<def> = PHI %vreg17, <BB#0>, %vreg10, <BB#6>; CPURegs:%vreg0,%vreg17,%vreg10
	%vreg1<def> = PHI %vreg15, <BB#0>, %vreg11, <BB#6>; CPURegs:%vreg1,%vreg15,%vreg11
	%vreg20<def> = LTU %vreg1, %vreg16; CPURegs:%vreg20,%vreg1,%vreg16
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	JC %vreg20<kill>, <BB#5>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#5(16) BB#2(16)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg16, <BB#1>, %vreg5, <BB#4>; CPURegs:%vreg2,%vreg16,%vreg5
	%vreg3<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#4>; CPURegs:%vreg3,%vreg19,%vreg6
	%vreg21<def> = SUBu %vreg1, %vreg2; CPURegs:%vreg21,%vreg1,%vreg2
	%vreg22<def> = GEU %vreg21<kill>, %vreg16; CPURegs:%vreg22,%vreg21,%vreg16
	JC %vreg22<kill>, <BB#4>; CPURegs:%vreg22
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then4
    Predecessors according to CFG: BB#2
	%vreg25<def> = MovGR %ZERO, 1; CPURegs:%vreg25
	%vreg26<def> = SHL %vreg25<kill>, %vreg3; CPURegs:%vreg26,%vreg25,%vreg3
	%vreg4<def> = ADDu %vreg26<kill>, %vreg0; CPURegs:%vreg4,%vreg26,%vreg0
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg23<def> = MovGR %ZERO, 1; CPURegs:%vreg23
	%vreg5<def> = SHL %vreg2, %vreg23<kill>; CPURegs:%vreg5,%vreg2,%vreg23
	%vreg6<def> = ADDiu %vreg3, 1; CPURegs:%vreg6,%vreg3
	%vreg24<def> = GEU %vreg1, %vreg5; CPURegs:%vreg24,%vreg1,%vreg5
	JC %vreg24<kill>, <BB#2>; CPURegs:%vreg24
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#2(124)

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#4 BB#3
	%vreg7<def> = PHI %vreg16, <BB#1>, %vreg5, <BB#4>, %vreg2, <BB#3>; CPURegs:%vreg7,%vreg16,%vreg5,%vreg2
	%vreg8<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#4>, %vreg3, <BB#3>; CPURegs:%vreg8,%vreg19,%vreg6,%vreg3
	%vreg9<def> = PHI %vreg0, <BB#1>, %vreg0, <BB#4>, %vreg4, <BB#3>; CPURegs:%vreg9,%vreg0,%vreg0,%vreg4
	%vreg27<def> = SUBu %vreg1, %vreg7; CPURegs:%vreg27,%vreg1,%vreg7
	%vreg28<def> = LTU %vreg27<kill>, %vreg16; CPURegs:%vreg28,%vreg27,%vreg16
	JC %vreg28<kill>, <BB#7>; CPURegs:%vreg28
	Jmp <BB#6>
    Successors according to CFG: BB#7(4) BB#6(124)

BB#6: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#5
	%vreg29<def> = ADDiu %vreg8, -1; CPURegs:%vreg29,%vreg8
	%vreg30<def> = MovGR %ZERO, 1; CPURegs:%vreg30
	%vreg31<def> = SHL %vreg30, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	%vreg10<def> = ADDu %vreg9, %vreg31<kill>; CPURegs:%vreg10,%vreg9,%vreg31
	%vreg32<def> = SRL %vreg7, %vreg30; CPURegs:%vreg32,%vreg7,%vreg30
	%vreg11<def> = SUBu %vreg1, %vreg32<kill>; CPURegs:%vreg11,%vreg1,%vreg32
	%vreg33<def> = GTU %vreg11, %vreg16; CPURegs:%vreg33,%vreg11,%vreg16
	JC %vreg33<kill>, <BB#1>; CPURegs:%vreg33
	Jmp <BB#7>
    Successors according to CFG: BB#1(124) BB#7(4)

BB#7: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#5 BB#6
	%vreg12<def> = PHI %vreg17, <BB#0>, %vreg9, <BB#5>, %vreg10, <BB#6>; CPURegs:%vreg12,%vreg17,%vreg9,%vreg10
	%V0<def> = COPY %vreg12; CPURegs:%vreg12
	RetLR %V0<imp-use>

# End machine code for function integer_div.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function integer_div: SSA
Function Live Ins: %A0 in %vreg13, %A1 in %vreg14

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg14<def> = COPY %A1; CPURegs:%vreg14
	%vreg13<def> = COPY %A0; CPURegs:%vreg13
	%vreg16<def> = COPY %vreg14; CPURegs:%vreg16,%vreg14
	%vreg18<def> = LEU %vreg13, %vreg14; CPURegs:%vreg18,%vreg13,%vreg14
	%vreg15<def> = COPY %vreg13; CPURegs:%vreg15,%vreg13
	%vreg17<def> = MovGR %ZERO, 0; CPURegs:%vreg17
	JC %vreg18<kill>, <BB#7>; CPURegs:%vreg18
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %for.cond.preheader
    Predecessors according to CFG: BB#0 BB#6
	%vreg0<def> = PHI %vreg17, <BB#0>, %vreg10, <BB#6>; CPURegs:%vreg0,%vreg17,%vreg10
	%vreg1<def> = PHI %vreg15, <BB#0>, %vreg11, <BB#6>; CPURegs:%vreg1,%vreg15,%vreg11
	%vreg20<def> = LTU %vreg1, %vreg16; CPURegs:%vreg20,%vreg1,%vreg16
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	JC %vreg20<kill>, <BB#5>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#5(16) BB#2(16)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg16, <BB#1>, %vreg5, <BB#4>; CPURegs:%vreg2,%vreg16,%vreg5
	%vreg3<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#4>; CPURegs:%vreg3,%vreg19,%vreg6
	%vreg21<def> = SUBu %vreg1, %vreg2; CPURegs:%vreg21,%vreg1,%vreg2
	%vreg22<def> = GEU %vreg21<kill>, %vreg16; CPURegs:%vreg22,%vreg21,%vreg16
	JC %vreg22<kill>, <BB#4>; CPURegs:%vreg22
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then4
    Predecessors according to CFG: BB#2
	%vreg25<def> = MovGR %ZERO, 1; CPURegs:%vreg25
	%vreg26<def> = SHL %vreg25<kill>, %vreg3; CPURegs:%vreg26,%vreg25,%vreg3
	%vreg4<def> = ADDu %vreg26<kill>, %vreg0; CPURegs:%vreg4,%vreg26,%vreg0
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg23<def> = MovGR %ZERO, 1; CPURegs:%vreg23
	%vreg5<def> = SHL %vreg2, %vreg23<kill>; CPURegs:%vreg5,%vreg2,%vreg23
	%vreg6<def> = ADDiu %vreg3, 1; CPURegs:%vreg6,%vreg3
	%vreg24<def> = GEU %vreg1, %vreg5; CPURegs:%vreg24,%vreg1,%vreg5
	JC %vreg24<kill>, <BB#2>; CPURegs:%vreg24
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#2(124)

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#4 BB#3
	%vreg7<def> = PHI %vreg16, <BB#1>, %vreg5, <BB#4>, %vreg2, <BB#3>; CPURegs:%vreg7,%vreg16,%vreg5,%vreg2
	%vreg8<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#4>, %vreg3, <BB#3>; CPURegs:%vreg8,%vreg19,%vreg6,%vreg3
	%vreg9<def> = PHI %vreg0, <BB#1>, %vreg0, <BB#4>, %vreg4, <BB#3>; CPURegs:%vreg9,%vreg0,%vreg0,%vreg4
	%vreg27<def> = SUBu %vreg1, %vreg7; CPURegs:%vreg27,%vreg1,%vreg7
	%vreg28<def> = LTU %vreg27<kill>, %vreg16; CPURegs:%vreg28,%vreg27,%vreg16
	JC %vreg28<kill>, <BB#7>; CPURegs:%vreg28
	Jmp <BB#6>
    Successors according to CFG: BB#7(4) BB#6(124)

BB#6: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#5
	%vreg29<def> = ADDiu %vreg8, -1; CPURegs:%vreg29,%vreg8
	%vreg30<def> = MovGR %ZERO, 1; CPURegs:%vreg30
	%vreg31<def> = SHL %vreg30, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	%vreg10<def> = ADDu %vreg9, %vreg31<kill>; CPURegs:%vreg10,%vreg9,%vreg31
	%vreg32<def> = SRL %vreg7, %vreg30; CPURegs:%vreg32,%vreg7,%vreg30
	%vreg11<def> = SUBu %vreg1, %vreg32<kill>; CPURegs:%vreg11,%vreg1,%vreg32
	%vreg33<def> = GTU %vreg11, %vreg16; CPURegs:%vreg33,%vreg11,%vreg16
	JC %vreg33<kill>, <BB#1>; CPURegs:%vreg33
	Jmp <BB#7>
    Successors according to CFG: BB#1(124) BB#7(4)

BB#7: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#5 BB#6
	%vreg12<def> = PHI %vreg17, <BB#0>, %vreg9, <BB#5>, %vreg10, <BB#6>; CPURegs:%vreg12,%vreg17,%vreg9,%vreg10
	%V0<def> = COPY %vreg12; CPURegs:%vreg12
	RetLR %V0<imp-use>

# End machine code for function integer_div.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.

