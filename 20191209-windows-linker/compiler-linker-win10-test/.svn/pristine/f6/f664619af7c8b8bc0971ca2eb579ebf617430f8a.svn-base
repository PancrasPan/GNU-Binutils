
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function v4si_2add: SSA
Frame Objects:
  fi#0: size=16, align=16, at location [SP]
  fi#1: size=16, align=16, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU128Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU128Regs:%vreg0
	VSTORE32 %vreg0, <fi#0>, 0; mem:ST16[%a.addr] CPU128Regs:%vreg0
	VSTORE32 %vreg1, <fi#1>, 0; mem:ST16[%b.addr] CPU128Regs:%vreg1
	%vreg2<def> = VLOAD32 <fi#0>, 0; mem:LD16[%a.addr] CPU128Regs:%vreg2
	%vreg3<def> = VADD32 %vreg2<kill>, %vreg1; CPU128Regs:%vreg3,%vreg2,%vreg1
	%VR0<def> = COPY %vreg3; CPU128Regs:%vreg3
	RetLR %VR0<imp-use>

# End machine code for function v4si_2add.

# Machine code for function v4si_3add: SSA
Frame Objects:
  fi#-1: size=16, align=8, fixed, at location [SP+16]
  fi#0: size=16, align=16, at location [SP]
  fi#1: size=16, align=16, at location [SP]
  fi#2: size=16, align=16, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU128Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU128Regs:%vreg0
	%vreg2<def> = VLOAD32 <fi#-1>, 0; mem:LD16[FixedStack-1] CPU128Regs:%vreg2
	VSTORE32 %vreg0, <fi#0>, 0; mem:ST16[%a.addr] CPU128Regs:%vreg0
	VSTORE32 %vreg1, <fi#1>, 0; mem:ST16[%b.addr] CPU128Regs:%vreg1
	VSTORE32 %vreg2, <fi#2>, 0; mem:ST16[%c.addr] CPU128Regs:%vreg2
	%vreg3<def> = VLOAD32 <fi#1>, 0; mem:LD16[%b.addr] CPU128Regs:%vreg3
	%vreg4<def> = VLOAD32 <fi#0>, 0; mem:LD16[%a.addr] CPU128Regs:%vreg4
	%vreg5<def> = VADD32 %vreg4<kill>, %vreg3<kill>; CPU128Regs:%vreg5,%vreg4,%vreg3
	%vreg6<def> = VADD32 %vreg5<kill>, %vreg2; CPU128Regs:%vreg6,%vreg5,%vreg2
	%VR0<def> = COPY %vreg6; CPU128Regs:%vreg6
	RetLR %VR0<imp-use>

# End machine code for function v4si_3add.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=16, align=16, at location [SP]
  fi#4: size=16, align=16, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%argc.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%argv.addr] CPURegs:%vreg1
	%vreg3<def> = MovIGH %ZERO, <ga:@vla>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@vla>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = MovIGH %ZERO, <ga:@vlb>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@vlb>[TF=4]; CPURegs:%vreg6,%vreg5
	%vreg7<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg7 CPURegs:%vreg6
	%vreg8<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg8 CPURegs:%vreg4
	%vreg9<def> = VADD32 %vreg8<kill>, %vreg7<kill>; CPU128Regs:%vreg9,%vreg8,%vreg7
	VSTORE32 %vreg9, %vreg4, 0; mem:ST16[@vla] CPU128Regs:%vreg9 CPURegs:%vreg4
	%vreg10<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg10 CPURegs:%vreg6
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%VR2<def> = COPY %vreg9; CPU128Regs:%vreg9
	%VR3<def> = COPY %vreg10; CPU128Regs:%vreg10
	CALL <ga:@v4si_2add>, %VR2, %VR3, <regmask>, %SP<imp-def>, %VR0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %VR0; CPU128Regs:%vreg11
	VSTORE32 %vreg11, <fi#3>, 0; mem:ST16[%vlc] CPU128Regs:%vreg11
	%vreg12<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg12 CPURegs:%vreg6
	%vreg13<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg13 CPURegs:%vreg4
	ADJCALLSTACKDOWN 32, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = COPY %SP; CPURegs:%vreg14
	VSTORE32 %vreg11, %vreg14, 16; mem:ST16[<unknown>] CPU128Regs:%vreg11 CPURegs:%vreg14
	%VR2<def> = COPY %vreg13; CPU128Regs:%vreg13
	%VR3<def> = COPY %vreg12; CPU128Regs:%vreg12
	CALL <ga:@v4si_3add>, %VR2, %VR3, <regmask>, %SP<imp-def>, %VR0<imp-def>
	ADJCALLSTACKUP 32, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = COPY %VR0; CPU128Regs:%vreg15
	VSTORE32 %vreg15, <fi#4>, 0; mem:ST16[%vld] CPU128Regs:%vreg15
	%vreg16<def> = VLOAD32 <fi#3>, 0; mem:LD16[%vlc] CPU128Regs:%vreg16
	%vreg17<def> = VADD32 %vreg16<kill>, %vreg15; CPU128Regs:%vreg17,%vreg16,%vreg15
	VSTORE32 %vreg17<kill>, <fi#3>, 0; mem:ST16[%vlc] CPU128Regs:%vreg17
	%vreg18<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg18 CPURegs:%vreg4
	%vreg19<def> = VLOAD32 <fi#4>, 0; mem:LD16[%vld] CPU128Regs:%vreg19
	%vreg20<def> = VADD32 %vreg18<kill>, %vreg19<kill>; CPU128Regs:%vreg20,%vreg18,%vreg19
	VSTORE32 %vreg20<kill>, %vreg4, 0; mem:ST16[@vla] CPU128Regs:%vreg20 CPURegs:%vreg4
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function v4si_2add: SSA
Frame Objects:
  fi#0: size=16, align=16, at location [SP]
  fi#1: size=16, align=16, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU128Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU128Regs:%vreg0
	VSTORE32 %vreg0, <fi#0>, 0; mem:ST16[%a.addr] CPU128Regs:%vreg0
	VSTORE32 %vreg1, <fi#1>, 0; mem:ST16[%b.addr] CPU128Regs:%vreg1
	%vreg2<def> = VLOAD32 <fi#0>, 0; mem:LD16[%a.addr] CPU128Regs:%vreg2
	%vreg3<def> = VADD32 %vreg2<kill>, %vreg1; CPU128Regs:%vreg3,%vreg2,%vreg1
	%VR0<def> = COPY %vreg3; CPU128Regs:%vreg3
	RetLR %VR0<imp-use>

# End machine code for function v4si_2add.

# Machine code for function v4si_3add: SSA
Frame Objects:
  fi#-1: size=16, align=8, fixed, at location [SP+16]
  fi#0: size=16, align=16, at location [SP]
  fi#1: size=16, align=16, at location [SP]
  fi#2: size=16, align=16, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU128Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU128Regs:%vreg0
	%vreg2<def> = VLOAD32 <fi#-1>, 0; mem:LD16[FixedStack-1] CPU128Regs:%vreg2
	VSTORE32 %vreg0, <fi#0>, 0; mem:ST16[%a.addr] CPU128Regs:%vreg0
	VSTORE32 %vreg1, <fi#1>, 0; mem:ST16[%b.addr] CPU128Regs:%vreg1
	VSTORE32 %vreg2, <fi#2>, 0; mem:ST16[%c.addr] CPU128Regs:%vreg2
	%vreg3<def> = VLOAD32 <fi#1>, 0; mem:LD16[%b.addr] CPU128Regs:%vreg3
	%vreg4<def> = VLOAD32 <fi#0>, 0; mem:LD16[%a.addr] CPU128Regs:%vreg4
	%vreg5<def> = VADD32 %vreg4<kill>, %vreg3<kill>; CPU128Regs:%vreg5,%vreg4,%vreg3
	%vreg6<def> = VADD32 %vreg5<kill>, %vreg2; CPU128Regs:%vreg6,%vreg5,%vreg2
	%VR0<def> = COPY %vreg6; CPU128Regs:%vreg6
	RetLR %VR0<imp-use>

# End machine code for function v4si_3add.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=16, align=16, at location [SP]
  fi#4: size=16, align=16, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%argc.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%argv.addr] CPURegs:%vreg1
	%vreg3<def> = MovIGH %ZERO, <ga:@vla>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@vla>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = MovIGH %ZERO, <ga:@vlb>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@vlb>[TF=4]; CPURegs:%vreg6,%vreg5
	%vreg7<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg7 CPURegs:%vreg6
	%vreg8<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg8 CPURegs:%vreg4
	%vreg9<def> = VADD32 %vreg8<kill>, %vreg7<kill>; CPU128Regs:%vreg9,%vreg8,%vreg7
	VSTORE32 %vreg9, %vreg4, 0; mem:ST16[@vla] CPU128Regs:%vreg9 CPURegs:%vreg4
	%vreg10<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg10 CPURegs:%vreg6
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%VR2<def> = COPY %vreg9; CPU128Regs:%vreg9
	%VR3<def> = COPY %vreg10; CPU128Regs:%vreg10
	CALL <ga:@v4si_2add>, %VR2, %VR3, <regmask>, %SP<imp-def>, %VR0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %VR0; CPU128Regs:%vreg11
	VSTORE32 %vreg11, <fi#3>, 0; mem:ST16[%vlc] CPU128Regs:%vreg11
	%vreg12<def> = VLOAD32 %vreg6, 0; mem:LD16[@vlb] CPU128Regs:%vreg12 CPURegs:%vreg6
	%vreg13<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg13 CPURegs:%vreg4
	ADJCALLSTACKDOWN 32, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = COPY %SP; CPURegs:%vreg14
	VSTORE32 %vreg11, %vreg14, 16; mem:ST16[<unknown>] CPU128Regs:%vreg11 CPURegs:%vreg14
	%VR2<def> = COPY %vreg13; CPU128Regs:%vreg13
	%VR3<def> = COPY %vreg12; CPU128Regs:%vreg12
	CALL <ga:@v4si_3add>, %VR2, %VR3, <regmask>, %SP<imp-def>, %VR0<imp-def>
	ADJCALLSTACKUP 32, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = COPY %VR0; CPU128Regs:%vreg15
	VSTORE32 %vreg15, <fi#4>, 0; mem:ST16[%vld] CPU128Regs:%vreg15
	%vreg16<def> = VLOAD32 <fi#3>, 0; mem:LD16[%vlc] CPU128Regs:%vreg16
	%vreg17<def> = VADD32 %vreg16<kill>, %vreg15; CPU128Regs:%vreg17,%vreg16,%vreg15
	VSTORE32 %vreg17<kill>, <fi#3>, 0; mem:ST16[%vlc] CPU128Regs:%vreg17
	%vreg18<def> = VLOAD32 %vreg4, 0; mem:LD16[@vla] CPU128Regs:%vreg18 CPURegs:%vreg4
	%vreg19<def> = VLOAD32 <fi#4>, 0; mem:LD16[%vld] CPU128Regs:%vreg19
	%vreg20<def> = VADD32 %vreg18<kill>, %vreg19<kill>; CPU128Regs:%vreg20,%vreg18,%vreg19
	VSTORE32 %vreg20<kill>, %vreg4, 0; mem:ST16[@vla] CPU128Regs:%vreg20 CPURegs:%vreg4
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.

