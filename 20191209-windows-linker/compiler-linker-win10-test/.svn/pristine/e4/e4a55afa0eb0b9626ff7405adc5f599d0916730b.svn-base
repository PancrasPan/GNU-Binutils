
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name testb.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/testb.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/testb.ll -x c ./testcase_8slots/testb.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function testb: SSA
Frame Objects:
  fi#-4: size=4, align=4, fixed, at location [SP+20]
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg7<def> = LD <fi#-4>, 0; mem:LD4[FixedStack-4] CPURegs:%vreg7
	%vreg6<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg6
	%vreg5<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg5
	%vreg4<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg4
	%vreg8<def> = MovGR %ZERO, 10; CPURegs:%vreg8
	ST %vreg8<kill>, <fi#0>, 0; mem:ST4[%localb](tbaa=<badref>) CPURegs:%vreg8
	ST %vreg0, %vreg4, 0; mem:ST4[%pgA2](tbaa=<badref>) CPURegs:%vreg0,%vreg4
	ST %vreg1, %vreg5, 0; mem:ST4[%psA2](tbaa=<badref>) CPURegs:%vreg1,%vreg5
	ST %vreg6, %vreg7, 0; mem:ST4[%pgB2](tbaa=<badref>) CPURegs:%vreg6,%vreg7
	%vreg9<def> = ADDu %vreg1, %vreg0; CPURegs:%vreg9,%vreg1,%vreg0
	%vreg10<def> = LD %vreg4, 0; mem:LD4[%pgA2](tbaa=<badref>) CPURegs:%vreg10,%vreg4
	%vreg11<def> = ADDu %vreg9<kill>, %vreg10<kill>; CPURegs:%vreg11,%vreg9,%vreg10
	%vreg12<def> = LD %vreg5, 0; mem:LD4[%psA2](tbaa=<badref>) CPURegs:%vreg12,%vreg5
	%vreg13<def> = ADDu %vreg11<kill>, %vreg12<kill>; CPURegs:%vreg13,%vreg11,%vreg12
	%vreg14<def> = MovIGH %ZERO, <ga:@init_gB>[TF=3]; CPURegs:%vreg14
	%vreg15<def,tied1> = MovIGL %vreg14<tied0>, <ga:@init_gB>[TF=4]; CPURegs:%vreg15,%vreg14
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[@init_gB](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg17<def> = ADDu %vreg13<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg13,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@uninit_gB>[TF=3]; CPURegs:%vreg18
	%vreg19<def,tied1> = MovIGL %vreg18<tied0>, <ga:@uninit_gB>[TF=4]; CPURegs:%vreg19,%vreg18
	%vreg20<def> = LD %vreg19<kill>, 0; mem:LD4[@uninit_gB](tbaa=<badref>) CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg17<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg17,%vreg20
	%vreg22<def> = LD <fi#0>, 0; mem:LD4[%localb](tbaa=<badref>) CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	ST %vreg23<kill>, <fi#0>, 0; mem:ST4[%localb](tbaa=<badref>) CPURegs:%vreg23
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg24<def> = LEA <fi#0>, 0; CPURegs:%vreg24
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	CALL <ga:@neg>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg25<def> = COPY %V0; CPURegs:%vreg25
	%vreg3<def> = COPY %vreg1; CPURegs:%vreg3,%vreg1
	%vreg2<def> = COPY %vreg0; CPURegs:%vreg2,%vreg0
	%vreg26<def> = LD <fi#0>, 0; mem:LD4[%localb](tbaa=<badref>) CPURegs:%vreg26
	%V0<def> = COPY %vreg26; CPURegs:%vreg26
	RetLR %V0<imp-use>

# End machine code for function testb.

# Machine code for function neg: SSA
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD %vreg0, 0; mem:LD4[%x](tbaa=<badref>) CPURegs:%vreg2,%vreg0
	%vreg3<def> = MovGR %ZERO, 0; CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg3, %vreg2<kill>; CPURegs:%vreg4,%vreg3,%vreg2
	ST %vreg4<kill>, %vreg0, 0; mem:ST4[%x](tbaa=<badref>) CPURegs:%vreg4,%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetLR %V0<imp-use>

# End machine code for function neg.


#####==========stderr_obj==========#####:
# Machine code for function testb: SSA
Frame Objects:
  fi#-4: size=4, align=4, fixed, at location [SP+20]
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg7<def> = LD <fi#-4>, 0; mem:LD4[FixedStack-4] CPURegs:%vreg7
	%vreg6<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg6
	%vreg5<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg5
	%vreg4<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg4
	%vreg8<def> = MovGR %ZERO, 10; CPURegs:%vreg8
	ST %vreg8<kill>, <fi#0>, 0; mem:ST4[%localb](tbaa=<badref>) CPURegs:%vreg8
	ST %vreg0, %vreg4, 0; mem:ST4[%pgA2](tbaa=<badref>) CPURegs:%vreg0,%vreg4
	ST %vreg1, %vreg5, 0; mem:ST4[%psA2](tbaa=<badref>) CPURegs:%vreg1,%vreg5
	ST %vreg6, %vreg7, 0; mem:ST4[%pgB2](tbaa=<badref>) CPURegs:%vreg6,%vreg7
	%vreg9<def> = ADDu %vreg1, %vreg0; CPURegs:%vreg9,%vreg1,%vreg0
	%vreg10<def> = LD %vreg4, 0; mem:LD4[%pgA2](tbaa=<badref>) CPURegs:%vreg10,%vreg4
	%vreg11<def> = ADDu %vreg9<kill>, %vreg10<kill>; CPURegs:%vreg11,%vreg9,%vreg10
	%vreg12<def> = LD %vreg5, 0; mem:LD4[%psA2](tbaa=<badref>) CPURegs:%vreg12,%vreg5
	%vreg13<def> = ADDu %vreg11<kill>, %vreg12<kill>; CPURegs:%vreg13,%vreg11,%vreg12
	%vreg14<def> = MovIGH %ZERO, <ga:@init_gB>[TF=3]; CPURegs:%vreg14
	%vreg15<def,tied1> = MovIGL %vreg14<tied0>, <ga:@init_gB>[TF=4]; CPURegs:%vreg15,%vreg14
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[@init_gB](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg17<def> = ADDu %vreg13<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg13,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@uninit_gB>[TF=3]; CPURegs:%vreg18
	%vreg19<def,tied1> = MovIGL %vreg18<tied0>, <ga:@uninit_gB>[TF=4]; CPURegs:%vreg19,%vreg18
	%vreg20<def> = LD %vreg19<kill>, 0; mem:LD4[@uninit_gB](tbaa=<badref>) CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg17<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg17,%vreg20
	%vreg22<def> = LD <fi#0>, 0; mem:LD4[%localb](tbaa=<badref>) CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	ST %vreg23<kill>, <fi#0>, 0; mem:ST4[%localb](tbaa=<badref>) CPURegs:%vreg23
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg24<def> = LEA <fi#0>, 0; CPURegs:%vreg24
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	CALL <ga:@neg>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg25<def> = COPY %V0; CPURegs:%vreg25
	%vreg3<def> = COPY %vreg1; CPURegs:%vreg3,%vreg1
	%vreg2<def> = COPY %vreg0; CPURegs:%vreg2,%vreg0
	%vreg26<def> = LD <fi#0>, 0; mem:LD4[%localb](tbaa=<badref>) CPURegs:%vreg26
	%V0<def> = COPY %vreg26; CPURegs:%vreg26
	RetLR %V0<imp-use>

# End machine code for function testb.

# Machine code for function neg: SSA
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD %vreg0, 0; mem:LD4[%x](tbaa=<badref>) CPURegs:%vreg2,%vreg0
	%vreg3<def> = MovGR %ZERO, 0; CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg3, %vreg2<kill>; CPURegs:%vreg4,%vreg3,%vreg2
	ST %vreg4<kill>, %vreg0, 0; mem:ST4[%x](tbaa=<badref>) CPURegs:%vreg4,%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetLR %V0<imp-use>

# End machine code for function neg.

