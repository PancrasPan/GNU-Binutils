
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = LEA <fi#1>, 0; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#3>, 0; mem:ST4[%p] CPURegs:%vreg1
	%vreg2<def> = LEA <fi#2>, 0; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#4>, 0; mem:ST4[%q] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 1; CPURegs:%vreg3
	%vreg4<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg4
	ST %vreg3<kill>, %vreg4<kill>, 0; mem:ST4[%key2] CPURegs:%vreg3,%vreg4
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg6
	ST %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%key13] CPURegs:%vreg5,%vreg6
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg7
	%vreg8<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg8
	ST %vreg8<kill>, %vreg7<kill>, 4; mem:ST4[%next] CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg9
	ST %vreg0, %vreg9<kill>, 4; mem:ST4[%next2] CPURegs:%vreg0,%vreg9
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg10<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg10
	%vreg11<def> = LD %vreg10<kill>, 4; mem:LD4[%next3] CPURegs:%vreg11,%vreg10
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#3>; CPURegs:%vreg12
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg15
	%vreg16<def> = LD %vreg15, 0; mem:LD4[%key44] CPURegs:%vreg16,%vreg15
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	ST %vreg17<kill>, %vreg15, 0; mem:ST4[%key44] CPURegs:%vreg17,%vreg15
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg18
	%vreg19<def> = LD %vreg18<kill>, 4; mem:LD4[%next5] CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#3>, 0; mem:ST4[%p] CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#1
	%vreg13<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg13
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%key65] CPURegs:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; CPURegs:%vreg14
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = LEA <fi#1>, 0; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#3>, 0; mem:ST4[%p] CPURegs:%vreg1
	%vreg2<def> = LEA <fi#2>, 0; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#4>, 0; mem:ST4[%q] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 1; CPURegs:%vreg3
	%vreg4<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg4
	ST %vreg3<kill>, %vreg4<kill>, 0; mem:ST4[%key2] CPURegs:%vreg3,%vreg4
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg6
	ST %vreg5<kill>, %vreg6<kill>, 0; mem:ST4[%key13] CPURegs:%vreg5,%vreg6
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg7
	%vreg8<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg8
	ST %vreg8<kill>, %vreg7<kill>, 4; mem:ST4[%next] CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg9
	ST %vreg0, %vreg9<kill>, 4; mem:ST4[%next2] CPURegs:%vreg0,%vreg9
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg10<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg10
	%vreg11<def> = LD %vreg10<kill>, 4; mem:LD4[%next3] CPURegs:%vreg11,%vreg10
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#3>; CPURegs:%vreg12
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg15
	%vreg16<def> = LD %vreg15, 0; mem:LD4[%key44] CPURegs:%vreg16,%vreg15
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	ST %vreg17<kill>, %vreg15, 0; mem:ST4[%key44] CPURegs:%vreg17,%vreg15
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%p] CPURegs:%vreg18
	%vreg19<def> = LD %vreg18<kill>, 4; mem:LD4[%next5] CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#3>, 0; mem:ST4[%p] CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#1
	%vreg13<def> = LD <fi#4>, 0; mem:LD4[%q] CPURegs:%vreg13
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%key65] CPURegs:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; CPURegs:%vreg14
	RetLR %V0<imp-use>

# End machine code for function main.

