
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name n_real_updates.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/n_real_updates.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/n_real_updates.ll -x c ./testcase_8slots/n_real_updates.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg10, %A1 in %vreg11

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg11<def> = COPY %A1; CPURegs:%vreg11
	%vreg10<def> = COPY %A0; CPURegs:%vreg10
	%vreg13<def> = COPY %vreg11; CPURegs:%vreg13,%vreg11
	%vreg12<def> = COPY %vreg10; CPURegs:%vreg12,%vreg10
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	%vreg15<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg15
	%vreg14<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg14
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg16, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg0,%vreg16,%vreg9
	%vreg1<def> = PHI %vreg15, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg1,%vreg15,%vreg8
	%vreg2<def> = PHI %vreg14, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg2,%vreg14,%vreg7
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg6
	%vreg4<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg4,%vreg12,%vreg5
	%vreg17<def> = MovGR %ZERO, 10; CPURegs:%vreg17
	ST %vreg17, %vreg4, 0; mem:ST4[%pa.addr.05](tbaa=<badref>) CPURegs:%vreg17,%vreg4
	%vreg18<def> = MovGR %ZERO, 2; CPURegs:%vreg18
	ST %vreg18<kill>, %vreg3, 0; mem:ST4[%pb.addr.06](tbaa=<badref>) CPURegs:%vreg18,%vreg3
	ST %vreg17, %vreg2, 0; mem:ST4[%pc.addr.07](tbaa=<badref>) CPURegs:%vreg17,%vreg2
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	ST %vreg19<kill>, %vreg1, 0; mem:ST4[%pd.addr.08](tbaa=<badref>) CPURegs:%vreg19,%vreg1
	%vreg8<def> = ADDiu %vreg1, 4; CPURegs:%vreg8,%vreg1
	%vreg7<def> = ADDiu %vreg2, 4; CPURegs:%vreg7,%vreg2
	%vreg6<def> = ADDiu %vreg3, 4; CPURegs:%vreg6,%vreg3
	%vreg5<def> = ADDiu %vreg4, 4; CPURegs:%vreg5,%vreg4
	%vreg9<def> = ADDiu %vreg0, 1; CPURegs:%vreg9,%vreg0
	%vreg20<def> = NEQI %vreg9, 16; CPURegs:%vreg20,%vreg9
	JC %vreg20<kill>, <BB#1>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = MovIGH %ZERO, <ga:@main.D>[TF=3]; CPURegs:%vreg15
	%vreg11<def,tied1> = MovIGL %vreg15<tied0>, <ga:@main.D>[TF=4]; CPURegs:%vreg11,%vreg15
	%vreg16<def> = COPY %SP; CPURegs:%vreg16
	ST %vreg11, %vreg16, 12; mem:ST4[<unknown>] CPURegs:%vreg11,%vreg16
	%vreg17<def> = MovIGH %ZERO, <ga:@main.C>[TF=3]; CPURegs:%vreg17
	%vreg12<def,tied1> = MovIGL %vreg17<tied0>, <ga:@main.C>[TF=4]; CPURegs:%vreg12,%vreg17
	ST %vreg12, %vreg16, 8; mem:ST4[<unknown>] CPURegs:%vreg12,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg18
	%vreg14<def,tied1> = MovIGL %vreg18<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg14,%vreg18
	%vreg19<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg19
	%vreg13<def,tied1> = MovIGL %vreg19<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg13,%vreg19
	%A0<def> = COPY %vreg14; CPURegs:%vreg14
	%A1<def> = COPY %vreg13; CPURegs:%vreg13
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg9
	%vreg1<def> = PHI %vreg11, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg1,%vreg11,%vreg8
	%vreg2<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg2,%vreg12,%vreg5
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg7
	%vreg4<def> = PHI %vreg14, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg4,%vreg14,%vreg6
	%vreg20<def> = LD %vreg4, 0; mem:LD4[%p_a.05](tbaa=<badref>) CPURegs:%vreg20,%vreg4
	%vreg21<def> = LD %vreg3, 0; mem:LD4[%p_b.06](tbaa=<badref>) CPURegs:%vreg21,%vreg3
	%vreg22<def> = MUL32 %vreg21<kill>, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	%vreg23<def> = LD %vreg2, 0; mem:LD4[%p_c.07](tbaa=<badref>) CPURegs:%vreg23,%vreg2
	%vreg24<def> = ADDu %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	ST %vreg24<kill>, %vreg1, 0; mem:ST4[%p_d.08](tbaa=<badref>) CPURegs:%vreg24,%vreg1
	%vreg8<def> = ADDiu %vreg1, 4; CPURegs:%vreg8,%vreg1
	%vreg7<def> = ADDiu %vreg3, 4; CPURegs:%vreg7,%vreg3
	%vreg6<def> = ADDiu %vreg4, 4; CPURegs:%vreg6,%vreg4
	%vreg5<def> = ADDiu %vreg2, 4; CPURegs:%vreg5,%vreg2
	%vreg9<def> = ADDiu %vreg0, 1; CPURegs:%vreg9,%vreg0
	%vreg25<def> = NEQI %vreg9, 16; CPURegs:%vreg25,%vreg9
	JC %vreg25<kill>, <BB#1>; CPURegs:%vreg25
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = MovIGH %ZERO, <ga:@main.D>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@main.D>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = COPY %SP; CPURegs:%vreg28
	ST %vreg27<kill>, %vreg28, 12; mem:ST4[<unknown>] CPURegs:%vreg27,%vreg28
	%vreg29<def> = MovIGH %ZERO, <ga:@main.C>[TF=3]; CPURegs:%vreg29
	%vreg30<def,tied1> = MovIGL %vreg29<tied0>, <ga:@main.C>[TF=4]; CPURegs:%vreg30,%vreg29
	ST %vreg30<kill>, %vreg28, 8; mem:ST4[<unknown>] CPURegs:%vreg30,%vreg28
	%vreg31<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg31
	%vreg32<def,tied1> = MovIGL %vreg31<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg32,%vreg31
	%vreg33<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg33
	%vreg34<def,tied1> = MovIGL %vreg33<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg34,%vreg33
	%A0<def> = COPY %vreg32; CPURegs:%vreg32
	%A1<def> = COPY %vreg34; CPURegs:%vreg34
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg35<def> = MovGR %ZERO, 0; CPURegs:%vreg35
	%V0<def> = COPY %vreg35; CPURegs:%vreg35
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg10, %A1 in %vreg11

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg11<def> = COPY %A1; CPURegs:%vreg11
	%vreg10<def> = COPY %A0; CPURegs:%vreg10
	%vreg13<def> = COPY %vreg11; CPURegs:%vreg13,%vreg11
	%vreg12<def> = COPY %vreg10; CPURegs:%vreg12,%vreg10
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	%vreg15<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg15
	%vreg14<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg14
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg16, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg0,%vreg16,%vreg9
	%vreg1<def> = PHI %vreg15, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg1,%vreg15,%vreg8
	%vreg2<def> = PHI %vreg14, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg2,%vreg14,%vreg7
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg6
	%vreg4<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg4,%vreg12,%vreg5
	%vreg17<def> = MovGR %ZERO, 10; CPURegs:%vreg17
	ST %vreg17, %vreg4, 0; mem:ST4[%pa.addr.05](tbaa=<badref>) CPURegs:%vreg17,%vreg4
	%vreg18<def> = MovGR %ZERO, 2; CPURegs:%vreg18
	ST %vreg18<kill>, %vreg3, 0; mem:ST4[%pb.addr.06](tbaa=<badref>) CPURegs:%vreg18,%vreg3
	ST %vreg17, %vreg2, 0; mem:ST4[%pc.addr.07](tbaa=<badref>) CPURegs:%vreg17,%vreg2
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	ST %vreg19<kill>, %vreg1, 0; mem:ST4[%pd.addr.08](tbaa=<badref>) CPURegs:%vreg19,%vreg1
	%vreg8<def> = ADDiu %vreg1, 4; CPURegs:%vreg8,%vreg1
	%vreg7<def> = ADDiu %vreg2, 4; CPURegs:%vreg7,%vreg2
	%vreg6<def> = ADDiu %vreg3, 4; CPURegs:%vreg6,%vreg3
	%vreg5<def> = ADDiu %vreg4, 4; CPURegs:%vreg5,%vreg4
	%vreg9<def> = ADDiu %vreg0, 1; CPURegs:%vreg9,%vreg0
	%vreg20<def> = NEQI %vreg9, 16; CPURegs:%vreg20,%vreg9
	JC %vreg20<kill>, <BB#1>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg15<def> = MovIGH %ZERO, <ga:@main.D>[TF=3]; CPURegs:%vreg15
	%vreg11<def,tied1> = MovIGL %vreg15<tied0>, <ga:@main.D>[TF=4]; CPURegs:%vreg11,%vreg15
	%vreg16<def> = COPY %SP; CPURegs:%vreg16
	ST %vreg11, %vreg16, 12; mem:ST4[<unknown>] CPURegs:%vreg11,%vreg16
	%vreg17<def> = MovIGH %ZERO, <ga:@main.C>[TF=3]; CPURegs:%vreg17
	%vreg12<def,tied1> = MovIGL %vreg17<tied0>, <ga:@main.C>[TF=4]; CPURegs:%vreg12,%vreg17
	ST %vreg12, %vreg16, 8; mem:ST4[<unknown>] CPURegs:%vreg12,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg18
	%vreg14<def,tied1> = MovIGL %vreg18<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg14,%vreg18
	%vreg19<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg19
	%vreg13<def,tied1> = MovIGL %vreg19<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg13,%vreg19
	%A0<def> = COPY %vreg14; CPURegs:%vreg14
	%A1<def> = COPY %vreg13; CPURegs:%vreg13
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg10, <BB#0>, %vreg9, <BB#1>; CPURegs:%vreg0,%vreg10,%vreg9
	%vreg1<def> = PHI %vreg11, <BB#0>, %vreg8, <BB#1>; CPURegs:%vreg1,%vreg11,%vreg8
	%vreg2<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg2,%vreg12,%vreg5
	%vreg3<def> = PHI %vreg13, <BB#0>, %vreg7, <BB#1>; CPURegs:%vreg3,%vreg13,%vreg7
	%vreg4<def> = PHI %vreg14, <BB#0>, %vreg6, <BB#1>; CPURegs:%vreg4,%vreg14,%vreg6
	%vreg20<def> = LD %vreg4, 0; mem:LD4[%p_a.05](tbaa=<badref>) CPURegs:%vreg20,%vreg4
	%vreg21<def> = LD %vreg3, 0; mem:LD4[%p_b.06](tbaa=<badref>) CPURegs:%vreg21,%vreg3
	%vreg22<def> = MUL32 %vreg21<kill>, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	%vreg23<def> = LD %vreg2, 0; mem:LD4[%p_c.07](tbaa=<badref>) CPURegs:%vreg23,%vreg2
	%vreg24<def> = ADDu %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	ST %vreg24<kill>, %vreg1, 0; mem:ST4[%p_d.08](tbaa=<badref>) CPURegs:%vreg24,%vreg1
	%vreg8<def> = ADDiu %vreg1, 4; CPURegs:%vreg8,%vreg1
	%vreg7<def> = ADDiu %vreg3, 4; CPURegs:%vreg7,%vreg3
	%vreg6<def> = ADDiu %vreg4, 4; CPURegs:%vreg6,%vreg4
	%vreg5<def> = ADDiu %vreg2, 4; CPURegs:%vreg5,%vreg2
	%vreg9<def> = ADDiu %vreg0, 1; CPURegs:%vreg9,%vreg0
	%vreg25<def> = NEQI %vreg9, 16; CPURegs:%vreg25,%vreg9
	JC %vreg25<kill>, <BB#1>; CPURegs:%vreg25
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = MovIGH %ZERO, <ga:@main.D>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@main.D>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = COPY %SP; CPURegs:%vreg28
	ST %vreg27<kill>, %vreg28, 12; mem:ST4[<unknown>] CPURegs:%vreg27,%vreg28
	%vreg29<def> = MovIGH %ZERO, <ga:@main.C>[TF=3]; CPURegs:%vreg29
	%vreg30<def,tied1> = MovIGL %vreg29<tied0>, <ga:@main.C>[TF=4]; CPURegs:%vreg30,%vreg29
	ST %vreg30<kill>, %vreg28, 8; mem:ST4[<unknown>] CPURegs:%vreg30,%vreg28
	%vreg31<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg31
	%vreg32<def,tied1> = MovIGL %vreg31<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg32,%vreg31
	%vreg33<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg33
	%vreg34<def,tied1> = MovIGL %vreg33<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg34,%vreg33
	%A0<def> = COPY %vreg32; CPURegs:%vreg32
	%A1<def> = COPY %vreg34; CPURegs:%vreg34
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg35<def> = MovGR %ZERO, 0; CPURegs:%vreg35
	%V0<def> = COPY %vreg35; CPURegs:%vreg35
	RetLR %V0<imp-use>

# End machine code for function main.

