
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name qsort.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/qsort.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/qsort.ll -x c ./testcase_8slots/qsort.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function qsort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg16, %A1 in %vreg17

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg17<def> = COPY %A1; CPURegs:%vreg17
	%vreg16<def> = COPY %A0; CPURegs:%vreg16
	%vreg20<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg20
	%vreg22<def> = SUBu %vreg20, %vreg17; CPURegs:%vreg22,%vreg20,%vreg17
	%vreg23<def> = MovGR %ZERO, 1; CPURegs:%vreg23
	%vreg24<def> = LT %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	%vreg19<def> = COPY %vreg17; CPURegs:%vreg19,%vreg17
	%vreg18<def> = COPY %vreg16; CPURegs:%vreg18,%vreg16
	%vreg21<def> = MovGR %ZERO, -1; CPURegs:%vreg21
	JC %vreg24<kill>, <BB#10>; CPURegs:%vreg24
	Jmp <BB#1>
    Successors according to CFG: BB#10(12) BB#1(20)

BB#1: derived from LLVM BB %if.end.lr.ph
    Predecessors according to CFG: BB#0
	%vreg0<def> = ADDiu %vreg20, 1; CPURegs:%vreg0,%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#1 BB#9
	%vreg1<def> = PHI %vreg19, <BB#1>, %vreg14, <BB#9>; CPURegs:%vreg1,%vreg19,%vreg14
	%vreg25<def> = GE %vreg1, %vreg0; CPURegs:%vreg25,%vreg1,%vreg0
	%vreg26<def> = MovGR %ZERO, 2; CPURegs:%vreg26
	%vreg27<def> = SHL %vreg1, %vreg26<kill>; CPURegs:%vreg27,%vreg1,%vreg26
	%vreg2<def> = ADDu %vreg18, %vreg27<kill>; CPURegs:%vreg2,%vreg18,%vreg27
	%vreg3<def> = LD %vreg2, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg3,%vreg2
	JC %vreg25<kill>, <BB#9>; CPURegs:%vreg25
	Jmp <BB#3>
    Successors according to CFG: BB#3(16) BB#9(16)

BB#3: derived from LLVM BB %while.cond2.preheader
    Predecessors according to CFG: BB#2 BB#8
	%vreg4<def> = PHI %vreg1, <BB#2>, %vreg10, <BB#8>; CPURegs:%vreg4,%vreg1,%vreg10
	%vreg5<def> = PHI %vreg0, <BB#2>, %vreg7, <BB#8>; CPURegs:%vreg5,%vreg0,%vreg7
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#3 BB#4
	%vreg6<def> = PHI %vreg5, <BB#3>, %vreg7, <BB#4>; CPURegs:%vreg6,%vreg5,%vreg7
	%vreg7<def> = ADDiu %vreg6, -1; CPURegs:%vreg7,%vreg6
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = SHL %vreg7, %vreg28<kill>; CPURegs:%vreg29,%vreg7,%vreg28
	%vreg8<def> = ADDu %vreg18, %vreg29<kill>; CPURegs:%vreg8,%vreg18,%vreg29
	%vreg30<def> = LD %vreg8, 0; mem:LD4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg30,%vreg8
	%vreg31<def> = GT %vreg30<kill>, %vreg3; CPURegs:%vreg31,%vreg30,%vreg3
	JC %vreg31<kill>, <BB#4>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#5: derived from LLVM BB %while.cond6
    Predecessors according to CFG: BB#4 BB#6
	%vreg9<def> = PHI %vreg4, <BB#4>, %vreg10, <BB#6>; CPURegs:%vreg9,%vreg4,%vreg10
	%vreg10<def> = ADDiu %vreg9, 1; CPURegs:%vreg10,%vreg9
	%vreg32<def> = GE %vreg10, %vreg7; CPURegs:%vreg32,%vreg10,%vreg7
	JC %vreg32<kill>, <BB#8>; CPURegs:%vreg32
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#8(4)

BB#6: derived from LLVM BB %while.body8
    Predecessors according to CFG: BB#5
	%vreg33<def> = MovGR %ZERO, 2; CPURegs:%vreg33
	%vreg34<def> = SHL %vreg10, %vreg33<kill>; CPURegs:%vreg34,%vreg10,%vreg33
	%vreg11<def> = ADDu %vreg18, %vreg34<kill>; CPURegs:%vreg11,%vreg18,%vreg34
	%vreg12<def> = LD %vreg11, 0; mem:LD4[%arrayidx9](tbaa=<badref>) CPURegs:%vreg12,%vreg11
	%vreg35<def> = LT %vreg12, %vreg3; CPURegs:%vreg35,%vreg12,%vreg3
	JC %vreg35<kill>, <BB#5>; CPURegs:%vreg35
	Jmp <BB#7>
    Successors according to CFG: BB#5(124) BB#7(4)

BB#7: derived from LLVM BB %if.then15
    Predecessors according to CFG: BB#6
	%vreg36<def> = LD %vreg8, 0; mem:LD4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg36,%vreg8
	ST %vreg36<kill>, %vreg11, 0; mem:ST4[%arrayidx9](tbaa=<badref>) CPURegs:%vreg36,%vreg11
	ST %vreg12, %vreg8, 0; mem:ST4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg12,%vreg8
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#8: derived from LLVM BB %while.cond.backedge
    Predecessors according to CFG: BB#5 BB#7
	%vreg37<def> = LT %vreg10, %vreg7; CPURegs:%vreg37,%vreg10,%vreg7
	JC %vreg37<kill>, <BB#3>; CPURegs:%vreg37
	Jmp <BB#9>
    Successors according to CFG: BB#3(124) BB#9(4)

BB#9: derived from LLVM BB %while.end21
    Predecessors according to CFG: BB#2 BB#8
	%vreg13<def> = PHI %vreg0, <BB#2>, %vreg7, <BB#8>; CPURegs:%vreg13,%vreg0,%vreg7
	%vreg39<def> = MovGR %ZERO, 2; CPURegs:%vreg39
	%vreg40<def> = SHL %vreg13, %vreg39<kill>; CPURegs:%vreg40,%vreg13,%vreg39
	%vreg41<def> = ADDu %vreg18, %vreg40<kill>; CPURegs:%vreg41,%vreg18,%vreg40
	%vreg42<def> = LD %vreg41, 0; mem:LD4[%arrayidx22](tbaa=<badref>) CPURegs:%vreg42,%vreg41
	ST %vreg42<kill>, %vreg2, 0; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg42,%vreg2
	ST %vreg3, %vreg41, 0; mem:ST4[%arrayidx22](tbaa=<badref>) CPURegs:%vreg3,%vreg41
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg43<def> = COPY %SP; CPURegs:%vreg43
	%vreg44<def> = ADDiu %vreg13, -1; CPURegs:%vreg44,%vreg13
	ST %vreg44<kill>, %vreg43, 8; mem:ST4[<unknown>] CPURegs:%vreg44,%vreg43
	%A0<def> = COPY %vreg18; CPURegs:%vreg18
	%A1<def> = COPY %vreg1; CPURegs:%vreg1
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg45<def> = COPY %V0; CPURegs:%vreg45
	%vreg38<def> = MovGR %ZERO, 0; CPURegs:%vreg38
	%vreg14<def> = ADDiu %vreg13, 1; CPURegs:%vreg14,%vreg13
	%vreg46<def> = SUBu %vreg20, %vreg14; CPURegs:%vreg46,%vreg20,%vreg14
	%vreg47<def> = LTI %vreg46<kill>, 1; CPURegs:%vreg47,%vreg46
	JNC %vreg47<kill>, <BB#2>; CPURegs:%vreg47
	Jmp <BB#10>
    Successors according to CFG: BB#10(4) BB#2(124)

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#9
	%vreg15<def> = PHI %vreg21, <BB#0>, %vreg38, <BB#9>; CPURegs:%vreg15,%vreg21,%vreg38
	%V0<def> = COPY %vreg15; CPURegs:%vreg15
	RetLR %V0<imp-use>

# End machine code for function qsort.


#####==========stderr_obj==========#####:
# Machine code for function qsort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg16, %A1 in %vreg17

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg17<def> = COPY %A1; CPURegs:%vreg17
	%vreg16<def> = COPY %A0; CPURegs:%vreg16
	%vreg20<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg20
	%vreg22<def> = SUBu %vreg20, %vreg17; CPURegs:%vreg22,%vreg20,%vreg17
	%vreg23<def> = MovGR %ZERO, 1; CPURegs:%vreg23
	%vreg24<def> = LT %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	%vreg19<def> = COPY %vreg17; CPURegs:%vreg19,%vreg17
	%vreg18<def> = COPY %vreg16; CPURegs:%vreg18,%vreg16
	%vreg21<def> = MovGR %ZERO, -1; CPURegs:%vreg21
	JC %vreg24<kill>, <BB#10>; CPURegs:%vreg24
	Jmp <BB#1>
    Successors according to CFG: BB#10(12) BB#1(20)

BB#1: derived from LLVM BB %if.end.lr.ph
    Predecessors according to CFG: BB#0
	%vreg0<def> = ADDiu %vreg20, 1; CPURegs:%vreg0,%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#1 BB#9
	%vreg1<def> = PHI %vreg19, <BB#1>, %vreg14, <BB#9>; CPURegs:%vreg1,%vreg19,%vreg14
	%vreg25<def> = GE %vreg1, %vreg0; CPURegs:%vreg25,%vreg1,%vreg0
	%vreg26<def> = MovGR %ZERO, 2; CPURegs:%vreg26
	%vreg27<def> = SHL %vreg1, %vreg26<kill>; CPURegs:%vreg27,%vreg1,%vreg26
	%vreg2<def> = ADDu %vreg18, %vreg27<kill>; CPURegs:%vreg2,%vreg18,%vreg27
	%vreg3<def> = LD %vreg2, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg3,%vreg2
	JC %vreg25<kill>, <BB#9>; CPURegs:%vreg25
	Jmp <BB#3>
    Successors according to CFG: BB#3(16) BB#9(16)

BB#3: derived from LLVM BB %while.cond2.preheader
    Predecessors according to CFG: BB#2 BB#8
	%vreg4<def> = PHI %vreg1, <BB#2>, %vreg10, <BB#8>; CPURegs:%vreg4,%vreg1,%vreg10
	%vreg5<def> = PHI %vreg0, <BB#2>, %vreg7, <BB#8>; CPURegs:%vreg5,%vreg0,%vreg7
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#3 BB#4
	%vreg6<def> = PHI %vreg5, <BB#3>, %vreg7, <BB#4>; CPURegs:%vreg6,%vreg5,%vreg7
	%vreg7<def> = ADDiu %vreg6, -1; CPURegs:%vreg7,%vreg6
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = SHL %vreg7, %vreg28<kill>; CPURegs:%vreg29,%vreg7,%vreg28
	%vreg8<def> = ADDu %vreg18, %vreg29<kill>; CPURegs:%vreg8,%vreg18,%vreg29
	%vreg30<def> = LD %vreg8, 0; mem:LD4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg30,%vreg8
	%vreg31<def> = GT %vreg30<kill>, %vreg3; CPURegs:%vreg31,%vreg30,%vreg3
	JC %vreg31<kill>, <BB#4>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#5: derived from LLVM BB %while.cond6
    Predecessors according to CFG: BB#4 BB#6
	%vreg9<def> = PHI %vreg4, <BB#4>, %vreg10, <BB#6>; CPURegs:%vreg9,%vreg4,%vreg10
	%vreg10<def> = ADDiu %vreg9, 1; CPURegs:%vreg10,%vreg9
	%vreg32<def> = GE %vreg10, %vreg7; CPURegs:%vreg32,%vreg10,%vreg7
	JC %vreg32<kill>, <BB#8>; CPURegs:%vreg32
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#8(4)

BB#6: derived from LLVM BB %while.body8
    Predecessors according to CFG: BB#5
	%vreg33<def> = MovGR %ZERO, 2; CPURegs:%vreg33
	%vreg34<def> = SHL %vreg10, %vreg33<kill>; CPURegs:%vreg34,%vreg10,%vreg33
	%vreg11<def> = ADDu %vreg18, %vreg34<kill>; CPURegs:%vreg11,%vreg18,%vreg34
	%vreg12<def> = LD %vreg11, 0; mem:LD4[%arrayidx9](tbaa=<badref>) CPURegs:%vreg12,%vreg11
	%vreg35<def> = LT %vreg12, %vreg3; CPURegs:%vreg35,%vreg12,%vreg3
	JC %vreg35<kill>, <BB#5>; CPURegs:%vreg35
	Jmp <BB#7>
    Successors according to CFG: BB#5(124) BB#7(4)

BB#7: derived from LLVM BB %if.then15
    Predecessors according to CFG: BB#6
	%vreg36<def> = LD %vreg8, 0; mem:LD4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg36,%vreg8
	ST %vreg36<kill>, %vreg11, 0; mem:ST4[%arrayidx9](tbaa=<badref>) CPURegs:%vreg36,%vreg11
	ST %vreg12, %vreg8, 0; mem:ST4[%arrayidx3](tbaa=<badref>) CPURegs:%vreg12,%vreg8
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#8: derived from LLVM BB %while.cond.backedge
    Predecessors according to CFG: BB#5 BB#7
	%vreg37<def> = LT %vreg10, %vreg7; CPURegs:%vreg37,%vreg10,%vreg7
	JC %vreg37<kill>, <BB#3>; CPURegs:%vreg37
	Jmp <BB#9>
    Successors according to CFG: BB#3(124) BB#9(4)

BB#9: derived from LLVM BB %while.end21
    Predecessors according to CFG: BB#2 BB#8
	%vreg13<def> = PHI %vreg0, <BB#2>, %vreg7, <BB#8>; CPURegs:%vreg13,%vreg0,%vreg7
	%vreg39<def> = MovGR %ZERO, 2; CPURegs:%vreg39
	%vreg40<def> = SHL %vreg13, %vreg39<kill>; CPURegs:%vreg40,%vreg13,%vreg39
	%vreg41<def> = ADDu %vreg18, %vreg40<kill>; CPURegs:%vreg41,%vreg18,%vreg40
	%vreg42<def> = LD %vreg41, 0; mem:LD4[%arrayidx22](tbaa=<badref>) CPURegs:%vreg42,%vreg41
	ST %vreg42<kill>, %vreg2, 0; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg42,%vreg2
	ST %vreg3, %vreg41, 0; mem:ST4[%arrayidx22](tbaa=<badref>) CPURegs:%vreg3,%vreg41
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg43<def> = COPY %SP; CPURegs:%vreg43
	%vreg44<def> = ADDiu %vreg13, -1; CPURegs:%vreg44,%vreg13
	ST %vreg44<kill>, %vreg43, 8; mem:ST4[<unknown>] CPURegs:%vreg44,%vreg43
	%A0<def> = COPY %vreg18; CPURegs:%vreg18
	%A1<def> = COPY %vreg1; CPURegs:%vreg1
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg45<def> = COPY %V0; CPURegs:%vreg45
	%vreg38<def> = MovGR %ZERO, 0; CPURegs:%vreg38
	%vreg14<def> = ADDiu %vreg13, 1; CPURegs:%vreg14,%vreg13
	%vreg46<def> = SUBu %vreg20, %vreg14; CPURegs:%vreg46,%vreg20,%vreg14
	%vreg47<def> = LTI %vreg46<kill>, 1; CPURegs:%vreg47,%vreg46
	JNC %vreg47<kill>, <BB#2>; CPURegs:%vreg47
	Jmp <BB#10>
    Successors according to CFG: BB#10(4) BB#2(124)

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#9
	%vreg15<def> = PHI %vreg21, <BB#0>, %vreg38, <BB#9>; CPURegs:%vreg15,%vreg21,%vreg38
	%V0<def> = COPY %vreg15; CPURegs:%vreg15
	RetLR %V0<imp-use>

# End machine code for function qsort.

