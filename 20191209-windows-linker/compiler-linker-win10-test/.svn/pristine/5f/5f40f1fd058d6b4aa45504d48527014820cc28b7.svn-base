
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function qsort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%beg.addr] CPURegs:%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg2, %vreg3<kill>; CPURegs:%vreg4,%vreg2,%vreg3
	%vreg5<def> = LTI %vreg4<kill>, 1; CPURegs:%vreg5,%vreg4
	JNC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(12) BB#2(20)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg88<def> = MovGR %ZERO, -1; CPURegs:%vreg88
	ST %vreg88<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg88
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg6
	ST %vreg6<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg6
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	%vreg8<def> = ADDiu %vreg7<kill>, 1; CPURegs:%vreg8,%vreg7
	ST %vreg8<kill>, <fi#5>, 0; mem:ST4[%j] CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 2; CPURegs:%vreg9
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg10
	%vreg11<def> = SHL %vreg10<kill>, %vreg9; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg12
	%vreg13<def> = ADDu %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg13
	ST %vreg14<kill>, <fi#6>, 0; mem:ST4[%pivot] CPURegs:%vreg14
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#7 BB#8
	%vreg15<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg15
	%vreg16<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = GE %vreg16<kill>, %vreg15<kill>; CPURegs:%vreg17,%vreg16,%vreg15
	JC %vreg17<kill>, <BB#9>; CPURegs:%vreg17
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#9(4)

BB#4: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#3 BB#4
	%vreg45<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg45
	%vreg46<def> = ADDiu %vreg45<kill>, -1; CPURegs:%vreg46,%vreg45
	ST %vreg46, <fi#5>, 0; mem:ST4[%j] CPURegs:%vreg46
	%vreg48<def> = SHL %vreg46, %vreg9; CPURegs:%vreg48,%vreg46,%vreg9
	%vreg49<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg49
	%vreg50<def> = ADDu %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	%vreg51<def> = LD %vreg50<kill>, 0; mem:LD4[%arrayidx3] CPURegs:%vreg51,%vreg50
	%vreg52<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg52
	%vreg53<def> = GT %vreg51<kill>, %vreg52<kill>; CPURegs:%vreg53,%vreg51,%vreg52
	JC %vreg53<kill>, <BB#4>; CPURegs:%vreg53
	Jmp <BB#5>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#5: derived from LLVM BB %while.cond6
    Predecessors according to CFG: BB#4 BB#6
	%vreg54<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg54
	%vreg55<def> = ADDiu %vreg54<kill>, 1; CPURegs:%vreg55,%vreg54
	ST %vreg55, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg55
	%vreg56<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg56
	%vreg57<def> = GE %vreg55, %vreg56<kill>; CPURegs:%vreg57,%vreg55,%vreg56
	JC %vreg57<kill>, <BB#7>; CPURegs:%vreg57
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#7(4)

BB#6: derived from LLVM BB %while.body8
    Predecessors according to CFG: BB#5
	%vreg59<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg59
	%vreg60<def> = SHL %vreg59<kill>, %vreg9; CPURegs:%vreg60,%vreg59,%vreg9
	%vreg61<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg61
	%vreg62<def> = ADDu %vreg61<kill>, %vreg60<kill>; CPURegs:%vreg62,%vreg61,%vreg60
	%vreg63<def> = LD %vreg62<kill>, 0; mem:LD4[%arrayidx9] CPURegs:%vreg63,%vreg62
	%vreg64<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg64
	%vreg65<def> = LT %vreg63<kill>, %vreg64<kill>; CPURegs:%vreg65,%vreg63,%vreg64
	JC %vreg65<kill>, <BB#5>; CPURegs:%vreg65
	Jmp <BB#7>
    Successors according to CFG: BB#7(4) BB#5(124)

BB#7: derived from LLVM BB %while.end13
    Predecessors according to CFG: BB#5 BB#6
	%vreg66<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg66
	%vreg67<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg67
	%vreg68<def> = GE %vreg67<kill>, %vreg66<kill>; CPURegs:%vreg68,%vreg67,%vreg66
	JC %vreg68<kill>, <BB#3>; CPURegs:%vreg68
	Jmp <BB#8>
    Successors according to CFG: BB#8(124) BB#3(124)

BB#8: derived from LLVM BB %if.then15
    Predecessors according to CFG: BB#7
	%vreg70<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg70
	%vreg71<def> = SHL %vreg70<kill>, %vreg9; CPURegs:%vreg71,%vreg70,%vreg9
	%vreg72<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg72
	%vreg73<def> = ADDu %vreg72<kill>, %vreg71<kill>; CPURegs:%vreg73,%vreg72,%vreg71
	%vreg74<def> = LD %vreg73<kill>, 0; mem:LD4[%arrayidx16] CPURegs:%vreg74,%vreg73
	ST %vreg74<kill>, <fi#7>, 0; mem:ST4[%temp] CPURegs:%vreg74
	%vreg75<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg75
	%vreg76<def> = SHL %vreg75<kill>, %vreg9; CPURegs:%vreg76,%vreg75,%vreg9
	%vreg77<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg77
	%vreg78<def> = ADDu %vreg77, %vreg76<kill>; CPURegs:%vreg78,%vreg77,%vreg76
	%vreg79<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg79
	%vreg80<def> = SHL %vreg79<kill>, %vreg9; CPURegs:%vreg80,%vreg79,%vreg9
	%vreg81<def> = ADDu %vreg77, %vreg80<kill>; CPURegs:%vreg81,%vreg77,%vreg80
	%vreg82<def> = LD %vreg81<kill>, 0; mem:LD4[%arrayidx17] CPURegs:%vreg82,%vreg81
	ST %vreg82<kill>, %vreg78<kill>, 0; mem:ST4[%arrayidx18] CPURegs:%vreg82,%vreg78
	%vreg83<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg83
	%vreg84<def> = SHL %vreg83<kill>, %vreg9; CPURegs:%vreg84,%vreg83,%vreg9
	%vreg85<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg85
	%vreg86<def> = ADDu %vreg85<kill>, %vreg84<kill>; CPURegs:%vreg86,%vreg85,%vreg84
	%vreg87<def> = LD <fi#7>, 0; mem:LD4[%temp] CPURegs:%vreg87
	ST %vreg87<kill>, %vreg86<kill>, 0; mem:ST4[%arrayidx19] CPURegs:%vreg87,%vreg86
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#9: derived from LLVM BB %while.end21
    Predecessors according to CFG: BB#3
	%vreg19<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg19
	%vreg20<def> = SHL %vreg19<kill>, %vreg9; CPURegs:%vreg20,%vreg19,%vreg9
	%vreg21<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg21
	%vreg22<def> = ADDu %vreg21, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	%vreg23<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg23
	%vreg24<def> = SHL %vreg23<kill>, %vreg9; CPURegs:%vreg24,%vreg23,%vreg9
	%vreg25<def> = ADDu %vreg21, %vreg24<kill>; CPURegs:%vreg25,%vreg21,%vreg24
	%vreg26<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx22] CPURegs:%vreg26,%vreg25
	ST %vreg26<kill>, %vreg22<kill>, 0; mem:ST4[%arrayidx23] CPURegs:%vreg26,%vreg22
	%vreg27<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg27
	%vreg28<def> = SHL %vreg27<kill>, %vreg9; CPURegs:%vreg28,%vreg27,%vreg9
	%vreg29<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg29
	%vreg30<def> = ADDu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg31
	ST %vreg31<kill>, %vreg30<kill>, 0; mem:ST4[%arrayidx24] CPURegs:%vreg31,%vreg30
	%vreg32<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg32
	%vreg33<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg33
	%vreg34<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg34
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg35<def> = ADDiu %vreg34<kill>, -1; CPURegs:%vreg35,%vreg34
	%vreg36<def> = COPY %SP; CPURegs:%vreg36
	ST %vreg35<kill>, %vreg36, 8; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg36
	%A0<def> = COPY %vreg33; CPURegs:%vreg33
	%A1<def> = COPY %vreg32; CPURegs:%vreg32
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg38<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg38
	%vreg39<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg39
	%vreg40<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg40
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg41<def> = COPY %SP; CPURegs:%vreg41
	ST %vreg40<kill>, %vreg41, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg41
	%vreg42<def> = ADDiu %vreg39<kill>, 1; CPURegs:%vreg42,%vreg39
	%A0<def> = COPY %vreg38; CPURegs:%vreg38
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg44<def> = MovGR %ZERO, 0; CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg44
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#1
	%vreg89<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg89
	%V0<def> = COPY %vreg89; CPURegs:%vreg89
	RetLR %V0<imp-use>

# End machine code for function qsort.


#####==========stderr_obj==========#####:
# Machine code for function qsort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%beg.addr] CPURegs:%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg2, %vreg3<kill>; CPURegs:%vreg4,%vreg2,%vreg3
	%vreg5<def> = LTI %vreg4<kill>, 1; CPURegs:%vreg5,%vreg4
	JNC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(12) BB#2(20)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg88<def> = MovGR %ZERO, -1; CPURegs:%vreg88
	ST %vreg88<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg88
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg6
	ST %vreg6<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg6
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	%vreg8<def> = ADDiu %vreg7<kill>, 1; CPURegs:%vreg8,%vreg7
	ST %vreg8<kill>, <fi#5>, 0; mem:ST4[%j] CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 2; CPURegs:%vreg9
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg10
	%vreg11<def> = SHL %vreg10<kill>, %vreg9; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg12
	%vreg13<def> = ADDu %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg13
	ST %vreg14<kill>, <fi#6>, 0; mem:ST4[%pivot] CPURegs:%vreg14
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#7 BB#8
	%vreg15<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg15
	%vreg16<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = GE %vreg16<kill>, %vreg15<kill>; CPURegs:%vreg17,%vreg16,%vreg15
	JC %vreg17<kill>, <BB#9>; CPURegs:%vreg17
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#9(4)

BB#4: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#3 BB#4
	%vreg45<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg45
	%vreg46<def> = ADDiu %vreg45<kill>, -1; CPURegs:%vreg46,%vreg45
	ST %vreg46, <fi#5>, 0; mem:ST4[%j] CPURegs:%vreg46
	%vreg48<def> = SHL %vreg46, %vreg9; CPURegs:%vreg48,%vreg46,%vreg9
	%vreg49<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg49
	%vreg50<def> = ADDu %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	%vreg51<def> = LD %vreg50<kill>, 0; mem:LD4[%arrayidx3] CPURegs:%vreg51,%vreg50
	%vreg52<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg52
	%vreg53<def> = GT %vreg51<kill>, %vreg52<kill>; CPURegs:%vreg53,%vreg51,%vreg52
	JC %vreg53<kill>, <BB#4>; CPURegs:%vreg53
	Jmp <BB#5>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#5: derived from LLVM BB %while.cond6
    Predecessors according to CFG: BB#4 BB#6
	%vreg54<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg54
	%vreg55<def> = ADDiu %vreg54<kill>, 1; CPURegs:%vreg55,%vreg54
	ST %vreg55, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg55
	%vreg56<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg56
	%vreg57<def> = GE %vreg55, %vreg56<kill>; CPURegs:%vreg57,%vreg55,%vreg56
	JC %vreg57<kill>, <BB#7>; CPURegs:%vreg57
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#7(4)

BB#6: derived from LLVM BB %while.body8
    Predecessors according to CFG: BB#5
	%vreg59<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg59
	%vreg60<def> = SHL %vreg59<kill>, %vreg9; CPURegs:%vreg60,%vreg59,%vreg9
	%vreg61<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg61
	%vreg62<def> = ADDu %vreg61<kill>, %vreg60<kill>; CPURegs:%vreg62,%vreg61,%vreg60
	%vreg63<def> = LD %vreg62<kill>, 0; mem:LD4[%arrayidx9] CPURegs:%vreg63,%vreg62
	%vreg64<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg64
	%vreg65<def> = LT %vreg63<kill>, %vreg64<kill>; CPURegs:%vreg65,%vreg63,%vreg64
	JC %vreg65<kill>, <BB#5>; CPURegs:%vreg65
	Jmp <BB#7>
    Successors according to CFG: BB#7(4) BB#5(124)

BB#7: derived from LLVM BB %while.end13
    Predecessors according to CFG: BB#5 BB#6
	%vreg66<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg66
	%vreg67<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg67
	%vreg68<def> = GE %vreg67<kill>, %vreg66<kill>; CPURegs:%vreg68,%vreg67,%vreg66
	JC %vreg68<kill>, <BB#3>; CPURegs:%vreg68
	Jmp <BB#8>
    Successors according to CFG: BB#8(124) BB#3(124)

BB#8: derived from LLVM BB %if.then15
    Predecessors according to CFG: BB#7
	%vreg70<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg70
	%vreg71<def> = SHL %vreg70<kill>, %vreg9; CPURegs:%vreg71,%vreg70,%vreg9
	%vreg72<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg72
	%vreg73<def> = ADDu %vreg72<kill>, %vreg71<kill>; CPURegs:%vreg73,%vreg72,%vreg71
	%vreg74<def> = LD %vreg73<kill>, 0; mem:LD4[%arrayidx16] CPURegs:%vreg74,%vreg73
	ST %vreg74<kill>, <fi#7>, 0; mem:ST4[%temp] CPURegs:%vreg74
	%vreg75<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg75
	%vreg76<def> = SHL %vreg75<kill>, %vreg9; CPURegs:%vreg76,%vreg75,%vreg9
	%vreg77<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg77
	%vreg78<def> = ADDu %vreg77, %vreg76<kill>; CPURegs:%vreg78,%vreg77,%vreg76
	%vreg79<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg79
	%vreg80<def> = SHL %vreg79<kill>, %vreg9; CPURegs:%vreg80,%vreg79,%vreg9
	%vreg81<def> = ADDu %vreg77, %vreg80<kill>; CPURegs:%vreg81,%vreg77,%vreg80
	%vreg82<def> = LD %vreg81<kill>, 0; mem:LD4[%arrayidx17] CPURegs:%vreg82,%vreg81
	ST %vreg82<kill>, %vreg78<kill>, 0; mem:ST4[%arrayidx18] CPURegs:%vreg82,%vreg78
	%vreg83<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg83
	%vreg84<def> = SHL %vreg83<kill>, %vreg9; CPURegs:%vreg84,%vreg83,%vreg9
	%vreg85<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg85
	%vreg86<def> = ADDu %vreg85<kill>, %vreg84<kill>; CPURegs:%vreg86,%vreg85,%vreg84
	%vreg87<def> = LD <fi#7>, 0; mem:LD4[%temp] CPURegs:%vreg87
	ST %vreg87<kill>, %vreg86<kill>, 0; mem:ST4[%arrayidx19] CPURegs:%vreg87,%vreg86
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#9: derived from LLVM BB %while.end21
    Predecessors according to CFG: BB#3
	%vreg19<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg19
	%vreg20<def> = SHL %vreg19<kill>, %vreg9; CPURegs:%vreg20,%vreg19,%vreg9
	%vreg21<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg21
	%vreg22<def> = ADDu %vreg21, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	%vreg23<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg23
	%vreg24<def> = SHL %vreg23<kill>, %vreg9; CPURegs:%vreg24,%vreg23,%vreg9
	%vreg25<def> = ADDu %vreg21, %vreg24<kill>; CPURegs:%vreg25,%vreg21,%vreg24
	%vreg26<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx22] CPURegs:%vreg26,%vreg25
	ST %vreg26<kill>, %vreg22<kill>, 0; mem:ST4[%arrayidx23] CPURegs:%vreg26,%vreg22
	%vreg27<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg27
	%vreg28<def> = SHL %vreg27<kill>, %vreg9; CPURegs:%vreg28,%vreg27,%vreg9
	%vreg29<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg29
	%vreg30<def> = ADDu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#6>, 0; mem:LD4[%pivot] CPURegs:%vreg31
	ST %vreg31<kill>, %vreg30<kill>, 0; mem:ST4[%arrayidx24] CPURegs:%vreg31,%vreg30
	%vreg32<def> = LD <fi#2>, 0; mem:LD4[%beg.addr] CPURegs:%vreg32
	%vreg33<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg33
	%vreg34<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg34
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg35<def> = ADDiu %vreg34<kill>, -1; CPURegs:%vreg35,%vreg34
	%vreg36<def> = COPY %SP; CPURegs:%vreg36
	ST %vreg35<kill>, %vreg36, 8; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg36
	%A0<def> = COPY %vreg33; CPURegs:%vreg33
	%A1<def> = COPY %vreg32; CPURegs:%vreg32
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg38<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg38
	%vreg39<def> = LD <fi#5>, 0; mem:LD4[%j] CPURegs:%vreg39
	%vreg40<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg40
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg41<def> = COPY %SP; CPURegs:%vreg41
	ST %vreg40<kill>, %vreg41, 8; mem:ST4[<unknown>] CPURegs:%vreg40,%vreg41
	%vreg42<def> = ADDiu %vreg39<kill>, 1; CPURegs:%vreg42,%vreg39
	%A0<def> = COPY %vreg38; CPURegs:%vreg38
	%A1<def> = COPY %vreg42; CPURegs:%vreg42
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg44<def> = MovGR %ZERO, 0; CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg44
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#1
	%vreg89<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg89
	%V0<def> = COPY %vreg89; CPURegs:%vreg89
	RetLR %V0<imp-use>

# End machine code for function qsort.

