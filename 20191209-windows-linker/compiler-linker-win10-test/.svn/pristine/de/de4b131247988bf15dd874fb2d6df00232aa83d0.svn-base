
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name argument_fir.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/argument_fir.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/argument_fir.ll -x c ./testcase_8slots/argument_fir.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=204, align=4, at location [SP]
  fi#1: size=204, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg0<def> = COPY %SP; CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 204; CPURegs:%vreg1
	ST %vreg1, %vreg0, 8; mem:ST4[<unknown>] CPURegs:%vreg1,%vreg0
	%vreg2<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg2
	%vreg3<def,tied1> = MovIGL %vreg2<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg3,%vreg2
	%vreg4<def> = LEA <fi#0>, 0; CPURegs:%vreg4
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <es:memcpy>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %SP; CPURegs:%vreg5
	ST %vreg1, %vreg5, 8; mem:ST4[<unknown>] CPURegs:%vreg1,%vreg5
	%vreg6<def> = LEA <fi#1>, 0; CPURegs:%vreg6
	%vreg7<def> = MovGR %ZERO, 0; CPURegs:%vreg7
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <es:memset>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %SP; CPURegs:%vreg8
	ST %vreg6, %vreg8, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg8
	%vreg9<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg10,%vreg9
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@fir>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function fir: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@nSamples>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@nSamples>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg0<def> = LD %vreg12<kill>, 0; mem:LD4[@nSamples](tbaa=<badref>) CPURegs:%vreg0,%vreg12
	%vreg13<def> = LTI %vreg0, 1; CPURegs:%vreg13,%vreg0
	JNC %vreg13<kill>, <BB#2>; CPURegs:%vreg13
	Jmp <BB#4>
    Successors according to CFG: BB#2(20) BB#4(12)

BB#1: derived from LLVM BB %while.cond.loopexit
    Predecessors according to CFG: BB#3
	%vreg29<def> = MovGR %ZERO, 1; CPURegs:%vreg29
	%vreg30<def> = LT %vreg2, %vreg29<kill>; CPURegs:%vreg30,%vreg2,%vreg29
	JC %vreg30<kill>, <BB#4>; CPURegs:%vreg30
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %while.cond1.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg0, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg0,%vreg2
	%vreg2<def> = ADDiu %vreg1, -1; CPURegs:%vreg2,%vreg1
	%vreg15<def> = MovGR %ZERO, 2; CPURegs:%vreg15
	%vreg16<def> = SHL %vreg2, %vreg15<kill>; CPURegs:%vreg16,%vreg2,%vreg15
	%vreg3<def> = ADDu %vreg10, %vreg16<kill>; CPURegs:%vreg3,%vreg10,%vreg16
	%vreg14<def> = MovGR %ZERO, 0; CPURegs:%vreg14
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.body3
    Predecessors according to CFG: BB#2 BB#3
	%vreg4<def> = PHI %vreg14, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg4,%vreg14,%vreg5
	%vreg17<def> = SUBu %vreg2, %vreg4; CPURegs:%vreg17,%vreg2,%vreg4
	%vreg18<def> = MovGR %ZERO, 2; CPURegs:%vreg18
	%vreg19<def> = SHL %vreg17<kill>, %vreg18; CPURegs:%vreg19,%vreg17,%vreg18
	%vreg20<def> = ADDu %vreg9, %vreg19<kill>; CPURegs:%vreg20,%vreg9,%vreg19
	%vreg21<def> = SHL %vreg4, %vreg18; CPURegs:%vreg21,%vreg4,%vreg18
	%vreg22<def> = ADDu %vreg8, %vreg21<kill>; CPURegs:%vreg22,%vreg8,%vreg21
	%vreg23<def> = LD %vreg22<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg20<kill>, 0; mem:LD4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg24,%vreg20
	%vreg25<def> = MUL32 %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	%vreg26<def> = LD %vreg3, 0; mem:LD4[%arrayidx6](tbaa=<badref>) CPURegs:%vreg26,%vreg3
	%vreg27<def> = ADDu %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	ST %vreg27<kill>, %vreg3, 0; mem:ST4[%arrayidx6](tbaa=<badref>) CPURegs:%vreg27,%vreg3
	%vreg5<def> = ADDiu %vreg4, 1; CPURegs:%vreg5,%vreg4
	%vreg28<def> = EQI %vreg5, 16; CPURegs:%vreg28,%vreg5
	JC %vreg28<kill>, <BB#1>; CPURegs:%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#1(4) BB#3(124)

BB#4: derived from LLVM BB %while.end7
    Predecessors according to CFG: BB#0 BB#1
	RetLR

# End machine code for function fir.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=204, align=4, at location [SP]
  fi#1: size=204, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg0<def> = COPY %SP; CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 204; CPURegs:%vreg1
	ST %vreg1, %vreg0, 8; mem:ST4[<unknown>] CPURegs:%vreg1,%vreg0
	%vreg2<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg2
	%vreg3<def,tied1> = MovIGL %vreg2<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg3,%vreg2
	%vreg4<def> = LEA <fi#0>, 0; CPURegs:%vreg4
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <es:memcpy>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %SP; CPURegs:%vreg5
	ST %vreg1, %vreg5, 8; mem:ST4[<unknown>] CPURegs:%vreg1,%vreg5
	%vreg6<def> = LEA <fi#1>, 0; CPURegs:%vreg6
	%vreg7<def> = MovGR %ZERO, 0; CPURegs:%vreg7
	%A0<def> = COPY %vreg6; CPURegs:%vreg6
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <es:memset>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %SP; CPURegs:%vreg8
	ST %vreg6, %vreg8, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg8
	%vreg9<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg10,%vreg9
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	%A1<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@fir>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function fir: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg6, %A1 in %vreg7

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg7<def> = COPY %A1; CPURegs:%vreg7
	%vreg6<def> = COPY %A0; CPURegs:%vreg6
	%vreg9<def> = COPY %vreg7; CPURegs:%vreg9,%vreg7
	%vreg8<def> = COPY %vreg6; CPURegs:%vreg8,%vreg6
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@nSamples>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@nSamples>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg0<def> = LD %vreg12<kill>, 0; mem:LD4[@nSamples](tbaa=<badref>) CPURegs:%vreg0,%vreg12
	%vreg13<def> = LTI %vreg0, 1; CPURegs:%vreg13,%vreg0
	JNC %vreg13<kill>, <BB#2>; CPURegs:%vreg13
	Jmp <BB#4>
    Successors according to CFG: BB#2(20) BB#4(12)

BB#1: derived from LLVM BB %while.cond.loopexit
    Predecessors according to CFG: BB#3
	%vreg29<def> = MovGR %ZERO, 1; CPURegs:%vreg29
	%vreg30<def> = LT %vreg2, %vreg29<kill>; CPURegs:%vreg30,%vreg2,%vreg29
	JC %vreg30<kill>, <BB#4>; CPURegs:%vreg30
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %while.cond1.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg0, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg0,%vreg2
	%vreg2<def> = ADDiu %vreg1, -1; CPURegs:%vreg2,%vreg1
	%vreg15<def> = MovGR %ZERO, 2; CPURegs:%vreg15
	%vreg16<def> = SHL %vreg2, %vreg15<kill>; CPURegs:%vreg16,%vreg2,%vreg15
	%vreg3<def> = ADDu %vreg10, %vreg16<kill>; CPURegs:%vreg3,%vreg10,%vreg16
	%vreg14<def> = MovGR %ZERO, 0; CPURegs:%vreg14
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.body3
    Predecessors according to CFG: BB#2 BB#3
	%vreg4<def> = PHI %vreg14, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg4,%vreg14,%vreg5
	%vreg17<def> = SUBu %vreg2, %vreg4; CPURegs:%vreg17,%vreg2,%vreg4
	%vreg18<def> = MovGR %ZERO, 2; CPURegs:%vreg18
	%vreg19<def> = SHL %vreg17<kill>, %vreg18; CPURegs:%vreg19,%vreg17,%vreg18
	%vreg20<def> = ADDu %vreg9, %vreg19<kill>; CPURegs:%vreg20,%vreg9,%vreg19
	%vreg21<def> = SHL %vreg4, %vreg18; CPURegs:%vreg21,%vreg4,%vreg18
	%vreg22<def> = ADDu %vreg8, %vreg21<kill>; CPURegs:%vreg22,%vreg8,%vreg21
	%vreg23<def> = LD %vreg22<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg20<kill>, 0; mem:LD4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg24,%vreg20
	%vreg25<def> = MUL32 %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	%vreg26<def> = LD %vreg3, 0; mem:LD4[%arrayidx6](tbaa=<badref>) CPURegs:%vreg26,%vreg3
	%vreg27<def> = ADDu %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	ST %vreg27<kill>, %vreg3, 0; mem:ST4[%arrayidx6](tbaa=<badref>) CPURegs:%vreg27,%vreg3
	%vreg5<def> = ADDiu %vreg4, 1; CPURegs:%vreg5,%vreg4
	%vreg28<def> = EQI %vreg5, 16; CPURegs:%vreg28,%vreg5
	JC %vreg28<kill>, <BB#1>; CPURegs:%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#1(4) BB#3(124)

BB#4: derived from LLVM BB %while.end7
    Predecessors according to CFG: BB#0 BB#1
	RetLR

# End machine code for function fir.

