
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovIGH %ZERO, <ga:@lowerbound>[TF=3]; CPURegs:%vreg0
	%vreg1<def,tied1> = MovIGL %vreg0<tied0>, <ga:@lowerbound>[TF=4]; CPURegs:%vreg1,%vreg0
	%vreg2<def> = LD %vreg1<kill>, 0; mem:LD4[@lowerbound] CPURegs:%vreg2,%vreg1
	ST %vreg2<kill>, <fi#0>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 255; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = SHL %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	%vreg11<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = ADDu %vreg12<kill>, %vreg10<kill>; CPURegs:%vreg13,%vreg12,%vreg10
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg13
	%vreg15<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg16, 0; mem:LD4[@sum] CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg14<kill>; CPURegs:%vreg18,%vreg17,%vreg14
	ST %vreg18<kill>, %vreg16, 0; mem:ST4[@sum] CPURegs:%vreg18,%vreg16
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg19<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg19
	%vreg20<def> = ADDiu %vreg19<kill>, 2; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%i] CPURegs:%vreg20
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg6,%vreg5
	%vreg7<def> = LD %vreg6<kill>, 0; mem:LD4[@sum] CPURegs:%vreg7,%vreg6
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function add.


#####==========stderr_obj==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovIGH %ZERO, <ga:@lowerbound>[TF=3]; CPURegs:%vreg0
	%vreg1<def,tied1> = MovIGL %vreg0<tied0>, <ga:@lowerbound>[TF=4]; CPURegs:%vreg1,%vreg0
	%vreg2<def> = LD %vreg1<kill>, 0; mem:LD4[@lowerbound] CPURegs:%vreg2,%vreg1
	ST %vreg2<kill>, <fi#0>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 255; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = SHL %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	%vreg11<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = ADDu %vreg12<kill>, %vreg10<kill>; CPURegs:%vreg13,%vreg12,%vreg10
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg13
	%vreg15<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg16, 0; mem:LD4[@sum] CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg14<kill>; CPURegs:%vreg18,%vreg17,%vreg14
	ST %vreg18<kill>, %vreg16, 0; mem:ST4[@sum] CPURegs:%vreg18,%vreg16
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg19<def> = LD <fi#0>, 0; mem:LD4[%i] CPURegs:%vreg19
	%vreg20<def> = ADDiu %vreg19<kill>, 2; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%i] CPURegs:%vreg20
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg5
	%vreg6<def,tied1> = MovIGL %vreg5<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg6,%vreg5
	%vreg7<def> = LD %vreg6<kill>, 0; mem:LD4[@sum] CPURegs:%vreg7,%vreg6
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function add.

