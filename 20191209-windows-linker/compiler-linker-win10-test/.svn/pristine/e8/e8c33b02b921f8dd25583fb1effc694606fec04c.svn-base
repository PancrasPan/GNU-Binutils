
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name externbound_sumarray.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/externbound_sumarray.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/externbound_sumarray.ll -x c ./testcase_8slots/externbound_sumarray.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg7<def> = MovIGH %ZERO, <ga:@nTaps>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@nTaps>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD %vreg8<kill>, 0; mem:LD4[@nTaps](tbaa=<badref>) CPURegs:%vreg9,%vreg8
	%vreg10<def> = MovGR %ZERO, 1; CPURegs:%vreg10
	%vreg11<def> = LT %vreg9<kill>, %vreg10<kill>; CPURegs:%vreg11,%vreg9,%vreg10
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	JC %vreg11<kill>, <BB#3>; CPURegs:%vreg11
	Jmp <BB#1>
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: derived from LLVM BB %while.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg12<def> = MovGR %ZERO, 0; CPURegs:%vreg12
	%vreg13<def> = MovIGH %ZERO, <ga:@nTaps>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@nTaps>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg0<def> = LD %vreg14<kill>, 0; mem:LD4[@nTaps](tbaa=<badref>) CPURegs:%vreg0,%vreg14
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg12, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg1,%vreg12,%vreg3
	%vreg2<def> = PHI %vreg12, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg2,%vreg12,%vreg4
	%vreg15<def> = MovGR %ZERO, 2; CPURegs:%vreg15
	%vreg16<def> = SHL %vreg2, %vreg15<kill>; CPURegs:%vreg16,%vreg2,%vreg15
	%vreg17<def> = MovIGH %ZERO, <ga:@y>[TF=3]; CPURegs:%vreg17
	%vreg18<def,tied1> = MovIGL %vreg17<tied0>, <ga:@y>[TF=4]; CPURegs:%vreg18,%vreg17
	%vreg19<def> = ADDu %vreg18<kill>, %vreg16; CPURegs:%vreg19,%vreg18,%vreg16
	%vreg20<def> = MovIGH %ZERO, <ga:@x>[TF=3]; CPURegs:%vreg20
	%vreg21<def,tied1> = MovIGL %vreg20<tied0>, <ga:@x>[TF=4]; CPURegs:%vreg21,%vreg20
	%vreg22<def> = ADDu %vreg21<kill>, %vreg16; CPURegs:%vreg22,%vreg21,%vreg16
	%vreg23<def> = LD %vreg22, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg19, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg24,%vreg19
	%vreg25<def> = ADDu %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	ST %vreg25, %vreg19, 0; mem:ST4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg25,%vreg19
	%vreg26<def> = LD %vreg22, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg26,%vreg22
	%vreg27<def> = MUL32 %vreg26<kill>, %vreg25; CPURegs:%vreg27,%vreg26,%vreg25
	%vreg3<def> = ADDu %vreg27<kill>, %vreg1; CPURegs:%vreg3,%vreg27,%vreg1
	%vreg4<def> = ADDiu %vreg2, 1; CPURegs:%vreg4,%vreg2
	%vreg28<def> = LT %vreg4, %vreg0; CPURegs:%vreg28,%vreg4,%vreg0
	JC %vreg28<kill>, <BB#2>; CPURegs:%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg5<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#2>; CPURegs:%vreg5,%vreg6,%vreg3
	%V0<def> = COPY %vreg5; CPURegs:%vreg5
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg7<def> = MovIGH %ZERO, <ga:@nTaps>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@nTaps>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD %vreg8<kill>, 0; mem:LD4[@nTaps](tbaa=<badref>) CPURegs:%vreg9,%vreg8
	%vreg10<def> = MovGR %ZERO, 1; CPURegs:%vreg10
	%vreg11<def> = LT %vreg9<kill>, %vreg10<kill>; CPURegs:%vreg11,%vreg9,%vreg10
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	JC %vreg11<kill>, <BB#3>; CPURegs:%vreg11
	Jmp <BB#1>
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: derived from LLVM BB %while.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg12<def> = MovGR %ZERO, 0; CPURegs:%vreg12
	%vreg13<def> = MovIGH %ZERO, <ga:@nTaps>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@nTaps>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg0<def> = LD %vreg14<kill>, 0; mem:LD4[@nTaps](tbaa=<badref>) CPURegs:%vreg0,%vreg14
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg12, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg1,%vreg12,%vreg3
	%vreg2<def> = PHI %vreg12, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg2,%vreg12,%vreg4
	%vreg15<def> = MovGR %ZERO, 2; CPURegs:%vreg15
	%vreg16<def> = SHL %vreg2, %vreg15<kill>; CPURegs:%vreg16,%vreg2,%vreg15
	%vreg17<def> = MovIGH %ZERO, <ga:@y>[TF=3]; CPURegs:%vreg17
	%vreg18<def,tied1> = MovIGL %vreg17<tied0>, <ga:@y>[TF=4]; CPURegs:%vreg18,%vreg17
	%vreg19<def> = ADDu %vreg18<kill>, %vreg16; CPURegs:%vreg19,%vreg18,%vreg16
	%vreg20<def> = MovIGH %ZERO, <ga:@x>[TF=3]; CPURegs:%vreg20
	%vreg21<def,tied1> = MovIGL %vreg20<tied0>, <ga:@x>[TF=4]; CPURegs:%vreg21,%vreg20
	%vreg22<def> = ADDu %vreg21<kill>, %vreg16; CPURegs:%vreg22,%vreg21,%vreg16
	%vreg23<def> = LD %vreg22, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg19, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg24,%vreg19
	%vreg25<def> = ADDu %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	ST %vreg25, %vreg19, 0; mem:ST4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg25,%vreg19
	%vreg26<def> = LD %vreg22, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg26,%vreg22
	%vreg27<def> = MUL32 %vreg26<kill>, %vreg25; CPURegs:%vreg27,%vreg26,%vreg25
	%vreg3<def> = ADDu %vreg27<kill>, %vreg1; CPURegs:%vreg3,%vreg27,%vreg1
	%vreg4<def> = ADDiu %vreg2, 1; CPURegs:%vreg4,%vreg2
	%vreg28<def> = LT %vreg4, %vreg0; CPURegs:%vreg28,%vreg4,%vreg0
	JC %vreg28<kill>, <BB#2>; CPURegs:%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg5<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#2>; CPURegs:%vreg5,%vreg6,%vreg3
	%V0<def> = COPY %vreg5; CPURegs:%vreg5
	RetLR %V0<imp-use>

# End machine code for function main.

