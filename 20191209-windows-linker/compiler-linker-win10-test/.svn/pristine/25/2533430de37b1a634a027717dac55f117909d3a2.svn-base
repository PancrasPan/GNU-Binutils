
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%a.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%b.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#0>, 0; mem:LD4[%a.addr] CPURegs:%vreg2
	%vreg3<def> = ADDu %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetLR %V0<imp-use>

# End machine code for function sum.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=2, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 5; CPURegs:%vreg1
	STH %vreg1<kill>, <fi#1>, 0; mem:ST2[%k](align=4) CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 7; CPURegs:%vreg2
	STH %vreg2<kill>, <fi#2>, 0; mem:ST2[%m](align=4) CPURegs:%vreg2
	%vreg3<def> = LDHS <fi#1>, 0; mem:LD2[%k](align=4) CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg0, %vreg3<kill>; CPURegs:%vreg4,%vreg0,%vreg3
	%vreg5<def> = LDHS <fi#2>, 0; mem:LD2[%m](align=4) CPURegs:%vreg5
	%vreg6<def> = SUBu %vreg0, %vreg5<kill>; CPURegs:%vreg6,%vreg0,%vreg5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%a.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%b.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#0>, 0; mem:LD4[%a.addr] CPURegs:%vreg2
	%vreg3<def> = ADDu %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetLR %V0<imp-use>

# End machine code for function sum.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=2, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 5; CPURegs:%vreg1
	STH %vreg1<kill>, <fi#1>, 0; mem:ST2[%k](align=4) CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 7; CPURegs:%vreg2
	STH %vreg2<kill>, <fi#2>, 0; mem:ST2[%m](align=4) CPURegs:%vreg2
	%vreg3<def> = LDHS <fi#1>, 0; mem:LD2[%k](align=4) CPURegs:%vreg3
	%vreg4<def> = SUBu %vreg0, %vreg3<kill>; CPURegs:%vreg4,%vreg0,%vreg3
	%vreg5<def> = LDHS <fi#2>, 0; mem:LD2[%m](align=4) CPURegs:%vreg5
	%vreg6<def> = SUBu %vreg0, %vreg5<kill>; CPURegs:%vreg6,%vreg0,%vreg5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg6; CPURegs:%vreg6
	CALL <ga:@sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.

