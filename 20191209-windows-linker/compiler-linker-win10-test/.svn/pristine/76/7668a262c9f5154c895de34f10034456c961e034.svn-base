
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function check: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#0>, 0; mem:ST4[%Array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%start.addr] CPURegs:%vreg1
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 0; CPURegs:%vreg3
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%flag] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%start.addr] CPURegs:%vreg4
	ST %vreg4<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg4
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#4
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%end.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = GE %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#5>; CPURegs:%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#5(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = SHL %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%Array.addr] CPURegs:%vreg11
	%vreg12<def> = ADDu %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	%vreg13<def> = LD %vreg12, 4; mem:LD4[%arrayidx1] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg12
	%vreg15<def> = LE %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	JC %vreg15<kill>, <BB#4>; CPURegs:%vreg15
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg18<def> = MovGR %ZERO, -1; CPURegs:%vreg18
	ST %vreg18<kill>, <fi#3>, 0; mem:ST4[%flag] CPURegs:%vreg18
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg16<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	ST %vreg17<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%flag] CPURegs:%vreg19
	%V0<def> = COPY %vreg19; CPURegs:%vreg19
	RetLR %V0<imp-use>

# End machine code for function check.


#####==========stderr_obj==========#####:
# Machine code for function check: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#0>, 0; mem:ST4[%Array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%start.addr] CPURegs:%vreg1
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 0; CPURegs:%vreg3
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%flag] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%start.addr] CPURegs:%vreg4
	ST %vreg4<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg4
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#4
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%end.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = GE %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#5>; CPURegs:%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#5(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = SHL %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%Array.addr] CPURegs:%vreg11
	%vreg12<def> = ADDu %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	%vreg13<def> = LD %vreg12, 4; mem:LD4[%arrayidx1] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%arrayidx] CPURegs:%vreg14,%vreg12
	%vreg15<def> = LE %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	JC %vreg15<kill>, <BB#4>; CPURegs:%vreg15
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg18<def> = MovGR %ZERO, -1; CPURegs:%vreg18
	ST %vreg18<kill>, <fi#3>, 0; mem:ST4[%flag] CPURegs:%vreg18
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg16<def> = LD <fi#4>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	ST %vreg17<kill>, <fi#4>, 0; mem:ST4[%i] CPURegs:%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%flag] CPURegs:%vreg19
	%V0<def> = COPY %vreg19; CPURegs:%vreg19
	RetLR %V0<imp-use>

# End machine code for function check.

