
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, -1; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%b] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg4
	%vreg5<def> = LE %vreg4<kill>, %vreg3<kill>; CPURegs:%vreg5,%vreg4,%vreg3
	JC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#0
	ST %vreg1, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg1
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	ST %vreg0, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg0
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#2 BB#1
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, -1; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%b] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg4
	%vreg5<def> = LE %vreg4<kill>, %vreg3<kill>; CPURegs:%vreg5,%vreg4,%vreg3
	JC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#0
	ST %vreg1, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg1
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	ST %vreg0, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg0
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#2 BB#1
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.

