
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=16, align=16, at location [SP]
Constant Pool:
  cp#0: <i32 3, i32 3, i32 3, i32 3>, align=16
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%argc.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%argv.addr] CPURegs:%vreg1
	%vreg3<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <cp#0>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = VLOAD32 %vreg4<kill>, 0; mem:LD16[ConstantPool] CPU128Regs:%vreg5 CPURegs:%vreg4
	VSTORE32 %vreg5, <fi#3>, 0; mem:ST16[%vla] CPU128Regs:%vreg5
	%vreg6<def> = MovIGH %ZERO, <ga:@vgb>[TF=3]; CPURegs:%vreg6
	%vreg7<def,tied1> = MovIGL %vreg6<tied0>, <ga:@vgb>[TF=4]; CPURegs:%vreg7,%vreg6
	%vreg8<def> = VLOAD32 %vreg7<kill>, 0; mem:LD16[@vgb] CPU128Regs:%vreg8 CPURegs:%vreg7
	%vreg9<def> = VADD32 %vreg5, %vreg8<kill>; CPU128Regs:%vreg9,%vreg5,%vreg8
	VSTORE32 %vreg9<kill>, <fi#3>, 0; mem:ST16[%vla] CPU128Regs:%vreg9
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=16, align=16, at location [SP]
Constant Pool:
  cp#0: <i32 3, i32 3, i32 3, i32 3>, align=16
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%argc.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%argv.addr] CPURegs:%vreg1
	%vreg3<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <cp#0>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = VLOAD32 %vreg4<kill>, 0; mem:LD16[ConstantPool] CPU128Regs:%vreg5 CPURegs:%vreg4
	VSTORE32 %vreg5, <fi#3>, 0; mem:ST16[%vla] CPU128Regs:%vreg5
	%vreg6<def> = MovIGH %ZERO, <ga:@vgb>[TF=3]; CPURegs:%vreg6
	%vreg7<def,tied1> = MovIGL %vreg6<tied0>, <ga:@vgb>[TF=4]; CPURegs:%vreg7,%vreg6
	%vreg8<def> = VLOAD32 %vreg7<kill>, 0; mem:LD16[@vgb] CPU128Regs:%vreg8 CPURegs:%vreg7
	%vreg9<def> = VADD32 %vreg5, %vreg8<kill>; CPU128Regs:%vreg9,%vreg5,%vreg8
	VSTORE32 %vreg9<kill>, <fi#3>, 0; mem:ST16[%vla] CPU128Regs:%vreg9
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.

