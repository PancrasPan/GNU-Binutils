
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
  fi#4: size=64, align=64, at location [SP]
  fi#5: size=64, align=64, at location [SP]
  fi#6: size=64, align=64, at location [SP]
Constant Pool:
  cp#0: zeroinitializer, align=64
  cp#1: <i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, align=64
  cp#2: <i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15, i8 16, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, align=64
  cp#3: <i8 13, i8 14, i8 15, i8 16, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 1, i8 2, i8 3, i8 4, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, align=64

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <cp#0>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = VLOAD32 %vreg2<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg3 CPURegs:%vreg2
	VSTORE32 %vreg3<kill>, <fi#1>, 0; mem:ST64[%a] CPU512Regs:%vreg3
	%vreg4<def> = MovIGH %ZERO, <cp#1>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <cp#1>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg6 CPURegs:%vreg5
	VSTORE32 %vreg6<kill>, <fi#2>, 0; mem:ST64[%b] CPU512Regs:%vreg6
	%vreg7<def> = MovIGH %ZERO, <cp#2>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <cp#2>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = VLOAD8 %vreg8<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg9 CPURegs:%vreg8
	VSTORE8 %vreg9<kill>, <fi#3>, 0; mem:ST64[%h] CPU512Regs:%vreg9
	%vreg10<def> = MovIGH %ZERO, <cp#3>[TF=3]; CPURegs:%vreg10
	%vreg11<def,tied1> = MovIGL %vreg10<tied0>, <cp#3>[TF=4]; CPURegs:%vreg11,%vreg10
	%vreg12<def> = VLOAD8 %vreg11<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg12 CPURegs:%vreg11
	VSTORE8 %vreg12<kill>, <fi#4>, 0; mem:ST64[%i] CPU512Regs:%vreg12
	%vreg13<def> = VLOAD32 <fi#2>, 0; mem:LD64[%b] CPU512Regs:%vreg13
	%vreg14<def> = VLOAD32 <fi#1>, 0; mem:LD64[%a] CPU512Regs:%vreg14
	%vreg15<def> = VMAX40 %vreg14<kill>, %vreg13<kill>; CPU512Regs:%vreg15,%vreg14,%vreg13
	VSTORE32 %vreg15<kill>, <fi#5>, 0; mem:ST64[%c] CPU512Regs:%vreg15
	%vreg16<def> = VLOAD8 <fi#4>, 0; mem:LD64[%i] CPU512Regs:%vreg16
	%vreg17<def> = VLOAD8 <fi#3>, 0; mem:LD64[%h] CPU512Regs:%vreg17
	%vreg18<def> = VMAX10 %vreg17<kill>, %vreg16<kill>; CPU512Regs:%vreg18,%vreg17,%vreg16
	VSTORE8 %vreg18<kill>, <fi#6>, 0; mem:ST64[%j] CPU512Regs:%vreg18
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
  fi#4: size=64, align=64, at location [SP]
  fi#5: size=64, align=64, at location [SP]
  fi#6: size=64, align=64, at location [SP]
Constant Pool:
  cp#0: zeroinitializer, align=64
  cp#1: <i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, align=64
  cp#2: <i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15, i8 16, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, align=64
  cp#3: <i8 13, i8 14, i8 15, i8 16, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 1, i8 2, i8 3, i8 4, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, align=64

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <cp#0>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = VLOAD32 %vreg2<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg3 CPURegs:%vreg2
	VSTORE32 %vreg3<kill>, <fi#1>, 0; mem:ST64[%a] CPU512Regs:%vreg3
	%vreg4<def> = MovIGH %ZERO, <cp#1>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <cp#1>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg6 CPURegs:%vreg5
	VSTORE32 %vreg6<kill>, <fi#2>, 0; mem:ST64[%b] CPU512Regs:%vreg6
	%vreg7<def> = MovIGH %ZERO, <cp#2>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <cp#2>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = VLOAD8 %vreg8<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg9 CPURegs:%vreg8
	VSTORE8 %vreg9<kill>, <fi#3>, 0; mem:ST64[%h] CPU512Regs:%vreg9
	%vreg10<def> = MovIGH %ZERO, <cp#3>[TF=3]; CPURegs:%vreg10
	%vreg11<def,tied1> = MovIGL %vreg10<tied0>, <cp#3>[TF=4]; CPURegs:%vreg11,%vreg10
	%vreg12<def> = VLOAD8 %vreg11<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg12 CPURegs:%vreg11
	VSTORE8 %vreg12<kill>, <fi#4>, 0; mem:ST64[%i] CPU512Regs:%vreg12
	%vreg13<def> = VLOAD32 <fi#2>, 0; mem:LD64[%b] CPU512Regs:%vreg13
	%vreg14<def> = VLOAD32 <fi#1>, 0; mem:LD64[%a] CPU512Regs:%vreg14
	%vreg15<def> = VMAX40 %vreg14<kill>, %vreg13<kill>; CPU512Regs:%vreg15,%vreg14,%vreg13
	VSTORE32 %vreg15<kill>, <fi#5>, 0; mem:ST64[%c] CPU512Regs:%vreg15
	%vreg16<def> = VLOAD8 <fi#4>, 0; mem:LD64[%i] CPU512Regs:%vreg16
	%vreg17<def> = VLOAD8 <fi#3>, 0; mem:LD64[%h] CPU512Regs:%vreg17
	%vreg18<def> = VMAX10 %vreg17<kill>, %vreg16<kill>; CPU512Regs:%vreg18,%vreg17,%vreg16
	VSTORE8 %vreg18<kill>, <fi#6>, 0; mem:ST64[%j] CPU512Regs:%vreg18
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.

