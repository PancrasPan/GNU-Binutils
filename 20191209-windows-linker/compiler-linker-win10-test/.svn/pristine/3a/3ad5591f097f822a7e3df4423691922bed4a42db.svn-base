
#####==========stderr_mid==========#####:
./testcase_4slots/Intrinsic\func_vector.c:10:1: warning: control reaches end of non-void function [-Wreturn-type]
}
^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
# Machine code for function vsum: SSA
Frame Objects:
  fi#-1: size=64, align=8, fixed, at location [SP+64]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU512Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU512Regs:%vreg0
	%vreg2<def> = VLOAD32 <fi#-1>, 0; mem:LD64[FixedStack-1] CPU512Regs:%vreg2
	VSTORE32 %vreg0, <fi#1>, 0; mem:ST64[%v1.addr] CPU512Regs:%vreg0
	VSTORE32 %vreg1, <fi#2>, 0; mem:ST64[%v2.addr] CPU512Regs:%vreg1
	VSTORE32 %vreg2, <fi#3>, 0; mem:ST64[%v3.addr] CPU512Regs:%vreg2
	%vreg3<def> = VLOAD32 <fi#2>, 0; mem:LD64[%v2.addr] CPU512Regs:%vreg3
	%vreg4<def> = VADD32 %vreg3<kill>, %vreg2; CPU512Regs:%vreg4,%vreg3,%vreg2
	%vreg5<def> = VLOAD32 <fi#1>, 0; mem:LD64[%v1.addr] CPU512Regs:%vreg5
	%vreg6<def> = VADD32 %vreg4<kill>, %vreg5<kill>; CPU512Regs:%vreg6,%vreg4,%vreg5
	%vreg7<def> = MovIGH %ZERO, <ga:@init_vgb>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@init_vgb>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = VLOAD32 %vreg8, 0; mem:LD64[@init_vgb] CPU512Regs:%vreg9 CPURegs:%vreg8
	%vreg10<def> = VADD32 %vreg9<kill>, %vreg6<kill>; CPU512Regs:%vreg10,%vreg9,%vreg6
	VSTORE32 %vreg10<kill>, %vreg8, 0; mem:ST64[@init_vgb] CPU512Regs:%vreg10 CPURegs:%vreg8
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function vsum.


#####==========stderr_obj==========#####:
# Machine code for function vsum: SSA
Frame Objects:
  fi#-1: size=64, align=8, fixed, at location [SP+64]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
Function Live Ins: %VR2 in %vreg0, %VR3 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %VR2 %VR3
	%vreg1<def> = COPY %VR3; CPU512Regs:%vreg1
	%vreg0<def> = COPY %VR2; CPU512Regs:%vreg0
	%vreg2<def> = VLOAD32 <fi#-1>, 0; mem:LD64[FixedStack-1] CPU512Regs:%vreg2
	VSTORE32 %vreg0, <fi#1>, 0; mem:ST64[%v1.addr] CPU512Regs:%vreg0
	VSTORE32 %vreg1, <fi#2>, 0; mem:ST64[%v2.addr] CPU512Regs:%vreg1
	VSTORE32 %vreg2, <fi#3>, 0; mem:ST64[%v3.addr] CPU512Regs:%vreg2
	%vreg3<def> = VLOAD32 <fi#2>, 0; mem:LD64[%v2.addr] CPU512Regs:%vreg3
	%vreg4<def> = VADD32 %vreg3<kill>, %vreg2; CPU512Regs:%vreg4,%vreg3,%vreg2
	%vreg5<def> = VLOAD32 <fi#1>, 0; mem:LD64[%v1.addr] CPU512Regs:%vreg5
	%vreg6<def> = VADD32 %vreg4<kill>, %vreg5<kill>; CPU512Regs:%vreg6,%vreg4,%vreg5
	%vreg7<def> = MovIGH %ZERO, <ga:@init_vgb>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@init_vgb>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = VLOAD32 %vreg8, 0; mem:LD64[@init_vgb] CPU512Regs:%vreg9 CPURegs:%vreg8
	%vreg10<def> = VADD32 %vreg9<kill>, %vreg6<kill>; CPU512Regs:%vreg10,%vreg9,%vreg6
	VSTORE32 %vreg10<kill>, %vreg8, 0; mem:ST64[@init_vgb] CPU512Regs:%vreg10 CPURegs:%vreg8
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function vsum.

