
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%p_array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%p_size.addr] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 1; CPURegs:%vreg2
	%vreg3<def> = SRA %vreg1, %vreg2<kill>; CPURegs:%vreg3,%vreg1,%vreg2
	ST %vreg3<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg3
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	ST %vreg4, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg4
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#7
	%vreg5<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg5
	%vreg6<def> = LTI %vreg5<kill>, 255; CPURegs:%vreg6,%vreg5
	JC %vreg6, <BB#2>; CPURegs:%vreg6
    Successors according to CFG: BB#2(124) BB#10(4)

BB#10: 
    Predecessors according to CFG: BB#1
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg18<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg18
	ST %vreg18<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg18
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond1
    Predecessors according to CFG: BB#2 BB#4
	%vreg20<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg20
	%vreg21<def> = LT %vreg20<kill>, %vreg4; CPURegs:%vreg21,%vreg20,%vreg4
	JC %vreg21<kill>, <BB#5>; CPURegs:%vreg21
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#3
	%vreg38<def> = MovGR %ZERO, 2; CPURegs:%vreg38
	%vreg39<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg39
	%vreg40<def> = SHL %vreg39<kill>, %vreg38<kill>; CPURegs:%vreg40,%vreg39,%vreg38
	%vreg41<def> = LD <fi#0>, 0; mem:LD4[%p_array.addr] CPURegs:%vreg41
	%vreg42<def> = ADDu %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LD %vreg42<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg43,%vreg42
	%vreg44<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg44
	%vreg45<def,tied1> = MovIGL %vreg44<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg45,%vreg44
	%vreg46<def> = LD %vreg45, 0; mem:LD4[@sum] CPURegs:%vreg46,%vreg45
	%vreg47<def> = ADDu %vreg46<kill>, %vreg43<kill>; CPURegs:%vreg47,%vreg46,%vreg43
	ST %vreg47<kill>, %vreg45, 0; mem:ST4[@sum] CPURegs:%vreg47,%vreg45
	%vreg48<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg48
	%vreg49<def> = ADDiu %vreg48<kill>, -2; CPURegs:%vreg49,%vreg48
	ST %vreg49<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg49
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#3 BB#6
	%vreg22<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg22
	%vreg23<def> = LTI %vreg22<kill>, 255; CPURegs:%vreg23,%vreg22
	JNC %vreg23<kill>, <BB#7>; CPURegs:%vreg23
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#7(4)

BB#6: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5
	%vreg26<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg26
	%vreg27<def> = ADDiu %vreg26, 1; CPURegs:%vreg27,%vreg26
	ST %vreg27<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg27
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = SHL %vreg26, %vreg28<kill>; CPURegs:%vreg29,%vreg26,%vreg28
	%vreg30<def> = MovIGH %ZERO, <ga:@ex_array>[TF=3]; CPURegs:%vreg30
	%vreg31<def,tied1> = MovIGL %vreg30<tied0>, <ga:@ex_array>[TF=4]; CPURegs:%vreg31,%vreg30
	%vreg32<def> = ADDu %vreg31<kill>, %vreg29<kill>; CPURegs:%vreg32,%vreg31,%vreg29
	%vreg33<def> = LD %vreg32<kill>, 0; mem:LD4[%arrayidx5] CPURegs:%vreg33,%vreg32
	%vreg34<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg34
	%vreg35<def,tied1> = MovIGL %vreg34<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg35,%vreg34
	%vreg36<def> = LD %vreg35, 0; mem:LD4[@sum] CPURegs:%vreg36,%vreg35
	%vreg37<def> = SUBu %vreg36<kill>, %vreg33<kill>; CPURegs:%vreg37,%vreg36,%vreg33
	ST %vreg37<kill>, %vreg35, 0; mem:ST4[@sum] CPURegs:%vreg37,%vreg35
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#7: derived from LLVM BB %for.inc7
    Predecessors according to CFG: BB#5
	%vreg24<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg24
	%vreg25<def> = ADDiu %vreg24<kill>, 1; CPURegs:%vreg25,%vreg24
	ST %vreg25<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg25
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#8: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#8 BB#10
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg7
	%vreg8<def> = ADDiu %vreg7, 1; CPURegs:%vreg8,%vreg7
	ST %vreg8<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg8
	%vreg9<def> = MovIGH %ZERO, <ga:@bound>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@bound>[TF=4]; CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD %vreg10<kill>, 0; mem:LD4[@bound] CPURegs:%vreg11,%vreg10
	%vreg12<def> = LT %vreg7, %vreg11<kill>; CPURegs:%vreg12,%vreg7,%vreg11
	JC %vreg12<kill>, <BB#8>; CPURegs:%vreg12
	Jmp <BB#9>
    Successors according to CFG: BB#8(124) BB#9(4)

BB#9: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#8
	%vreg13<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD %vreg14, 0; mem:LD4[@sum] CPURegs:%vreg15,%vreg14
	%vreg16<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = ADDu %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	ST %vreg17, %vreg14, 0; mem:ST4[@sum] CPURegs:%vreg17,%vreg14
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function add.


#####==========stderr_obj==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%p_array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%p_size.addr] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 1; CPURegs:%vreg2
	%vreg3<def> = SRA %vreg1, %vreg2<kill>; CPURegs:%vreg3,%vreg1,%vreg2
	ST %vreg3<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg3
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	ST %vreg4, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg4
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#7
	%vreg5<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg5
	%vreg6<def> = LTI %vreg5<kill>, 255; CPURegs:%vreg6,%vreg5
	JC %vreg6, <BB#2>; CPURegs:%vreg6
    Successors according to CFG: BB#2(124) BB#10(4)

BB#10: 
    Predecessors according to CFG: BB#1
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg18<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg18
	ST %vreg18<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg18
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond1
    Predecessors according to CFG: BB#2 BB#4
	%vreg20<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg20
	%vreg21<def> = LT %vreg20<kill>, %vreg4; CPURegs:%vreg21,%vreg20,%vreg4
	JC %vreg21<kill>, <BB#5>; CPURegs:%vreg21
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#3
	%vreg38<def> = MovGR %ZERO, 2; CPURegs:%vreg38
	%vreg39<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg39
	%vreg40<def> = SHL %vreg39<kill>, %vreg38<kill>; CPURegs:%vreg40,%vreg39,%vreg38
	%vreg41<def> = LD <fi#0>, 0; mem:LD4[%p_array.addr] CPURegs:%vreg41
	%vreg42<def> = ADDu %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LD %vreg42<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg43,%vreg42
	%vreg44<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg44
	%vreg45<def,tied1> = MovIGL %vreg44<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg45,%vreg44
	%vreg46<def> = LD %vreg45, 0; mem:LD4[@sum] CPURegs:%vreg46,%vreg45
	%vreg47<def> = ADDu %vreg46<kill>, %vreg43<kill>; CPURegs:%vreg47,%vreg46,%vreg43
	ST %vreg47<kill>, %vreg45, 0; mem:ST4[@sum] CPURegs:%vreg47,%vreg45
	%vreg48<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg48
	%vreg49<def> = ADDiu %vreg48<kill>, -2; CPURegs:%vreg49,%vreg48
	ST %vreg49<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg49
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#3 BB#6
	%vreg22<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg22
	%vreg23<def> = LTI %vreg22<kill>, 255; CPURegs:%vreg23,%vreg22
	JNC %vreg23<kill>, <BB#7>; CPURegs:%vreg23
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#7(4)

BB#6: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5
	%vreg26<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg26
	%vreg27<def> = ADDiu %vreg26, 1; CPURegs:%vreg27,%vreg26
	ST %vreg27<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg27
	%vreg28<def> = MovGR %ZERO, 2; CPURegs:%vreg28
	%vreg29<def> = SHL %vreg26, %vreg28<kill>; CPURegs:%vreg29,%vreg26,%vreg28
	%vreg30<def> = MovIGH %ZERO, <ga:@ex_array>[TF=3]; CPURegs:%vreg30
	%vreg31<def,tied1> = MovIGL %vreg30<tied0>, <ga:@ex_array>[TF=4]; CPURegs:%vreg31,%vreg30
	%vreg32<def> = ADDu %vreg31<kill>, %vreg29<kill>; CPURegs:%vreg32,%vreg31,%vreg29
	%vreg33<def> = LD %vreg32<kill>, 0; mem:LD4[%arrayidx5] CPURegs:%vreg33,%vreg32
	%vreg34<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg34
	%vreg35<def,tied1> = MovIGL %vreg34<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg35,%vreg34
	%vreg36<def> = LD %vreg35, 0; mem:LD4[@sum] CPURegs:%vreg36,%vreg35
	%vreg37<def> = SUBu %vreg36<kill>, %vreg33<kill>; CPURegs:%vreg37,%vreg36,%vreg33
	ST %vreg37<kill>, %vreg35, 0; mem:ST4[@sum] CPURegs:%vreg37,%vreg35
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#7: derived from LLVM BB %for.inc7
    Predecessors according to CFG: BB#5
	%vreg24<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg24
	%vreg25<def> = ADDiu %vreg24<kill>, 1; CPURegs:%vreg25,%vreg24
	ST %vreg25<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg25
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#8: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#8 BB#10
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg7
	%vreg8<def> = ADDiu %vreg7, 1; CPURegs:%vreg8,%vreg7
	ST %vreg8<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg8
	%vreg9<def> = MovIGH %ZERO, <ga:@bound>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@bound>[TF=4]; CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD %vreg10<kill>, 0; mem:LD4[@bound] CPURegs:%vreg11,%vreg10
	%vreg12<def> = LT %vreg7, %vreg11<kill>; CPURegs:%vreg12,%vreg7,%vreg11
	JC %vreg12<kill>, <BB#8>; CPURegs:%vreg12
	Jmp <BB#9>
    Successors according to CFG: BB#8(124) BB#9(4)

BB#9: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#8
	%vreg13<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD %vreg14, 0; mem:LD4[@sum] CPURegs:%vreg15,%vreg14
	%vreg16<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg16
	%vreg17<def> = ADDu %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	ST %vreg17, %vreg14, 0; mem:ST4[@sum] CPURegs:%vreg17,%vreg14
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function add.

