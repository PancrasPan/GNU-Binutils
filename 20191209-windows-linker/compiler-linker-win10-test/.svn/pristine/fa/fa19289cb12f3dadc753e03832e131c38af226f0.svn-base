
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function binary_insert: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%start.addr] CPURegs:%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg3
	%vreg4<def> = LE %vreg3<kill>, %vreg2; CPURegs:%vreg4,%vreg3,%vreg2
	JC %vreg4<kill>, <BB#2>; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg63<def> = MovGR %ZERO, -1; CPURegs:%vreg63
	ST %vreg63<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg63
	Jmp <BB#14>
    Successors according to CFG: BB#14

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg5
	%vreg6<def> = ADDiu %vreg5<kill>, 1; CPURegs:%vreg6,%vreg5
	ST %vreg6<kill>, <fi#8>, 0; mem:ST4[%i] CPURegs:%vreg6
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#2 BB#12
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	%vreg8<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg8
	%vreg9<def> = GT %vreg8<kill>, %vreg7<kill>; CPURegs:%vreg9,%vreg8,%vreg7
	JC %vreg9<kill>, <BB#13>; CPURegs:%vreg9
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#13(4)

BB#4: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#3
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg12
	%vreg13<def> = SHL %vreg12<kill>, %vreg11; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg14
	%vreg15<def> = ADDu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#4>, 0; mem:ST4[%value] CPURegs:%vreg16
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg17
	ST %vreg17<kill>, <fi#6>, 0; mem:ST4[%srchhead] CPURegs:%vreg17
	%vreg18<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDiu %vreg18<kill>, -1; CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#7>, 0; mem:ST4[%srchrear] CPURegs:%vreg19
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#4 BB#8 BB#7
	%vreg20<def> = LD <fi#7>, 0; mem:LD4[%srchrear] CPURegs:%vreg20
	%vreg21<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg21
	%vreg22<def> = GT %vreg21<kill>, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	JC %vreg22<kill>, <BB#9>; CPURegs:%vreg22
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#9(4)

BB#6: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5
	%vreg44<def> = LD <fi#7>, 0; mem:LD4[%srchrear] CPURegs:%vreg44
	%vreg45<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg45
	%vreg46<def> = ADDu %vreg45<kill>, %vreg44<kill>; CPURegs:%vreg46,%vreg45,%vreg44
	%vreg47<def> = MovGR %ZERO, 31; CPURegs:%vreg47
	%vreg48<def> = SRL %vreg46, %vreg47<kill>; CPURegs:%vreg48,%vreg46,%vreg47
	%vreg49<def> = ADDu %vreg46, %vreg48<kill>; CPURegs:%vreg49,%vreg46,%vreg48
	%vreg50<def> = MovGR %ZERO, 1; CPURegs:%vreg50
	%vreg51<def> = SRA %vreg49<kill>, %vreg50<kill>; CPURegs:%vreg51,%vreg49,%vreg50
	ST %vreg51, <fi#5>, 0; mem:ST4[%midpos] CPURegs:%vreg51
	%vreg53<def> = SHL %vreg51, %vreg11; CPURegs:%vreg53,%vreg51,%vreg11
	%vreg54<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg54
	%vreg55<def> = ADDu %vreg54<kill>, %vreg53<kill>; CPURegs:%vreg55,%vreg54,%vreg53
	%vreg56<def> = LD %vreg55<kill>, 0; mem:LD4[%arrayidx4] CPURegs:%vreg56,%vreg55
	%vreg57<def> = LD <fi#4>, 0; mem:LD4[%value] CPURegs:%vreg57
	%vreg58<def> = GT %vreg56<kill>, %vreg57<kill>; CPURegs:%vreg58,%vreg56,%vreg57
	JC %vreg58<kill>, <BB#8>; CPURegs:%vreg58
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#6
	%vreg61<def> = LD <fi#5>, 0; mem:LD4[%midpos] CPURegs:%vreg61
	%vreg62<def> = ADDiu %vreg61<kill>, 1; CPURegs:%vreg62,%vreg61
	ST %vreg62<kill>, <fi#6>, 0; mem:ST4[%srchhead] CPURegs:%vreg62
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#8: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#6
	%vreg59<def> = LD <fi#5>, 0; mem:LD4[%midpos] CPURegs:%vreg59
	%vreg60<def> = ADDiu %vreg59<kill>, -1; CPURegs:%vreg60,%vreg59
	ST %vreg60<kill>, <fi#7>, 0; mem:ST4[%srchrear] CPURegs:%vreg60
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#5
	%vreg23<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg23
	%vreg24<def> = ADDiu %vreg23<kill>, -1; CPURegs:%vreg24,%vreg23
	ST %vreg24<kill>, <fi#9>, 0; mem:ST4[%j] CPURegs:%vreg24
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %for.cond11
    Predecessors according to CFG: BB#9 BB#11
	%vreg25<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg25
	%vreg26<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg26
	%vreg27<def> = LT %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	JC %vreg27<kill>, <BB#12>; CPURegs:%vreg27
	Jmp <BB#11>
    Successors according to CFG: BB#11(124) BB#12(4)

BB#11: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#10
	%vreg37<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg37
	%vreg38<def> = SHL %vreg37<kill>, %vreg11; CPURegs:%vreg38,%vreg37,%vreg11
	%vreg39<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg39
	%vreg40<def> = ADDu %vreg39<kill>, %vreg38<kill>; CPURegs:%vreg40,%vreg39,%vreg38
	%vreg41<def> = LD %vreg40, 0; mem:LD4[%arrayidx14] CPURegs:%vreg41,%vreg40
	ST %vreg41<kill>, %vreg40, 4; mem:ST4[%arrayidx16] CPURegs:%vreg41,%vreg40
	%vreg42<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg42
	%vreg43<def> = ADDiu %vreg42<kill>, -1; CPURegs:%vreg43,%vreg42
	ST %vreg43<kill>, <fi#9>, 0; mem:ST4[%j] CPURegs:%vreg43
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#12: derived from LLVM BB %for.inc18
    Predecessors according to CFG: BB#10
	%vreg29<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg29
	%vreg30<def> = SHL %vreg29<kill>, %vreg11; CPURegs:%vreg30,%vreg29,%vreg11
	%vreg31<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	%vreg33<def> = LD <fi#4>, 0; mem:LD4[%value] CPURegs:%vreg33
	ST %vreg33<kill>, %vreg32<kill>, 0; mem:ST4[%arrayidx17] CPURegs:%vreg33,%vreg32
	%vreg34<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg34
	%vreg35<def> = ADDiu %vreg34<kill>, 1; CPURegs:%vreg35,%vreg34
	ST %vreg35<kill>, <fi#8>, 0; mem:ST4[%i] CPURegs:%vreg35
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#13: derived from LLVM BB %for.end19
    Predecessors according to CFG: BB#3
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	ST %vreg10<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg10
    Successors according to CFG: BB#14

BB#14: derived from LLVM BB %return
    Predecessors according to CFG: BB#13 BB#1
	%vreg64<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg64
	%V0<def> = COPY %vreg64; CPURegs:%vreg64
	RetLR %V0<imp-use>

# End machine code for function binary_insert.


#####==========stderr_obj==========#####:
# Machine code for function binary_insert: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg2
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%start.addr] CPURegs:%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg3
	%vreg4<def> = LE %vreg3<kill>, %vreg2; CPURegs:%vreg4,%vreg3,%vreg2
	JC %vreg4<kill>, <BB#2>; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg63<def> = MovGR %ZERO, -1; CPURegs:%vreg63
	ST %vreg63<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg63
	Jmp <BB#14>
    Successors according to CFG: BB#14

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg5
	%vreg6<def> = ADDiu %vreg5<kill>, 1; CPURegs:%vreg6,%vreg5
	ST %vreg6<kill>, <fi#8>, 0; mem:ST4[%i] CPURegs:%vreg6
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#2 BB#12
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	%vreg8<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg8
	%vreg9<def> = GT %vreg8<kill>, %vreg7<kill>; CPURegs:%vreg9,%vreg8,%vreg7
	JC %vreg9<kill>, <BB#13>; CPURegs:%vreg9
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#13(4)

BB#4: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#3
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg12
	%vreg13<def> = SHL %vreg12<kill>, %vreg11; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg14
	%vreg15<def> = ADDu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#4>, 0; mem:ST4[%value] CPURegs:%vreg16
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg17
	ST %vreg17<kill>, <fi#6>, 0; mem:ST4[%srchhead] CPURegs:%vreg17
	%vreg18<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDiu %vreg18<kill>, -1; CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#7>, 0; mem:ST4[%srchrear] CPURegs:%vreg19
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#4 BB#8 BB#7
	%vreg20<def> = LD <fi#7>, 0; mem:LD4[%srchrear] CPURegs:%vreg20
	%vreg21<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg21
	%vreg22<def> = GT %vreg21<kill>, %vreg20<kill>; CPURegs:%vreg22,%vreg21,%vreg20
	JC %vreg22<kill>, <BB#9>; CPURegs:%vreg22
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#9(4)

BB#6: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5
	%vreg44<def> = LD <fi#7>, 0; mem:LD4[%srchrear] CPURegs:%vreg44
	%vreg45<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg45
	%vreg46<def> = ADDu %vreg45<kill>, %vreg44<kill>; CPURegs:%vreg46,%vreg45,%vreg44
	%vreg47<def> = MovGR %ZERO, 31; CPURegs:%vreg47
	%vreg48<def> = SRL %vreg46, %vreg47<kill>; CPURegs:%vreg48,%vreg46,%vreg47
	%vreg49<def> = ADDu %vreg46, %vreg48<kill>; CPURegs:%vreg49,%vreg46,%vreg48
	%vreg50<def> = MovGR %ZERO, 1; CPURegs:%vreg50
	%vreg51<def> = SRA %vreg49<kill>, %vreg50<kill>; CPURegs:%vreg51,%vreg49,%vreg50
	ST %vreg51, <fi#5>, 0; mem:ST4[%midpos] CPURegs:%vreg51
	%vreg53<def> = SHL %vreg51, %vreg11; CPURegs:%vreg53,%vreg51,%vreg11
	%vreg54<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg54
	%vreg55<def> = ADDu %vreg54<kill>, %vreg53<kill>; CPURegs:%vreg55,%vreg54,%vreg53
	%vreg56<def> = LD %vreg55<kill>, 0; mem:LD4[%arrayidx4] CPURegs:%vreg56,%vreg55
	%vreg57<def> = LD <fi#4>, 0; mem:LD4[%value] CPURegs:%vreg57
	%vreg58<def> = GT %vreg56<kill>, %vreg57<kill>; CPURegs:%vreg58,%vreg56,%vreg57
	JC %vreg58<kill>, <BB#8>; CPURegs:%vreg58
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#6
	%vreg61<def> = LD <fi#5>, 0; mem:LD4[%midpos] CPURegs:%vreg61
	%vreg62<def> = ADDiu %vreg61<kill>, 1; CPURegs:%vreg62,%vreg61
	ST %vreg62<kill>, <fi#6>, 0; mem:ST4[%srchhead] CPURegs:%vreg62
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#8: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#6
	%vreg59<def> = LD <fi#5>, 0; mem:LD4[%midpos] CPURegs:%vreg59
	%vreg60<def> = ADDiu %vreg59<kill>, -1; CPURegs:%vreg60,%vreg59
	ST %vreg60<kill>, <fi#7>, 0; mem:ST4[%srchrear] CPURegs:%vreg60
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#5
	%vreg23<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg23
	%vreg24<def> = ADDiu %vreg23<kill>, -1; CPURegs:%vreg24,%vreg23
	ST %vreg24<kill>, <fi#9>, 0; mem:ST4[%j] CPURegs:%vreg24
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %for.cond11
    Predecessors according to CFG: BB#9 BB#11
	%vreg25<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg25
	%vreg26<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg26
	%vreg27<def> = LT %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	JC %vreg27<kill>, <BB#12>; CPURegs:%vreg27
	Jmp <BB#11>
    Successors according to CFG: BB#11(124) BB#12(4)

BB#11: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#10
	%vreg37<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg37
	%vreg38<def> = SHL %vreg37<kill>, %vreg11; CPURegs:%vreg38,%vreg37,%vreg11
	%vreg39<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg39
	%vreg40<def> = ADDu %vreg39<kill>, %vreg38<kill>; CPURegs:%vreg40,%vreg39,%vreg38
	%vreg41<def> = LD %vreg40, 0; mem:LD4[%arrayidx14] CPURegs:%vreg41,%vreg40
	ST %vreg41<kill>, %vreg40, 4; mem:ST4[%arrayidx16] CPURegs:%vreg41,%vreg40
	%vreg42<def> = LD <fi#9>, 0; mem:LD4[%j] CPURegs:%vreg42
	%vreg43<def> = ADDiu %vreg42<kill>, -1; CPURegs:%vreg43,%vreg42
	ST %vreg43<kill>, <fi#9>, 0; mem:ST4[%j] CPURegs:%vreg43
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#12: derived from LLVM BB %for.inc18
    Predecessors according to CFG: BB#10
	%vreg29<def> = LD <fi#6>, 0; mem:LD4[%srchhead] CPURegs:%vreg29
	%vreg30<def> = SHL %vreg29<kill>, %vreg11; CPURegs:%vreg30,%vreg29,%vreg11
	%vreg31<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	%vreg33<def> = LD <fi#4>, 0; mem:LD4[%value] CPURegs:%vreg33
	ST %vreg33<kill>, %vreg32<kill>, 0; mem:ST4[%arrayidx17] CPURegs:%vreg33,%vreg32
	%vreg34<def> = LD <fi#8>, 0; mem:LD4[%i] CPURegs:%vreg34
	%vreg35<def> = ADDiu %vreg34<kill>, 1; CPURegs:%vreg35,%vreg34
	ST %vreg35<kill>, <fi#8>, 0; mem:ST4[%i] CPURegs:%vreg35
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#13: derived from LLVM BB %for.end19
    Predecessors according to CFG: BB#3
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	ST %vreg10<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg10
    Successors according to CFG: BB#14

BB#14: derived from LLVM BB %return
    Predecessors according to CFG: BB#13 BB#1
	%vreg64<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg64
	%V0<def> = COPY %vreg64; CPURegs:%vreg64
	RetLR %V0<imp-use>

# End machine code for function binary_insert.

