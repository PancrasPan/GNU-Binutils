
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/XDSCALE.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
./c_standard_lib-master/MATH/XDSCALE.c:28:21: warning: '&' within '|' [-Wbitwise-op-parentheses]
                ps[_D0] = ps[_D0] & ~_DMASK | (short)lexp << _DOFF;
                          ~~~~~~~~^~~~~~~~~ ~
./c_standard_lib-master/MATH/XDSCALE.c:28:21: note: place parentheses around the '&' expression to silence this warning
                ps[_D0] = ps[_D0] & ~_DMASK | (short)lexp << _DOFF;
                          ~~~~~~~~^~~~~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:35:34: warning: '&' within '|' [-Wbitwise-op-parentheses]
                ps[_D0] = 1 << _DOFF | ps[_D0] & _DFRAC;
                                     ~ ~~~~~~~~^~~~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:35:34: note: place parentheses around the '&' expression to silence this warning
                ps[_D0] = 1 << _DOFF | ps[_D0] & _DFRAC;
                                       ~~~~~~~~^~~~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:51:46: warning: operator '<<' has lower precedence than '-'; '-' will be evaluated first [-Wshift-op-parentheses]
                                ps[_D3] = ps[_D3] >> xexp| ps[_D2] << 16 - xexp;
                                                                   ~~ ~~~^~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:51:46: note: place parentheses around the '-' expression to silence this warning
                                ps[_D3] = ps[_D3] >> xexp| ps[_D2] << 16 - xexp;
                                                                         ^
                                                                      (        )
./c_standard_lib-master/MATH/XDSCALE.c:52:46: warning: operator '<<' has lower precedence than '-'; '-' will be evaluated first [-Wshift-op-parentheses]
                                ps[_D2] = ps[_D2] >> xexp| ps[_D1] << 16 - xexp;
                                                                   ~~ ~~~^~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:52:46: note: place parentheses around the '-' expression to silence this warning
                                ps[_D2] = ps[_D2] >> xexp| ps[_D1] << 16 - xexp;
                                                                         ^
                                                                      (        )
./c_standard_lib-master/MATH/XDSCALE.c:53:46: warning: operator '<<' has lower precedence than '-'; '-' will be evaluated first [-Wshift-op-parentheses]
                                ps[_D1] = ps[_D1] >> xexp| ps[_D0] << 16 - xexp;
                                                                   ~~ ~~~^~~~~~
./c_standard_lib-master/MATH/XDSCALE.c:53:46: note: place parentheses around the '-' expression to silence this warning
                                ps[_D1] = ps[_D1] >> xexp| ps[_D0] << 16 - xexp;
                                                                         ^
                                                                      (        )
'' is not a recognized processor for this target (ignoring processor)
6 warnings generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Dscale: SSA
Frame Objects:
  fi#0: size=2, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=2, align=4, at location [SP]
  fi#6: size=2, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%px.addr] CPURegs:%vreg0
	STH %vreg1, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg1
	%vreg2<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg2
	ST %vreg2, <fi#4>, 0; mem:ST4[%ps] CPURegs:%vreg2
	%vreg3<def> = LDHZ %vreg2, 6; mem:LD2[%arrayidx] CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovGR %ZERO, 32752; CPURegs:%vreg4
	%vreg5<def> = AND %vreg3<kill>, %vreg4<kill>; CPURegs:%vreg5,%vreg3,%vreg4
	%vreg6<def> = MovGR %ZERO, 4; CPURegs:%vreg6
	%vreg7<def> = SRL %vreg5<kill>, %vreg6; CPURegs:%vreg7,%vreg5,%vreg6
	STH %vreg7<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg7
	%vreg8<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg8
	%vreg9<def> = NEQI %vreg8<kill>, 2047; CPURegs:%vreg9,%vreg8
	JC %vreg9<kill>, <BB#7>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg127<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg127
	%vreg128<def> = LDHZ %vreg127<kill>, 6; mem:LD2[%arrayidx4] CPURegs:%vreg128,%vreg127
	%vreg129<def> = MovGR %ZERO, 15; CPURegs:%vreg129
	%vreg130<def> = AND %vreg128<kill>, %vreg129<kill>; CPURegs:%vreg130,%vreg128,%vreg129
	%vreg131<def> = NEQI %vreg130<kill>, 0; CPURegs:%vreg131,%vreg130
	JC %vreg131<kill>, <BB#5>; CPURegs:%vreg131
	Jmp <BB#2>
    Successors according to CFG: BB#5(20) BB#2(12)

BB#2: derived from LLVM BB %lor.lhs.false
    Predecessors according to CFG: BB#1
	%vreg132<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg132
	%vreg133<def> = LDHZ %vreg132<kill>, 4; mem:LD2[%arrayidx7] CPURegs:%vreg133,%vreg132
	%vreg134<def> = NEQI %vreg133<kill>, 0; CPURegs:%vreg134,%vreg133
	JC %vreg134<kill>, <BB#5>; CPURegs:%vreg134
	Jmp <BB#3>
    Successors according to CFG: BB#5(20) BB#3(12)

BB#3: derived from LLVM BB %lor.lhs.false10
    Predecessors according to CFG: BB#2
	%vreg135<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg135
	%vreg136<def> = LDHZ %vreg135<kill>, 2; mem:LD2[%arrayidx11] CPURegs:%vreg136,%vreg135
	%vreg137<def> = NEQI %vreg136<kill>, 0; CPURegs:%vreg137,%vreg136
	JC %vreg137<kill>, <BB#5>; CPURegs:%vreg137
	Jmp <BB#4>
    Successors according to CFG: BB#5(20) BB#4(12)

BB#4: derived from LLVM BB %lor.lhs.false14
    Predecessors according to CFG: BB#3
	%vreg138<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg138
	%vreg139<def> = LDHZ %vreg138<kill>, 0; mem:LD2[%arrayidx151] CPURegs:%vreg139,%vreg138
	%vreg140<def> = EQI %vreg139<kill>, 0; CPURegs:%vreg140,%vreg139
	JC %vreg140<kill>, <BB#6>; CPURegs:%vreg140
	Jmp <BB#5>
    Successors according to CFG: BB#5(20) BB#6(12)

BB#5: derived from LLVM BB %if.then18
    Predecessors according to CFG: BB#1 BB#2 BB#3 BB#4
	%vreg142<def> = MovGR %ZERO, 2; CPURegs:%vreg142
	STH %vreg142<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg142
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#6: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg141<def> = MovGR %ZERO, 1; CPURegs:%vreg141
	STH %vreg141<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg141
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#7: derived from LLVM BB %if.else19
    Predecessors according to CFG: BB#0
	%vreg10<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg10
	%vreg11<def> = LTI %vreg10<kill>, 1; CPURegs:%vreg11,%vreg10
	JNC %vreg11<kill>, <BB#10>; CPURegs:%vreg11
	Jmp <BB#8>
    Successors according to CFG: BB#10(16) BB#8(16)

BB#8: derived from LLVM BB %if.else24
    Predecessors according to CFG: BB#7
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg12
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg12; CPURegs:%vreg12
	CALL <ga:@_Dnorm>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; CPURegs:%vreg13
	STH %vreg13, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg13
	%vreg14<def> = MovGR %ZERO, 1; CPURegs:%vreg14
	%vreg15<def> = LT %vreg13, %vreg14<kill>; CPURegs:%vreg15,%vreg13,%vreg14
	JC %vreg15<kill>, <BB#10>; CPURegs:%vreg15
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then28
    Predecessors according to CFG: BB#8
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	STH %vreg16<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg16
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#10: derived from LLVM BB %if.end30
    Predecessors according to CFG: BB#7 BB#8
	%vreg17<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg17
	%vreg18<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg18
	%vreg19<def> = ADDu %vreg18<kill>, %vreg17<kill>; CPURegs:%vreg19,%vreg18,%vreg17
	ST %vreg19, <fi#3>, 0; mem:ST4[%lexp] CPURegs:%vreg19
	%vreg20<def> = MovGR %ZERO, 2047; CPURegs:%vreg20
	%vreg21<def> = LT %vreg19, %vreg20<kill>; CPURegs:%vreg21,%vreg19,%vreg20
	JC %vreg21<kill>, <BB#15>; CPURegs:%vreg21
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#15(16)

BB#11: derived from LLVM BB %if.then35
    Predecessors according to CFG: BB#10
	%vreg106<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg106
	%vreg107<def> = LDBZ %vreg106<kill>, 7; mem:LD1[%arrayidx36+1] CPURegs:%vreg107,%vreg106
	%vreg108<def> = MovGR %ZERO, 128; CPURegs:%vreg108
	%vreg109<def> = AND %vreg107<kill>, %vreg108<kill>; CPURegs:%vreg109,%vreg107,%vreg108
	%vreg110<def> = EQI %vreg109<kill>, 0; CPURegs:%vreg110,%vreg109
	JC %vreg110<kill>, <BB#13>; CPURegs:%vreg110
	Jmp <BB#12>
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg116<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg116
	%vreg117<def,tied1> = MovIGL %vreg116<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg117,%vreg116
	%vreg118<def> = COPY %SP; CPURegs:%vreg118
	%vreg119<def> = LD %vreg117, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg119,%vreg117
	ST %vreg119<kill>, %vreg118, 12; mem:ST4[<unknown>] CPURegs:%vreg119,%vreg118
	%vreg120<def> = LD %vreg117, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg120,%vreg117
	ST %vreg120<kill>, %vreg118, 8; mem:ST4[<unknown>] CPURegs:%vreg120,%vreg118
	%vreg121<def> = MovGR %ZERO, 0; CPURegs:%vreg121
	%vreg122<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg122
	%A0<def> = COPY %vreg121; CPURegs:%vreg121
	%A1<def> = COPY %vreg122; CPURegs:%vreg122
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	%vreg125<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg125
	ST %vreg124, %vreg125, 4; mem:ST4[%21+4] CPURegs:%vreg124,%vreg125
	ST %vreg123, %vreg125, 0; mem:ST4[%21](align=8) CPURegs:%vreg123,%vreg125
	Jmp <BB#14>
    Successors according to CFG: BB#14

BB#13: derived from LLVM BB %if.else41
    Predecessors according to CFG: BB#11
	%vreg111<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg111
	%vreg112<def,tied1> = MovIGL %vreg111<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg112,%vreg111
	%vreg113<def> = LD %vreg112, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg113,%vreg112
	%vreg114<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg114
	ST %vreg113<kill>, %vreg114, 4; mem:ST4[%23+4] CPURegs:%vreg113,%vreg114
	%vreg115<def> = LD %vreg112, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg115,%vreg112
	ST %vreg115<kill>, %vreg114, 0; mem:ST4[%23](align=8) CPURegs:%vreg115,%vreg114
    Successors according to CFG: BB#14

BB#14: derived from LLVM BB %if.end42
    Predecessors according to CFG: BB#13 BB#12
	%vreg126<def> = MovGR %ZERO, 1; CPURegs:%vreg126
	STH %vreg126<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg126
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#15: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#10
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg23<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg23
	%vreg24<def> = LT %vreg23<kill>, %vreg22<kill>; CPURegs:%vreg24,%vreg23,%vreg22
	JC %vreg24<kill>, <BB#17>; CPURegs:%vreg24
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#17(16)

BB#16: derived from LLVM BB %if.then46
    Predecessors according to CFG: BB#15
	%vreg98<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg98
	%vreg99<def> = SHL %vreg98<kill>, %vreg6; CPURegs:%vreg99,%vreg98,%vreg6
	%vreg100<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg100
	%vreg101<def> = LDHZ %vreg100, 6; mem:LD2[%arrayidx47] CPURegs:%vreg101,%vreg100
	%vreg102<def> = MovGR %ZERO, 32783; CPURegs:%vreg102
	%vreg103<def> = AND %vreg101<kill>, %vreg102<kill>; CPURegs:%vreg103,%vreg101,%vreg102
	%vreg104<def> = ORu %vreg103<kill>, %vreg99<kill>; CPURegs:%vreg104,%vreg103,%vreg99
	STH %vreg104<kill>, %vreg100, 6; mem:ST2[%arrayidx53] CPURegs:%vreg104,%vreg100
	%vreg105<def> = MovGR %ZERO, 65535; CPURegs:%vreg105
	STH %vreg105<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg105
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#17: derived from LLVM BB %if.else54
    Predecessors according to CFG: BB#15
	%vreg25<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg25
	%vreg26<def> = LDHZ %vreg25<kill>, 6; mem:LD2[%arrayidx55] CPURegs:%vreg26,%vreg25
	%vreg27<def> = MovGR %ZERO, 32768; CPURegs:%vreg27
	%vreg28<def> = AND %vreg26<kill>, %vreg27<kill>; CPURegs:%vreg28,%vreg26,%vreg27
	STH %vreg28<kill>, <fi#6>, 0; mem:ST2[%sign](align=4) CPURegs:%vreg28
	%vreg29<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg29
	%vreg30<def> = LDHZ %vreg29, 6; mem:LD2[%arrayidx59] CPURegs:%vreg30,%vreg29
	%vreg31<def> = MovGR %ZERO, 15; CPURegs:%vreg31
	%vreg32<def> = AND %vreg30<kill>, %vreg31<kill>; CPURegs:%vreg32,%vreg30,%vreg31
	%vreg33<def> = MovGR %ZERO, 16; CPURegs:%vreg33
	%vreg34<def> = ORu %vreg32<kill>, %vreg33; CPURegs:%vreg34,%vreg32,%vreg33
	STH %vreg34<kill>, %vreg29, 6; mem:ST2[%arrayidx64] CPURegs:%vreg34,%vreg29
	%vreg35<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg35
	%vreg36<def> = ADDiu %vreg35<kill>, -1; CPURegs:%vreg36,%vreg35
	ST %vreg36, <fi#3>, 0; mem:ST4[%lexp] CPURegs:%vreg36
	%vreg37<def> = LTI %vreg36, -52; CPURegs:%vreg37,%vreg36
	JNC %vreg37<kill>, <BB#19>; CPURegs:%vreg37
	Jmp <BB#18>
    Successors according to CFG: BB#18(16) BB#19(16)

BB#18: derived from LLVM BB %if.then67
    Predecessors according to CFG: BB#17
	%vreg91<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg91
	%vreg92<def> = LDH <fi#6>, 0; mem:LD2[%sign](align=4) CPURegs:%vreg92
	STH %vreg92<kill>, %vreg91<kill>, 6; mem:ST2[%arrayidx68] CPURegs:%vreg92,%vreg91
	%vreg93<def> = MovGR %ZERO, 0; CPURegs:%vreg93
	%vreg94<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg94
	STH %vreg93, %vreg94<kill>, 4; mem:ST2[%arrayidx69] CPURegs:%vreg93,%vreg94
	%vreg95<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg95
	STH %vreg93, %vreg95<kill>, 2; mem:ST2[%arrayidx70] CPURegs:%vreg93,%vreg95
	%vreg96<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg96
	STH %vreg93, %vreg96<kill>, 0; mem:ST2[%arrayidx712] CPURegs:%vreg93,%vreg96
	STH %vreg93, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg93
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#19: derived from LLVM BB %if.else72
    Predecessors according to CFG: BB#17
	%vreg38<def> = LDH <fi#3>, 0; mem:LD2[%lexp](align=4) CPURegs:%vreg38
	STH %vreg38<kill>, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg38
    Successors according to CFG: BB#20

BB#20: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#19 BB#21
	%vreg39<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg39
	%vreg40<def> = LTI %vreg39<kill>, -15; CPURegs:%vreg40,%vreg39
	JNC %vreg40<kill>, <BB#22>; CPURegs:%vreg40
	Jmp <BB#21>
    Successors according to CFG: BB#21(124) BB#22(4)

BB#21: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#20
	%vreg81<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg81
	%vreg82<def> = LDH %vreg81, 2; mem:LD2[%arrayidx77] CPURegs:%vreg82,%vreg81
	STH %vreg82<kill>, %vreg81, 0; mem:ST2[%arrayidx783] CPURegs:%vreg82,%vreg81
	%vreg83<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg83
	%vreg84<def> = LDH %vreg83, 4; mem:LD2[%arrayidx79] CPURegs:%vreg84,%vreg83
	STH %vreg84<kill>, %vreg83, 2; mem:ST2[%arrayidx80] CPURegs:%vreg84,%vreg83
	%vreg85<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg85
	%vreg86<def> = LDH %vreg85, 6; mem:LD2[%arrayidx81] CPURegs:%vreg86,%vreg85
	STH %vreg86<kill>, %vreg85, 4; mem:ST2[%arrayidx82] CPURegs:%vreg86,%vreg85
	%vreg87<def> = MovGR %ZERO, 0; CPURegs:%vreg87
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg88
	STH %vreg87<kill>, %vreg88<kill>, 6; mem:ST2[%arrayidx83] CPURegs:%vreg87,%vreg88
	%vreg89<def> = LDH <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg89
	%vreg90<def> = ADDiu %vreg89<kill>, 16; CPURegs:%vreg90,%vreg89
	STH %vreg90<kill>, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg90
	Jmp <BB#20>
    Successors according to CFG: BB#20

BB#22: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#20
	%vreg41<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 0; CPURegs:%vreg42
	%vreg43<def> = SUBu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	STH %vreg43, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg43
	%vreg44<def> = MovGR %ZERO, 65535; CPURegs:%vreg44
	%vreg45<def> = AND %vreg43, %vreg44; CPURegs:%vreg45,%vreg43,%vreg44
	%vreg46<def> = EQI %vreg45<kill>, 0; CPURegs:%vreg46,%vreg45
	JC %vreg46<kill>, <BB#24>; CPURegs:%vreg46
	Jmp <BB#23>
    Successors according to CFG: BB#23(20) BB#24(12)

BB#23: derived from LLVM BB %if.then93
    Predecessors according to CFG: BB#22
	%vreg47<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg47
	%vreg49<def> = SUBu %vreg33, %vreg47; CPURegs:%vreg49,%vreg33,%vreg47
	%vreg50<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg50
	%vreg51<def> = LDHZ %vreg50, 2; mem:LD2[%arrayidx98] CPURegs:%vreg51,%vreg50
	%vreg52<def> = SHL %vreg51<kill>, %vreg49<kill>; CPURegs:%vreg52,%vreg51,%vreg49
	%vreg53<def> = LDHZ %vreg50, 0; mem:LD2[%arrayidx944] CPURegs:%vreg53,%vreg50
	%vreg54<def> = SRL %vreg53<kill>, %vreg47; CPURegs:%vreg54,%vreg53,%vreg47
	%vreg55<def> = ORu %vreg54<kill>, %vreg52<kill>; CPURegs:%vreg55,%vreg54,%vreg52
	STH %vreg55<kill>, %vreg50, 0; mem:ST2[%arrayidx1055] CPURegs:%vreg55,%vreg50
	%vreg56<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg56
	%vreg57<def> = SUBu %vreg33, %vreg56; CPURegs:%vreg57,%vreg33,%vreg56
	%vreg58<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg58
	%vreg59<def> = LDHZ %vreg58, 4; mem:LD2[%arrayidx110] CPURegs:%vreg59,%vreg58
	%vreg60<def> = SHL %vreg59<kill>, %vreg57<kill>; CPURegs:%vreg60,%vreg59,%vreg57
	%vreg61<def> = LDHZ %vreg58, 2; mem:LD2[%arrayidx106] CPURegs:%vreg61,%vreg58
	%vreg62<def> = SRL %vreg61<kill>, %vreg56; CPURegs:%vreg62,%vreg61,%vreg56
	%vreg63<def> = ORu %vreg62<kill>, %vreg60<kill>; CPURegs:%vreg63,%vreg62,%vreg60
	STH %vreg63<kill>, %vreg58, 2; mem:ST2[%arrayidx117] CPURegs:%vreg63,%vreg58
	%vreg64<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg64
	%vreg65<def> = SUBu %vreg33, %vreg64; CPURegs:%vreg65,%vreg33,%vreg64
	%vreg66<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg66
	%vreg67<def> = LDHZ %vreg66, 6; mem:LD2[%arrayidx122] CPURegs:%vreg67,%vreg66
	%vreg68<def> = SHL %vreg67<kill>, %vreg65<kill>; CPURegs:%vreg68,%vreg67,%vreg65
	%vreg69<def> = LDHZ %vreg66, 4; mem:LD2[%arrayidx118] CPURegs:%vreg69,%vreg66
	%vreg70<def> = SRL %vreg69<kill>, %vreg64; CPURegs:%vreg70,%vreg69,%vreg64
	%vreg71<def> = ORu %vreg70<kill>, %vreg68<kill>; CPURegs:%vreg71,%vreg70,%vreg68
	STH %vreg71<kill>, %vreg66, 4; mem:ST2[%arrayidx129] CPURegs:%vreg71,%vreg66
	%vreg72<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg72
	%vreg73<def> = LDHZ %vreg72, 6; mem:LD2[%arrayidx131] CPURegs:%vreg73,%vreg72
	%vreg74<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg74
	%vreg75<def> = SRL %vreg73<kill>, %vreg74<kill>; CPURegs:%vreg75,%vreg73,%vreg74
	STH %vreg75<kill>, %vreg72, 6; mem:ST2[%arrayidx131] CPURegs:%vreg75,%vreg72
    Successors according to CFG: BB#24

BB#24: derived from LLVM BB %if.end135
    Predecessors according to CFG: BB#22 BB#23
	%vreg76<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg76
	%vreg77<def> = LDH %vreg76, 6; mem:LD2[%arrayidx137] CPURegs:%vreg77,%vreg76
	%vreg78<def> = LDH <fi#6>, 0; mem:LD2[%sign](align=4) CPURegs:%vreg78
	%vreg79<def> = ORu %vreg77<kill>, %vreg78<kill>; CPURegs:%vreg79,%vreg77,%vreg78
	STH %vreg79<kill>, %vreg76, 6; mem:ST2[%arrayidx137] CPURegs:%vreg79,%vreg76
	STH %vreg44, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg44
    Successors according to CFG: BB#25

BB#25: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#24 BB#18 BB#16 BB#14 BB#6 BB#5
	%vreg143<def> = LDHS <fi#0>, 0; mem:LD2[%retval](align=4) CPURegs:%vreg143
	%V0<def> = COPY %vreg143; CPURegs:%vreg143
	RetLR %V0<imp-use>

# End machine code for function _Dscale.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Dscale: SSA
Frame Objects:
  fi#0: size=2, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=2, align=4, at location [SP]
  fi#6: size=2, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%px.addr] CPURegs:%vreg0
	STH %vreg1, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg1
	%vreg2<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg2
	ST %vreg2, <fi#4>, 0; mem:ST4[%ps] CPURegs:%vreg2
	%vreg3<def> = LDHZ %vreg2, 6; mem:LD2[%arrayidx] CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovGR %ZERO, 32752; CPURegs:%vreg4
	%vreg5<def> = AND %vreg3<kill>, %vreg4<kill>; CPURegs:%vreg5,%vreg3,%vreg4
	%vreg6<def> = MovGR %ZERO, 4; CPURegs:%vreg6
	%vreg7<def> = SRL %vreg5<kill>, %vreg6; CPURegs:%vreg7,%vreg5,%vreg6
	STH %vreg7<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg7
	%vreg8<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg8
	%vreg9<def> = NEQI %vreg8<kill>, 2047; CPURegs:%vreg9,%vreg8
	JC %vreg9<kill>, <BB#7>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#7(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg127<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg127
	%vreg128<def> = LDHZ %vreg127<kill>, 6; mem:LD2[%arrayidx4] CPURegs:%vreg128,%vreg127
	%vreg129<def> = MovGR %ZERO, 15; CPURegs:%vreg129
	%vreg130<def> = AND %vreg128<kill>, %vreg129<kill>; CPURegs:%vreg130,%vreg128,%vreg129
	%vreg131<def> = NEQI %vreg130<kill>, 0; CPURegs:%vreg131,%vreg130
	JC %vreg131<kill>, <BB#5>; CPURegs:%vreg131
	Jmp <BB#2>
    Successors according to CFG: BB#5(20) BB#2(12)

BB#2: derived from LLVM BB %lor.lhs.false
    Predecessors according to CFG: BB#1
	%vreg132<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg132
	%vreg133<def> = LDHZ %vreg132<kill>, 4; mem:LD2[%arrayidx7] CPURegs:%vreg133,%vreg132
	%vreg134<def> = NEQI %vreg133<kill>, 0; CPURegs:%vreg134,%vreg133
	JC %vreg134<kill>, <BB#5>; CPURegs:%vreg134
	Jmp <BB#3>
    Successors according to CFG: BB#5(20) BB#3(12)

BB#3: derived from LLVM BB %lor.lhs.false10
    Predecessors according to CFG: BB#2
	%vreg135<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg135
	%vreg136<def> = LDHZ %vreg135<kill>, 2; mem:LD2[%arrayidx11] CPURegs:%vreg136,%vreg135
	%vreg137<def> = NEQI %vreg136<kill>, 0; CPURegs:%vreg137,%vreg136
	JC %vreg137<kill>, <BB#5>; CPURegs:%vreg137
	Jmp <BB#4>
    Successors according to CFG: BB#5(20) BB#4(12)

BB#4: derived from LLVM BB %lor.lhs.false14
    Predecessors according to CFG: BB#3
	%vreg138<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg138
	%vreg139<def> = LDHZ %vreg138<kill>, 0; mem:LD2[%arrayidx151] CPURegs:%vreg139,%vreg138
	%vreg140<def> = EQI %vreg139<kill>, 0; CPURegs:%vreg140,%vreg139
	JC %vreg140<kill>, <BB#6>; CPURegs:%vreg140
	Jmp <BB#5>
    Successors according to CFG: BB#5(20) BB#6(12)

BB#5: derived from LLVM BB %if.then18
    Predecessors according to CFG: BB#1 BB#2 BB#3 BB#4
	%vreg142<def> = MovGR %ZERO, 2; CPURegs:%vreg142
	STH %vreg142<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg142
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#6: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg141<def> = MovGR %ZERO, 1; CPURegs:%vreg141
	STH %vreg141<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg141
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#7: derived from LLVM BB %if.else19
    Predecessors according to CFG: BB#0
	%vreg10<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg10
	%vreg11<def> = LTI %vreg10<kill>, 1; CPURegs:%vreg11,%vreg10
	JNC %vreg11<kill>, <BB#10>; CPURegs:%vreg11
	Jmp <BB#8>
    Successors according to CFG: BB#10(16) BB#8(16)

BB#8: derived from LLVM BB %if.else24
    Predecessors according to CFG: BB#7
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg12
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg12; CPURegs:%vreg12
	CALL <ga:@_Dnorm>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; CPURegs:%vreg13
	STH %vreg13, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg13
	%vreg14<def> = MovGR %ZERO, 1; CPURegs:%vreg14
	%vreg15<def> = LT %vreg13, %vreg14<kill>; CPURegs:%vreg15,%vreg13,%vreg14
	JC %vreg15<kill>, <BB#10>; CPURegs:%vreg15
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then28
    Predecessors according to CFG: BB#8
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	STH %vreg16<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg16
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#10: derived from LLVM BB %if.end30
    Predecessors according to CFG: BB#7 BB#8
	%vreg17<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg17
	%vreg18<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg18
	%vreg19<def> = ADDu %vreg18<kill>, %vreg17<kill>; CPURegs:%vreg19,%vreg18,%vreg17
	ST %vreg19, <fi#3>, 0; mem:ST4[%lexp] CPURegs:%vreg19
	%vreg20<def> = MovGR %ZERO, 2047; CPURegs:%vreg20
	%vreg21<def> = LT %vreg19, %vreg20<kill>; CPURegs:%vreg21,%vreg19,%vreg20
	JC %vreg21<kill>, <BB#15>; CPURegs:%vreg21
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#15(16)

BB#11: derived from LLVM BB %if.then35
    Predecessors according to CFG: BB#10
	%vreg106<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg106
	%vreg107<def> = LDBZ %vreg106<kill>, 7; mem:LD1[%arrayidx36+1] CPURegs:%vreg107,%vreg106
	%vreg108<def> = MovGR %ZERO, 128; CPURegs:%vreg108
	%vreg109<def> = AND %vreg107<kill>, %vreg108<kill>; CPURegs:%vreg109,%vreg107,%vreg108
	%vreg110<def> = EQI %vreg109<kill>, 0; CPURegs:%vreg110,%vreg109
	JC %vreg110<kill>, <BB#13>; CPURegs:%vreg110
	Jmp <BB#12>
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg116<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg116
	%vreg117<def,tied1> = MovIGL %vreg116<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg117,%vreg116
	%vreg118<def> = COPY %SP; CPURegs:%vreg118
	%vreg119<def> = LD %vreg117, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg119,%vreg117
	ST %vreg119<kill>, %vreg118, 12; mem:ST4[<unknown>] CPURegs:%vreg119,%vreg118
	%vreg120<def> = LD %vreg117, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg120,%vreg117
	ST %vreg120<kill>, %vreg118, 8; mem:ST4[<unknown>] CPURegs:%vreg120,%vreg118
	%vreg121<def> = MovGR %ZERO, 0; CPURegs:%vreg121
	%vreg122<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg122
	%A0<def> = COPY %vreg121; CPURegs:%vreg121
	%A1<def> = COPY %vreg122; CPURegs:%vreg122
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	%vreg125<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg125
	ST %vreg124, %vreg125, 4; mem:ST4[%21+4] CPURegs:%vreg124,%vreg125
	ST %vreg123, %vreg125, 0; mem:ST4[%21](align=8) CPURegs:%vreg123,%vreg125
	Jmp <BB#14>
    Successors according to CFG: BB#14

BB#13: derived from LLVM BB %if.else41
    Predecessors according to CFG: BB#11
	%vreg111<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg111
	%vreg112<def,tied1> = MovIGL %vreg111<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg112,%vreg111
	%vreg113<def> = LD %vreg112, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg113,%vreg112
	%vreg114<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg114
	ST %vreg113<kill>, %vreg114, 4; mem:ST4[%23+4] CPURegs:%vreg113,%vreg114
	%vreg115<def> = LD %vreg112, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg115,%vreg112
	ST %vreg115<kill>, %vreg114, 0; mem:ST4[%23](align=8) CPURegs:%vreg115,%vreg114
    Successors according to CFG: BB#14

BB#14: derived from LLVM BB %if.end42
    Predecessors according to CFG: BB#13 BB#12
	%vreg126<def> = MovGR %ZERO, 1; CPURegs:%vreg126
	STH %vreg126<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg126
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#15: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#10
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg23<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg23
	%vreg24<def> = LT %vreg23<kill>, %vreg22<kill>; CPURegs:%vreg24,%vreg23,%vreg22
	JC %vreg24<kill>, <BB#17>; CPURegs:%vreg24
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#17(16)

BB#16: derived from LLVM BB %if.then46
    Predecessors according to CFG: BB#15
	%vreg98<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg98
	%vreg99<def> = SHL %vreg98<kill>, %vreg6; CPURegs:%vreg99,%vreg98,%vreg6
	%vreg100<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg100
	%vreg101<def> = LDHZ %vreg100, 6; mem:LD2[%arrayidx47] CPURegs:%vreg101,%vreg100
	%vreg102<def> = MovGR %ZERO, 32783; CPURegs:%vreg102
	%vreg103<def> = AND %vreg101<kill>, %vreg102<kill>; CPURegs:%vreg103,%vreg101,%vreg102
	%vreg104<def> = ORu %vreg103<kill>, %vreg99<kill>; CPURegs:%vreg104,%vreg103,%vreg99
	STH %vreg104<kill>, %vreg100, 6; mem:ST2[%arrayidx53] CPURegs:%vreg104,%vreg100
	%vreg105<def> = MovGR %ZERO, 65535; CPURegs:%vreg105
	STH %vreg105<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg105
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#17: derived from LLVM BB %if.else54
    Predecessors according to CFG: BB#15
	%vreg25<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg25
	%vreg26<def> = LDHZ %vreg25<kill>, 6; mem:LD2[%arrayidx55] CPURegs:%vreg26,%vreg25
	%vreg27<def> = MovGR %ZERO, 32768; CPURegs:%vreg27
	%vreg28<def> = AND %vreg26<kill>, %vreg27<kill>; CPURegs:%vreg28,%vreg26,%vreg27
	STH %vreg28<kill>, <fi#6>, 0; mem:ST2[%sign](align=4) CPURegs:%vreg28
	%vreg29<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg29
	%vreg30<def> = LDHZ %vreg29, 6; mem:LD2[%arrayidx59] CPURegs:%vreg30,%vreg29
	%vreg31<def> = MovGR %ZERO, 15; CPURegs:%vreg31
	%vreg32<def> = AND %vreg30<kill>, %vreg31<kill>; CPURegs:%vreg32,%vreg30,%vreg31
	%vreg33<def> = MovGR %ZERO, 16; CPURegs:%vreg33
	%vreg34<def> = ORu %vreg32<kill>, %vreg33; CPURegs:%vreg34,%vreg32,%vreg33
	STH %vreg34<kill>, %vreg29, 6; mem:ST2[%arrayidx64] CPURegs:%vreg34,%vreg29
	%vreg35<def> = LD <fi#3>, 0; mem:LD4[%lexp] CPURegs:%vreg35
	%vreg36<def> = ADDiu %vreg35<kill>, -1; CPURegs:%vreg36,%vreg35
	ST %vreg36, <fi#3>, 0; mem:ST4[%lexp] CPURegs:%vreg36
	%vreg37<def> = LTI %vreg36, -52; CPURegs:%vreg37,%vreg36
	JNC %vreg37<kill>, <BB#19>; CPURegs:%vreg37
	Jmp <BB#18>
    Successors according to CFG: BB#18(16) BB#19(16)

BB#18: derived from LLVM BB %if.then67
    Predecessors according to CFG: BB#17
	%vreg91<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg91
	%vreg92<def> = LDH <fi#6>, 0; mem:LD2[%sign](align=4) CPURegs:%vreg92
	STH %vreg92<kill>, %vreg91<kill>, 6; mem:ST2[%arrayidx68] CPURegs:%vreg92,%vreg91
	%vreg93<def> = MovGR %ZERO, 0; CPURegs:%vreg93
	%vreg94<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg94
	STH %vreg93, %vreg94<kill>, 4; mem:ST2[%arrayidx69] CPURegs:%vreg93,%vreg94
	%vreg95<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg95
	STH %vreg93, %vreg95<kill>, 2; mem:ST2[%arrayidx70] CPURegs:%vreg93,%vreg95
	%vreg96<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg96
	STH %vreg93, %vreg96<kill>, 0; mem:ST2[%arrayidx712] CPURegs:%vreg93,%vreg96
	STH %vreg93, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg93
	Jmp <BB#25>
    Successors according to CFG: BB#25

BB#19: derived from LLVM BB %if.else72
    Predecessors according to CFG: BB#17
	%vreg38<def> = LDH <fi#3>, 0; mem:LD2[%lexp](align=4) CPURegs:%vreg38
	STH %vreg38<kill>, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg38
    Successors according to CFG: BB#20

BB#20: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#19 BB#21
	%vreg39<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg39
	%vreg40<def> = LTI %vreg39<kill>, -15; CPURegs:%vreg40,%vreg39
	JNC %vreg40<kill>, <BB#22>; CPURegs:%vreg40
	Jmp <BB#21>
    Successors according to CFG: BB#21(124) BB#22(4)

BB#21: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#20
	%vreg81<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg81
	%vreg82<def> = LDH %vreg81, 2; mem:LD2[%arrayidx77] CPURegs:%vreg82,%vreg81
	STH %vreg82<kill>, %vreg81, 0; mem:ST2[%arrayidx783] CPURegs:%vreg82,%vreg81
	%vreg83<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg83
	%vreg84<def> = LDH %vreg83, 4; mem:LD2[%arrayidx79] CPURegs:%vreg84,%vreg83
	STH %vreg84<kill>, %vreg83, 2; mem:ST2[%arrayidx80] CPURegs:%vreg84,%vreg83
	%vreg85<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg85
	%vreg86<def> = LDH %vreg85, 6; mem:LD2[%arrayidx81] CPURegs:%vreg86,%vreg85
	STH %vreg86<kill>, %vreg85, 4; mem:ST2[%arrayidx82] CPURegs:%vreg86,%vreg85
	%vreg87<def> = MovGR %ZERO, 0; CPURegs:%vreg87
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg88
	STH %vreg87<kill>, %vreg88<kill>, 6; mem:ST2[%arrayidx83] CPURegs:%vreg87,%vreg88
	%vreg89<def> = LDH <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg89
	%vreg90<def> = ADDiu %vreg89<kill>, 16; CPURegs:%vreg90,%vreg89
	STH %vreg90<kill>, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg90
	Jmp <BB#20>
    Successors according to CFG: BB#20

BB#22: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#20
	%vreg41<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 0; CPURegs:%vreg42
	%vreg43<def> = SUBu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	STH %vreg43, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg43
	%vreg44<def> = MovGR %ZERO, 65535; CPURegs:%vreg44
	%vreg45<def> = AND %vreg43, %vreg44; CPURegs:%vreg45,%vreg43,%vreg44
	%vreg46<def> = EQI %vreg45<kill>, 0; CPURegs:%vreg46,%vreg45
	JC %vreg46<kill>, <BB#24>; CPURegs:%vreg46
	Jmp <BB#23>
    Successors according to CFG: BB#23(20) BB#24(12)

BB#23: derived from LLVM BB %if.then93
    Predecessors according to CFG: BB#22
	%vreg47<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg47
	%vreg49<def> = SUBu %vreg33, %vreg47; CPURegs:%vreg49,%vreg33,%vreg47
	%vreg50<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg50
	%vreg51<def> = LDHZ %vreg50, 2; mem:LD2[%arrayidx98] CPURegs:%vreg51,%vreg50
	%vreg52<def> = SHL %vreg51<kill>, %vreg49<kill>; CPURegs:%vreg52,%vreg51,%vreg49
	%vreg53<def> = LDHZ %vreg50, 0; mem:LD2[%arrayidx944] CPURegs:%vreg53,%vreg50
	%vreg54<def> = SRL %vreg53<kill>, %vreg47; CPURegs:%vreg54,%vreg53,%vreg47
	%vreg55<def> = ORu %vreg54<kill>, %vreg52<kill>; CPURegs:%vreg55,%vreg54,%vreg52
	STH %vreg55<kill>, %vreg50, 0; mem:ST2[%arrayidx1055] CPURegs:%vreg55,%vreg50
	%vreg56<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg56
	%vreg57<def> = SUBu %vreg33, %vreg56; CPURegs:%vreg57,%vreg33,%vreg56
	%vreg58<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg58
	%vreg59<def> = LDHZ %vreg58, 4; mem:LD2[%arrayidx110] CPURegs:%vreg59,%vreg58
	%vreg60<def> = SHL %vreg59<kill>, %vreg57<kill>; CPURegs:%vreg60,%vreg59,%vreg57
	%vreg61<def> = LDHZ %vreg58, 2; mem:LD2[%arrayidx106] CPURegs:%vreg61,%vreg58
	%vreg62<def> = SRL %vreg61<kill>, %vreg56; CPURegs:%vreg62,%vreg61,%vreg56
	%vreg63<def> = ORu %vreg62<kill>, %vreg60<kill>; CPURegs:%vreg63,%vreg62,%vreg60
	STH %vreg63<kill>, %vreg58, 2; mem:ST2[%arrayidx117] CPURegs:%vreg63,%vreg58
	%vreg64<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg64
	%vreg65<def> = SUBu %vreg33, %vreg64; CPURegs:%vreg65,%vreg33,%vreg64
	%vreg66<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg66
	%vreg67<def> = LDHZ %vreg66, 6; mem:LD2[%arrayidx122] CPURegs:%vreg67,%vreg66
	%vreg68<def> = SHL %vreg67<kill>, %vreg65<kill>; CPURegs:%vreg68,%vreg67,%vreg65
	%vreg69<def> = LDHZ %vreg66, 4; mem:LD2[%arrayidx118] CPURegs:%vreg69,%vreg66
	%vreg70<def> = SRL %vreg69<kill>, %vreg64; CPURegs:%vreg70,%vreg69,%vreg64
	%vreg71<def> = ORu %vreg70<kill>, %vreg68<kill>; CPURegs:%vreg71,%vreg70,%vreg68
	STH %vreg71<kill>, %vreg66, 4; mem:ST2[%arrayidx129] CPURegs:%vreg71,%vreg66
	%vreg72<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg72
	%vreg73<def> = LDHZ %vreg72, 6; mem:LD2[%arrayidx131] CPURegs:%vreg73,%vreg72
	%vreg74<def> = LDHS <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg74
	%vreg75<def> = SRL %vreg73<kill>, %vreg74<kill>; CPURegs:%vreg75,%vreg73,%vreg74
	STH %vreg75<kill>, %vreg72, 6; mem:ST2[%arrayidx131] CPURegs:%vreg75,%vreg72
    Successors according to CFG: BB#24

BB#24: derived from LLVM BB %if.end135
    Predecessors according to CFG: BB#22 BB#23
	%vreg76<def> = LD <fi#4>, 0; mem:LD4[%ps] CPURegs:%vreg76
	%vreg77<def> = LDH %vreg76, 6; mem:LD2[%arrayidx137] CPURegs:%vreg77,%vreg76
	%vreg78<def> = LDH <fi#6>, 0; mem:LD2[%sign](align=4) CPURegs:%vreg78
	%vreg79<def> = ORu %vreg77<kill>, %vreg78<kill>; CPURegs:%vreg79,%vreg77,%vreg78
	STH %vreg79<kill>, %vreg76, 6; mem:ST2[%arrayidx137] CPURegs:%vreg79,%vreg76
	STH %vreg44, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg44
    Successors according to CFG: BB#25

BB#25: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#24 BB#18 BB#16 BB#14 BB#6 BB#5
	%vreg143<def> = LDHS <fi#0>, 0; mem:LD2[%retval](align=4) CPURegs:%vreg143
	%V0<def> = COPY %vreg143; CPURegs:%vreg143
	RetLR %V0<imp-use>

# End machine code for function _Dscale.

