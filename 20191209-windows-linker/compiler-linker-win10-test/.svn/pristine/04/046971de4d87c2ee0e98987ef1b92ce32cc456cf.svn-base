
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 3; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 2; CPURegs:%vreg3
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %SP; CPURegs:%vreg5
	%vreg6<def> = LEA <fi#3>, 0; CPURegs:%vreg6
	ST %vreg6, %vreg5, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg5
	%vreg7<def> = LEA <fi#2>, 0; CPURegs:%vreg7
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <ga:@inFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %V0; CPURegs:%vreg8
	ST %vreg8, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg8
	%vreg9<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %SP; CPURegs:%vreg10
	ST %vreg6, %vreg10, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg10
	%A0<def> = COPY %vreg9; CPURegs:%vreg9
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <ga:@outFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %V0; CPURegs:%vreg11
	ST %vreg11, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function inFunct: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg5<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg5
	ST %vreg3, <fi#0>, 0; mem:ST4[%a.addr] CPURegs:%vreg3
	ST %vreg4, <fi#1>, 0; mem:ST4[%b.addr] CPURegs:%vreg4
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%c.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%b.addr] CPURegs:%vreg6
	%vreg7<def> = LD %vreg6<kill>, 0; mem:LD4[%1] CPURegs:%vreg7,%vreg6
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%a.addr] CPURegs:%vreg8
	%vreg9<def> = LE %vreg8<kill>, %vreg7<kill>; CPURegs:%vreg9,%vreg8,%vreg7
	JC %vreg9<kill>, <BB#2>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#0
	%vreg11<def> = LD <fi#1>, 0; mem:LD4[%b.addr] CPURegs:%vreg11
	%vreg0<def> = LD %vreg11<kill>, 0; mem:LD4[%3] CPURegs:%vreg0,%vreg11
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%c.addr] CPURegs:%vreg10
	%vreg1<def> = LD %vreg10<kill>, 0; mem:LD4[%5] CPURegs:%vreg1,%vreg10
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = PHI %vreg1, <BB#2>, %vreg0, <BB#1>; CPURegs:%vreg2,%vreg1,%vreg0
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function inFunct.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 3; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg2
	%vreg3<def> = MovGR %ZERO, 2; CPURegs:%vreg3
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg3
	%vreg4<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %SP; CPURegs:%vreg5
	%vreg6<def> = LEA <fi#3>, 0; CPURegs:%vreg6
	ST %vreg6, %vreg5, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg5
	%vreg7<def> = LEA <fi#2>, 0; CPURegs:%vreg7
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <ga:@inFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %V0; CPURegs:%vreg8
	ST %vreg8, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg8
	%vreg9<def> = LD <fi#1>, 0; mem:LD4[%a] CPURegs:%vreg9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %SP; CPURegs:%vreg10
	ST %vreg6, %vreg10, 8; mem:ST4[<unknown>] CPURegs:%vreg6,%vreg10
	%A0<def> = COPY %vreg9; CPURegs:%vreg9
	%A1<def> = COPY %vreg7; CPURegs:%vreg7
	CALL <ga:@outFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %V0; CPURegs:%vreg11
	ST %vreg11, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg11
	%V0<def> = COPY %vreg11; CPURegs:%vreg11
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function inFunct: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg5<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg5
	ST %vreg3, <fi#0>, 0; mem:ST4[%a.addr] CPURegs:%vreg3
	ST %vreg4, <fi#1>, 0; mem:ST4[%b.addr] CPURegs:%vreg4
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%c.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%b.addr] CPURegs:%vreg6
	%vreg7<def> = LD %vreg6<kill>, 0; mem:LD4[%1] CPURegs:%vreg7,%vreg6
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%a.addr] CPURegs:%vreg8
	%vreg9<def> = LE %vreg8<kill>, %vreg7<kill>; CPURegs:%vreg9,%vreg8,%vreg7
	JC %vreg9<kill>, <BB#2>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#0
	%vreg11<def> = LD <fi#1>, 0; mem:LD4[%b.addr] CPURegs:%vreg11
	%vreg0<def> = LD %vreg11<kill>, 0; mem:LD4[%3] CPURegs:%vreg0,%vreg11
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%c.addr] CPURegs:%vreg10
	%vreg1<def> = LD %vreg10<kill>, 0; mem:LD4[%5] CPURegs:%vreg1,%vreg10
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = PHI %vreg1, <BB#2>, %vreg0, <BB#1>; CPURegs:%vreg2,%vreg1,%vreg0
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function inFunct.

