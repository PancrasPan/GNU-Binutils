	.text
	.file	"./testcase_8slots/fir.ll"
	.globl	pin_down
	.align	2
	.type	pin_down,@function
pin_down:                               # @pin_down
# BB#0:                                 # %entry
{
	addi	GR30, GR30, -16
}
{
	load32	GR2, GR30, 6
	store32	GR4, GR30, 3
	store32	GR5, GR30, 2
}
{
	store32	GR2, GR30, 1
	movigl	GR2,1
}
{
	movigh	GR2,0
}
{
	jmp	$BB0_1
}
{
	nop
}
{
	nop
}
$BB0_2:                                 # %for.body
                                        #   in Loop: Header=BB0_1 Depth=1
{
	load32	GR2, GR30, 3
}
{
	nop
}
{
	nop
}
{
	addi	GR3, GR2, 4
	load32	GR4, GR30, 0
}
{
	nop
}
{
	store32	GR3, GR30, 3
}
{
	store32	GR4, GR2, 0
}
{
	load32	GR2, GR30, 2
}
{
	nop
}
{
	nop
}
{
	addi	GR3, GR2, 4
	load32	GR4, GR30, 0
}
{
	nop
}
{
	store32	GR3, GR30, 2
}
{
	store32	GR4, GR2, 0
}
{
	load32	GR2, GR30, 0
}
{
	nop
}
{
	nop
}
{
	addi	GR2, GR2, 1
}
$BB0_1:                                 # %for.cond
                                        # =>This Inner Loop Header: Depth=1
{
	store32	GR2, GR30, 0
}
{
	load32	GR2, GR30, 0
}
{
	nop
}
{
	lti	 GR2, 17
}
{
	jc	 $BB0_2
}
{
	nop
}
{
	nop
}
# BB#3:                                 # %for.end
{
	addi	GR30, GR30, 16
}
{
	ret	GR31
}
{
	nop
}
{
	nop
}
$tmp0:
	.size	pin_down, ($tmp0)-pin_down

	.globl	main
	.align	2
	.type	main,@function
main:                                   # @main
# BB#0:                                 # %entry
{
	addi	GR30, GR30, -56
}
{
	store32	GR31, GR30, 13
	store32	GR18, GR30, 12
}
{
	store32	GR17, GR30, 11
	store32	GR16, GR30, 10
	movigl	GR18,0
}
{
	movigh	GR18,0
}
{
	store32	GR18, GR30, 9
	load32	GR2, GR30, 4
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 2
	movigh	GR16,%hi(main.x)
}
{
	movigl	GR16,%lo(main.x)
	movigh	GR17,%hi(main.h)
}
{
	movigl	GR17,%lo(main.h)
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	pin_down
}
{
	nop
}
{
	nop
}
{
	addi	GR2, GR17, 60
}
{
	store32	GR2, GR30, 5
	addi	GR2, GR16, 60
}
{
	store32	GR2, GR30, 7
	addi	GR2, GR16, 56
}
{
	store32	GR2, GR30, 6
	store32	GR18, GR30, 4
}
{
	store32	GR18, GR30, 8
}
{
	jmp	$BB1_1
}
{
	nop
}
{
	nop
}
$BB1_2:                                 # %for.body
                                        #   in Loop: Header=BB1_1 Depth=1
{
	load32	GR2, GR30, 5
}
{
	nop
}
{
	nop
}
{
	addi	GR3, GR2, -4
}
{
	store32	GR3, GR30, 5
}
{
	load32	GR2, GR2, 0
	load32	GR3, GR30, 7
}
{
	nop
}
{
	nop
}
{
	load32	GR3, GR3, 0
}
{
	nop
}
{
	nop
}
{
	mul32	GR2, GR2, GR3
	load32	GR3, GR30, 4
}
{
	nop
}
{
	nop
}
{
	add	GR2, GR3, GR2
}
{
	store32	GR2, GR30, 4
	load32	GR2, GR30, 6
}
{
	nop
}
{
	nop
}
{
	addi	GR3, GR2, -4
}
{
	store32	GR3, GR30, 6
}
{
	load32	GR2, GR2, 0
	load32	GR3, GR30, 7
}
{
	nop
}
{
	nop
}
{
	addi	GR4, GR3, -4
}
{
	store32	GR4, GR30, 7
}
{
	store32	GR2, GR3, 0
}
{
	load32	GR2, GR30, 8
}
{
	nop
}
{
	nop
}
{
	addi	GR2, GR2, 1
}
{
	store32	GR2, GR30, 8
}
$BB1_1:                                 # %for.cond
                                        # =>This Inner Loop Header: Depth=1
{
	load32	GR2, GR30, 8
}
{
	nop
}
{
	lti	 GR2, 15
}
{
	jc	 $BB1_2
}
{
	nop
}
{
	nop
}
# BB#3:                                 # %for.end
{
	load32	GR2, GR30, 7
}
{
	nop
}
{
	nop
}
{
	load32	GR2, GR2, 0
	load32	GR3, GR30, 5
}
{
	nop
}
{
	nop
}
{
	load32	GR3, GR3, 0
}
{
	nop
}
{
	nop
}
{
	mul32	GR2, GR3, GR2
	load32	GR3, GR30, 4
}
{
	nop
}
{
	nop
}
{
	add	GR2, GR3, GR2
}
{
	store32	GR2, GR30, 4
	movigh	GR2,%hi(main.x0)
}
{
	movigl	GR2,%lo(main.x0)
}
{
	load32	GR2, GR2, 0
}
{
	nop
}
{
	load32	GR3, GR30, 7
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR3, 0
}
{
	load32	GR2, GR30, 4
}
{
	nop
}
{
	nop
}
{
	store32	GR2, GR30, 2
}
{
	movg2g	GR4,GR16
}
{
	movg2g	GR5,GR17
}
{
	call	pin_down
}
{
	nop
}
{
	nop
}
{
	load32	GR2, GR30, 4
	load32	GR16, GR30, 10
}
{
	load32	GR17, GR30, 11
	load32	GR18, GR30, 12
}
{
	load32	GR31, GR30, 13
	addi	GR30, GR30, 56
}
{
	ret	GR31
}
{
	nop
}
{
	nop
}
$tmp1:
	.size	main, ($tmp1)-main

	.type	main.x,@object          # @main.x
	.local	main.x
	.comm	main.x,64,4
	.type	main.h,@object          # @main.h
	.local	main.h
	.comm	main.h,64,4
	.type	main.x0,@object         # @main.x0
	.data
	.align	2
main.x0:
	.4byte	100                     # 0x64
	.size	main.x0, 4


