
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name mainsort.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/mainsort.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/mainsort.ll -x c ./testcase_8slots/mainsort.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function check: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	%vreg5<def> = COPY %vreg3; CPURegs:%vreg5,%vreg3
	%vreg7<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg1, <BB#2>; CPURegs:%vreg0,%vreg6,%vreg1
	%vreg9<def> = GE %vreg0, %vreg7; CPURegs:%vreg9,%vreg0,%vreg7
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	JC %vreg9<kill>, <BB#3>; CPURegs:%vreg9
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = SHL %vreg0, %vreg11; CPURegs:%vreg12,%vreg0,%vreg11
	%vreg13<def> = ADDu %vreg5, %vreg12<kill>; CPURegs:%vreg13,%vreg5,%vreg12
	%vreg1<def> = ADDiu %vreg0, 1; CPURegs:%vreg1,%vreg0
	%vreg14<def> = SHL %vreg1, %vreg11; CPURegs:%vreg14,%vreg1,%vreg11
	%vreg15<def> = ADDu %vreg5, %vreg14<kill>; CPURegs:%vreg15,%vreg5,%vreg14
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg17,%vreg13
	%vreg18<def> = LE %vreg17<kill>, %vreg16<kill>; CPURegs:%vreg18,%vreg17,%vreg16
	%vreg10<def> = MovGR %ZERO, -2; CPURegs:%vreg10
	JC %vreg18<kill>, <BB#1>; CPURegs:%vreg18
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#1(124)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg10, <BB#2>; CPURegs:%vreg2,%vreg8,%vreg10
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function check.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=20, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg4<def> = MovIGH %ZERO, <ga:@main.Array>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@main.Array>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = LD %vreg5, 16; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+16] CPURegs:%vreg6,%vreg5
	ST %vreg6<kill>, <fi#0>, 16; mem:ST4[%0+16] CPURegs:%vreg6
	%vreg7<def> = LD %vreg5, 12; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+12] CPURegs:%vreg7,%vreg5
	ST %vreg7<kill>, <fi#0>, 12; mem:ST4[%0+12] CPURegs:%vreg7
	%vreg8<def> = LD %vreg5, 8; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+8] CPURegs:%vreg8,%vreg5
	ST %vreg8<kill>, <fi#0>, 8; mem:ST4[%0+8] CPURegs:%vreg8
	%vreg9<def> = LD %vreg5, 4; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+4] CPURegs:%vreg9,%vreg5
	ST %vreg9<kill>, <fi#0>, 4; mem:ST4[%0+4] CPURegs:%vreg9
	%vreg10<def> = LD %vreg5, 0; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)] CPURegs:%vreg10,%vreg5
	ST %vreg10<kill>, <fi#0>, 0; mem:ST4[%0] CPURegs:%vreg10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %SP; CPURegs:%vreg11
	%vreg12<def> = MovGR %ZERO, 4; CPURegs:%vreg12
	ST %vreg12<kill>, %vreg11, 8; mem:ST4[<unknown>] CPURegs:%vreg12,%vreg11
	%vreg0<def> = LEA <fi#0>, 0; CPURegs:%vreg0
	%vreg13<def> = MovGR %ZERO, 0; CPURegs:%vreg13
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg13; CPURegs:%vreg13
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = COPY %V0; CPURegs:%vreg14
	%vreg3<def> = MovGR %ZERO, -1; CPURegs:%vreg3
	%vreg15<def> = NEQI %vreg14, 0; CPURegs:%vreg15,%vreg14
	JC %vreg15<kill>, <BB#2>; CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#1(12) BB#2(20)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %SP; CPURegs:%vreg16
	%vreg17<def> = MovGR %ZERO, 4; CPURegs:%vreg17
	ST %vreg17<kill>, %vreg16, 8; mem:ST4[<unknown>] CPURegs:%vreg17,%vreg16
	%vreg18<def> = MovGR %ZERO, 0; CPURegs:%vreg18
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg18; CPURegs:%vreg18
	CALL <ga:@check>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg19<def> = COPY %V0; CPURegs:%vreg19
	%vreg1<def> = COPY %vreg19; CPURegs:%vreg1,%vreg19
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg2,%vreg3,%vreg1
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function check: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	%vreg5<def> = COPY %vreg3; CPURegs:%vreg5,%vreg3
	%vreg7<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#2
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg1, <BB#2>; CPURegs:%vreg0,%vreg6,%vreg1
	%vreg9<def> = GE %vreg0, %vreg7; CPURegs:%vreg9,%vreg0,%vreg7
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	JC %vreg9<kill>, <BB#3>; CPURegs:%vreg9
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = SHL %vreg0, %vreg11; CPURegs:%vreg12,%vreg0,%vreg11
	%vreg13<def> = ADDu %vreg5, %vreg12<kill>; CPURegs:%vreg13,%vreg5,%vreg12
	%vreg1<def> = ADDiu %vreg0, 1; CPURegs:%vreg1,%vreg0
	%vreg14<def> = SHL %vreg1, %vreg11; CPURegs:%vreg14,%vreg1,%vreg11
	%vreg15<def> = ADDu %vreg5, %vreg14<kill>; CPURegs:%vreg15,%vreg5,%vreg14
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg17,%vreg13
	%vreg18<def> = LE %vreg17<kill>, %vreg16<kill>; CPURegs:%vreg18,%vreg17,%vreg16
	%vreg10<def> = MovGR %ZERO, -2; CPURegs:%vreg10
	JC %vreg18<kill>, <BB#1>; CPURegs:%vreg18
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#1(124)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg8, <BB#1>, %vreg10, <BB#2>; CPURegs:%vreg2,%vreg8,%vreg10
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function check.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=20, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg4<def> = MovIGH %ZERO, <ga:@main.Array>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@main.Array>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = LD %vreg5, 16; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+16] CPURegs:%vreg6,%vreg5
	ST %vreg6<kill>, <fi#0>, 16; mem:ST4[%0+16] CPURegs:%vreg6
	%vreg7<def> = LD %vreg5, 12; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+12] CPURegs:%vreg7,%vreg5
	ST %vreg7<kill>, <fi#0>, 12; mem:ST4[%0+12] CPURegs:%vreg7
	%vreg8<def> = LD %vreg5, 8; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+8] CPURegs:%vreg8,%vreg5
	ST %vreg8<kill>, <fi#0>, 8; mem:ST4[%0+8] CPURegs:%vreg8
	%vreg9<def> = LD %vreg5, 4; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)+4] CPURegs:%vreg9,%vreg5
	ST %vreg9<kill>, <fi#0>, 4; mem:ST4[%0+4] CPURegs:%vreg9
	%vreg10<def> = LD %vreg5, 0; mem:LD4[bitcast ([5 x i32]* @main.Array to i8*)] CPURegs:%vreg10,%vreg5
	ST %vreg10<kill>, <fi#0>, 0; mem:ST4[%0] CPURegs:%vreg10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg11<def> = COPY %SP; CPURegs:%vreg11
	%vreg12<def> = MovGR %ZERO, 4; CPURegs:%vreg12
	ST %vreg12<kill>, %vreg11, 8; mem:ST4[<unknown>] CPURegs:%vreg12,%vreg11
	%vreg0<def> = LEA <fi#0>, 0; CPURegs:%vreg0
	%vreg13<def> = MovGR %ZERO, 0; CPURegs:%vreg13
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg13; CPURegs:%vreg13
	CALL <ga:@qsort>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg14<def> = COPY %V0; CPURegs:%vreg14
	%vreg3<def> = MovGR %ZERO, -1; CPURegs:%vreg3
	%vreg15<def> = NEQI %vreg14, 0; CPURegs:%vreg15,%vreg14
	JC %vreg15<kill>, <BB#2>; CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#1(12) BB#2(20)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg16<def> = COPY %SP; CPURegs:%vreg16
	%vreg17<def> = MovGR %ZERO, 4; CPURegs:%vreg17
	ST %vreg17<kill>, %vreg16, 8; mem:ST4[<unknown>] CPURegs:%vreg17,%vreg16
	%vreg18<def> = MovGR %ZERO, 0; CPURegs:%vreg18
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg18; CPURegs:%vreg18
	CALL <ga:@check>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg19<def> = COPY %V0; CPURegs:%vreg19
	%vreg1<def> = COPY %vreg19; CPURegs:%vreg1,%vreg19
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg2,%vreg3,%vreg1
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.

