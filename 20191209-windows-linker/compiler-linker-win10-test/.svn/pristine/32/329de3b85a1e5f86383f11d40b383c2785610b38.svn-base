
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name loopbranch.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/loopbranch.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/loopbranch.ll -x c ./testcase_8slots/loopbranch.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
./testcase_8slots/loopbranch.c:11:6: warning: expression result unused [-Wunused-value]
        for(i; i < arraySize; i += 2){
            ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg13<def> = MovIGH %ZERO, <ga:@arraySize>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@arraySize>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD %vreg14<kill>, 0; mem:LD4[@arraySize](tbaa=<badref>) CPURegs:%vreg15,%vreg14
	%vreg16<def> = MovGR %ZERO, 2; CPURegs:%vreg16
	%vreg17<def> = LT %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	%vreg12<def> = MovGR %ZERO, 0; CPURegs:%vreg12
	%vreg11<def> = MovGR %ZERO, 1; CPURegs:%vreg11
	JC %vreg17<kill>, <BB#6>; CPURegs:%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %for.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg20<def> = MovIGH %ZERO, <ga:@arraySize>[TF=3]; CPURegs:%vreg20
	%vreg21<def,tied1> = MovIGL %vreg20<tied0>, <ga:@arraySize>[TF=4]; CPURegs:%vreg21,%vreg20
	%vreg0<def> = LD %vreg21<kill>, 0; mem:LD4[@arraySize](tbaa=<badref>) CPURegs:%vreg0,%vreg21
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#5
	%vreg1<def> = PHI %vreg18, <BB#1>, %vreg8, <BB#5>; CPURegs:%vreg1,%vreg18,%vreg8
	%vreg2<def> = PHI %vreg19, <BB#1>, %vreg7, <BB#5>; CPURegs:%vreg2,%vreg19,%vreg7
	%vreg22<def> = MovGR %ZERO, 2; CPURegs:%vreg22
	%vreg23<def> = SHL %vreg1, %vreg22<kill>; CPURegs:%vreg23,%vreg1,%vreg22
	%vreg24<def> = MovIGH %ZERO, <ga:@Array1>[TF=3]; CPURegs:%vreg24
	%vreg25<def,tied1> = MovIGL %vreg24<tied0>, <ga:@Array1>[TF=4]; CPURegs:%vreg25,%vreg24
	%vreg26<def> = ADDu %vreg25<kill>, %vreg23; CPURegs:%vreg26,%vreg25,%vreg23
	%vreg27<def> = MovIGH %ZERO, <ga:@Array2>[TF=3]; CPURegs:%vreg27
	%vreg28<def,tied1> = MovIGL %vreg27<tied0>, <ga:@Array2>[TF=4]; CPURegs:%vreg28,%vreg27
	%vreg29<def> = ADDu %vreg28<kill>, %vreg23; CPURegs:%vreg29,%vreg28,%vreg23
	%vreg4<def> = LD %vreg29<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg4,%vreg29
	%vreg3<def> = LD %vreg26<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg3,%vreg26
	%vreg30<def> = GE %vreg3, %vreg4; CPURegs:%vreg30,%vreg3,%vreg4
	JC %vreg30<kill>, <BB#4>; CPURegs:%vreg30
	Jmp <BB#3>
    Successors according to CFG: BB#3(16) BB#4(16)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg5<def> = ADDu %vreg4, %vreg2; CPURegs:%vreg5,%vreg4,%vreg2
	%vreg31<def> = LTI %vreg5, 11; CPURegs:%vreg31,%vreg5
	JNC %vreg31<kill>, <BB#6>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#6(4) BB#5(124)

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg6<def> = ADDu %vreg3, %vreg2; CPURegs:%vreg6,%vreg3,%vreg2
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#4 BB#3
	%vreg7<def> = PHI %vreg6, <BB#4>, %vreg5, <BB#3>; CPURegs:%vreg7,%vreg6,%vreg5
	%vreg8<def> = ADDiu %vreg1, 2; CPURegs:%vreg8,%vreg1
	%vreg32<def> = LT %vreg8, %vreg0; CPURegs:%vreg32,%vreg8,%vreg0
	JC %vreg32<kill>, <BB#2>; CPURegs:%vreg32
	Jmp <BB#6>
    Successors according to CFG: BB#2(124) BB#6(4)

BB#6: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#3 BB#5
	%vreg9<def> = PHI %vreg11, <BB#0>, %vreg1, <BB#3>, %vreg8, <BB#5>; CPURegs:%vreg9,%vreg11,%vreg1,%vreg8
	%vreg10<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#3>, %vreg7, <BB#5>; CPURegs:%vreg10,%vreg12,%vreg5,%vreg7
	%vreg33<def> = ADDu %vreg10, %vreg9; CPURegs:%vreg33,%vreg10,%vreg9
	%V0<def> = COPY %vreg33; CPURegs:%vreg33
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg13<def> = MovIGH %ZERO, <ga:@arraySize>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@arraySize>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD %vreg14<kill>, 0; mem:LD4[@arraySize](tbaa=<badref>) CPURegs:%vreg15,%vreg14
	%vreg16<def> = MovGR %ZERO, 2; CPURegs:%vreg16
	%vreg17<def> = LT %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	%vreg12<def> = MovGR %ZERO, 0; CPURegs:%vreg12
	%vreg11<def> = MovGR %ZERO, 1; CPURegs:%vreg11
	JC %vreg17<kill>, <BB#6>; CPURegs:%vreg17
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %for.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg19<def> = MovGR %ZERO, 0; CPURegs:%vreg19
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg20<def> = MovIGH %ZERO, <ga:@arraySize>[TF=3]; CPURegs:%vreg20
	%vreg21<def,tied1> = MovIGL %vreg20<tied0>, <ga:@arraySize>[TF=4]; CPURegs:%vreg21,%vreg20
	%vreg0<def> = LD %vreg21<kill>, 0; mem:LD4[@arraySize](tbaa=<badref>) CPURegs:%vreg0,%vreg21
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#5
	%vreg1<def> = PHI %vreg18, <BB#1>, %vreg8, <BB#5>; CPURegs:%vreg1,%vreg18,%vreg8
	%vreg2<def> = PHI %vreg19, <BB#1>, %vreg7, <BB#5>; CPURegs:%vreg2,%vreg19,%vreg7
	%vreg22<def> = MovGR %ZERO, 2; CPURegs:%vreg22
	%vreg23<def> = SHL %vreg1, %vreg22<kill>; CPURegs:%vreg23,%vreg1,%vreg22
	%vreg24<def> = MovIGH %ZERO, <ga:@Array1>[TF=3]; CPURegs:%vreg24
	%vreg25<def,tied1> = MovIGL %vreg24<tied0>, <ga:@Array1>[TF=4]; CPURegs:%vreg25,%vreg24
	%vreg26<def> = ADDu %vreg25<kill>, %vreg23; CPURegs:%vreg26,%vreg25,%vreg23
	%vreg27<def> = MovIGH %ZERO, <ga:@Array2>[TF=3]; CPURegs:%vreg27
	%vreg28<def,tied1> = MovIGL %vreg27<tied0>, <ga:@Array2>[TF=4]; CPURegs:%vreg28,%vreg27
	%vreg29<def> = ADDu %vreg28<kill>, %vreg23; CPURegs:%vreg29,%vreg28,%vreg23
	%vreg4<def> = LD %vreg29<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg4,%vreg29
	%vreg3<def> = LD %vreg26<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg3,%vreg26
	%vreg30<def> = GE %vreg3, %vreg4; CPURegs:%vreg30,%vreg3,%vreg4
	JC %vreg30<kill>, <BB#4>; CPURegs:%vreg30
	Jmp <BB#3>
    Successors according to CFG: BB#3(16) BB#4(16)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg5<def> = ADDu %vreg4, %vreg2; CPURegs:%vreg5,%vreg4,%vreg2
	%vreg31<def> = LTI %vreg5, 11; CPURegs:%vreg31,%vreg5
	JNC %vreg31<kill>, <BB#6>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#6(4) BB#5(124)

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg6<def> = ADDu %vreg3, %vreg2; CPURegs:%vreg6,%vreg3,%vreg2
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#4 BB#3
	%vreg7<def> = PHI %vreg6, <BB#4>, %vreg5, <BB#3>; CPURegs:%vreg7,%vreg6,%vreg5
	%vreg8<def> = ADDiu %vreg1, 2; CPURegs:%vreg8,%vreg1
	%vreg32<def> = LT %vreg8, %vreg0; CPURegs:%vreg32,%vreg8,%vreg0
	JC %vreg32<kill>, <BB#2>; CPURegs:%vreg32
	Jmp <BB#6>
    Successors according to CFG: BB#2(124) BB#6(4)

BB#6: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#3 BB#5
	%vreg9<def> = PHI %vreg11, <BB#0>, %vreg1, <BB#3>, %vreg8, <BB#5>; CPURegs:%vreg9,%vreg11,%vreg1,%vreg8
	%vreg10<def> = PHI %vreg12, <BB#0>, %vreg5, <BB#3>, %vreg7, <BB#5>; CPURegs:%vreg10,%vreg12,%vreg5,%vreg7
	%vreg33<def> = ADDu %vreg10, %vreg9; CPURegs:%vreg33,%vreg10,%vreg9
	%V0<def> = COPY %vreg33; CPURegs:%vreg33
	RetLR %V0<imp-use>

# End machine code for function main.

