
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name dot_product.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/dot_product.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/dot_product.ll -x c ./testcase_8slots/dot_product.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2<kill>, %vreg0, 0; mem:ST4[%Z](tbaa=<badref>) CPURegs:%vreg2,%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg10,%vreg9
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	%vreg11<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg11
	%vreg8<def,tied1> = MovIGL %vreg11<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg8,%vreg11
	%vreg12<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg12
	%vreg7<def,tied1> = MovIGL %vreg12<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg7,%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg6,%vreg5
	%vreg1<def> = PHI %vreg7, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg1,%vreg7,%vreg3
	%vreg2<def> = PHI %vreg8, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg8,%vreg4
	%vreg13<def> = LD %vreg1, 0; mem:LD4[%p_a.04](tbaa=<badref>) CPURegs:%vreg13,%vreg1
	%vreg14<def> = LD %vreg2, 0; mem:LD4[%p_b.03](tbaa=<badref>) CPURegs:%vreg14,%vreg2
	%vreg15<def> = MUL32 %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD %vreg17, 0; mem:LD4[@main.Z](tbaa=<badref>) CPURegs:%vreg18,%vreg17
	%vreg19<def> = ADDu %vreg18<kill>, %vreg15<kill>; CPURegs:%vreg19,%vreg18,%vreg15
	ST %vreg19<kill>, %vreg17, 0; mem:ST4[@main.Z](tbaa=<badref>) CPURegs:%vreg19,%vreg17
	%vreg4<def> = ADDiu %vreg2, 4; CPURegs:%vreg4,%vreg2
	%vreg3<def> = ADDiu %vreg1, 4; CPURegs:%vreg3,%vreg1
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg20<def> = NEQI %vreg5, 2; CPURegs:%vreg20,%vreg5
	JC %vreg20<kill>, <BB#1>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg21<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg22,%vreg21
	%A0<def> = COPY %vreg22; CPURegs:%vreg22
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg23<def> = MovGR %ZERO, 0; CPURegs:%vreg23
	%V0<def> = COPY %vreg23; CPURegs:%vreg23
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2<kill>, %vreg0, 0; mem:ST4[%Z](tbaa=<badref>) CPURegs:%vreg2,%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg10,%vreg9
	%A0<def> = COPY %vreg10; CPURegs:%vreg10
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	%vreg11<def> = MovIGH %ZERO, <ga:@main.B>[TF=3]; CPURegs:%vreg11
	%vreg8<def,tied1> = MovIGL %vreg11<tied0>, <ga:@main.B>[TF=4]; CPURegs:%vreg8,%vreg11
	%vreg12<def> = MovIGH %ZERO, <ga:@main.A>[TF=3]; CPURegs:%vreg12
	%vreg7<def,tied1> = MovIGL %vreg12<tied0>, <ga:@main.A>[TF=4]; CPURegs:%vreg7,%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg5, <BB#1>; CPURegs:%vreg0,%vreg6,%vreg5
	%vreg1<def> = PHI %vreg7, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg1,%vreg7,%vreg3
	%vreg2<def> = PHI %vreg8, <BB#0>, %vreg4, <BB#1>; CPURegs:%vreg2,%vreg8,%vreg4
	%vreg13<def> = LD %vreg1, 0; mem:LD4[%p_a.04](tbaa=<badref>) CPURegs:%vreg13,%vreg1
	%vreg14<def> = LD %vreg2, 0; mem:LD4[%p_b.03](tbaa=<badref>) CPURegs:%vreg14,%vreg2
	%vreg15<def> = MUL32 %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD %vreg17, 0; mem:LD4[@main.Z](tbaa=<badref>) CPURegs:%vreg18,%vreg17
	%vreg19<def> = ADDu %vreg18<kill>, %vreg15<kill>; CPURegs:%vreg19,%vreg18,%vreg15
	ST %vreg19<kill>, %vreg17, 0; mem:ST4[@main.Z](tbaa=<badref>) CPURegs:%vreg19,%vreg17
	%vreg4<def> = ADDiu %vreg2, 4; CPURegs:%vreg4,%vreg2
	%vreg3<def> = ADDiu %vreg1, 4; CPURegs:%vreg3,%vreg1
	%vreg5<def> = ADDiu %vreg0, 1; CPURegs:%vreg5,%vreg0
	%vreg20<def> = NEQI %vreg5, 2; CPURegs:%vreg20,%vreg5
	JC %vreg20<kill>, <BB#1>; CPURegs:%vreg20
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg21<def> = MovIGH %ZERO, <ga:@main.Z>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@main.Z>[TF=4]; CPURegs:%vreg22,%vreg21
	%A0<def> = COPY %vreg22; CPURegs:%vreg22
	CALL <ga:@pin_down>, %A0, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg23<def> = MovGR %ZERO, 0; CPURegs:%vreg23
	%V0<def> = COPY %vreg23; CPURegs:%vreg23
	RetLR %V0<imp-use>

# End machine code for function main.

