
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/XLOG.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Log: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=2, align=4, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg3<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg3
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ST %vreg3<kill>, <fi#2>, 0; mem:ST4[%decflag.addr] CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LEA <fi#3>, 0; CPURegs:%vreg4
	%vreg5<def> = LEA <fi#1>, 0; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@_Dunscale>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	%vreg7<def> = EQI %vreg6, 0; CPURegs:%vreg7,%vreg6
	JC %vreg7<kill>, <BB#5>; CPURegs:%vreg7
	Jmp <BB#17>
    Successors according to CFG: BB#5(16) BB#17(32)

BB#17: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg2<def> = COPY %vreg6; CPURegs:%vreg2,%vreg6
	%vreg8<def> = EQI %vreg2, 1; CPURegs:%vreg8,%vreg2
	JC %vreg8<kill>, <BB#2>; CPURegs:%vreg8
	Jmp <BB#18>
    Successors according to CFG: BB#2(16) BB#18(16)

BB#18: derived from LLVM BB %entry
    Predecessors according to CFG: BB#17
	%vreg9<def> = NEQI %vreg2, 2; CPURegs:%vreg9,%vreg2
	JC %vreg9<kill>, <BB#6>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#18
	%vreg40<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg40
	%vreg41<def,tied1> = MovIGL %vreg40<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg41,%vreg40
	%vreg42<def> = MovGR %ZERO, 33; CPURegs:%vreg42
	ST %vreg42<kill>, %vreg41<kill>, 0; mem:ST4[@errno] CPURegs:%vreg42,%vreg41
	%vreg43<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg43
	%vreg44<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg44
	ST %vreg43<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg43
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#17
	%vreg22<def> = MovGR %ZERO, 128; CPURegs:%vreg22
	%vreg23<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg23
	%vreg24<def> = AND %vreg23<kill>, %vreg22<kill>; CPURegs:%vreg24,%vreg23,%vreg22
	%vreg25<def> = EQI %vreg24<kill>, 0; CPURegs:%vreg25,%vreg24
	JC %vreg25<kill>, <BB#4>; CPURegs:%vreg25
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg33<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg33
	%vreg34<def,tied1> = MovIGL %vreg33<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg34,%vreg33
	%vreg35<def> = MovGR %ZERO, 33; CPURegs:%vreg35
	ST %vreg35<kill>, %vreg34<kill>, 0; mem:ST4[@errno] CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg36
	%vreg37<def,tied1> = MovIGL %vreg36<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg37,%vreg36
	%vreg38<def> = LD %vreg37, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg38,%vreg37
	ST %vreg38<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg38
	%vreg39<def> = LD %vreg37, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg39,%vreg37
	ST %vreg39<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg39
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg26<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = MovGR %ZERO, 34; CPURegs:%vreg28
	ST %vreg28<kill>, %vreg27<kill>, 0; mem:ST4[@errno] CPURegs:%vreg28,%vreg27
	%vreg29<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg29
	%vreg30<def,tied1> = MovIGL %vreg29<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg30,%vreg29
	%vreg31<def> = LD %vreg30, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg31,%vreg30
	ST %vreg31<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg31
	%vreg32<def> = LD %vreg30, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg32,%vreg30
	ST %vreg32<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg32
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#5: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg10
	%vreg11<def,tied1> = MovIGL %vreg10<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg11,%vreg10
	%vreg12<def> = COPY %SP; CPURegs:%vreg12
	%vreg13<def> = LD %vreg11, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg13,%vreg11
	ST %vreg13<kill>, %vreg12, 12; mem:ST4[<unknown>] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LD %vreg11, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg14,%vreg11
	ST %vreg14<kill>, %vreg12, 8; mem:ST4[<unknown>] CPURegs:%vreg14,%vreg12
	%vreg15<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = MovGR %ZERO, 34; CPURegs:%vreg17
	ST %vreg17<kill>, %vreg16<kill>, 0; mem:ST4[@errno] CPURegs:%vreg17,%vreg16
	%vreg18<def> = MovGR %ZERO, 0; CPURegs:%vreg18
	%vreg19<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg19
	%A0<def> = COPY %vreg18; CPURegs:%vreg18
	%A1<def> = COPY %vreg19; CPURegs:%vreg19
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg20<def> = COPY %V0; CPURegs:%vreg20
	%vreg21<def> = COPY %V1; CPURegs:%vreg21
	ST %vreg21, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg21
	ST %vreg20, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#6: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#18
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg45<def> = COPY %SP; CPURegs:%vreg45
	%vreg46<def> = MovGR %ZERO, 0; CPURegs:%vreg46
	ST %vreg46, %vreg45, 12; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg45
	ST %vreg46, %vreg45, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg45
	%vreg47<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg47
	%vreg48<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg48
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg49<def> = COPY %V0; CPURegs:%vreg49
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg50<def> = COPY %SP; CPURegs:%vreg50
	ST %vreg46, %vreg50, 12; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg50
	ST %vreg46, %vreg50, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg50
	%vreg51<def> = MovGR %ZERO, -1; CPURegs:%vreg51
	%vreg52<def> = GT %vreg49, %vreg51<kill>; CPURegs:%vreg52,%vreg49,%vreg51
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg53<def> = COPY %V0; CPURegs:%vreg53
	%vreg54<def> = NEQ %vreg53, %vreg46; CPURegs:%vreg54,%vreg53,%vreg46
	%vreg55<def> = ORu %vreg54<kill>, %vreg52<kill>; CPURegs:%vreg55,%vreg54,%vreg52
	JC %vreg55<kill>, <BB#8>; CPURegs:%vreg55
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#6
	%vreg204<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg204
	%vreg205<def,tied1> = MovIGL %vreg204<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg205,%vreg204
	%vreg206<def> = MovGR %ZERO, 33; CPURegs:%vreg206
	ST %vreg206<kill>, %vreg205<kill>, 0; mem:ST4[@errno] CPURegs:%vreg206,%vreg205
	%vreg207<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg207
	%vreg208<def,tied1> = MovIGL %vreg207<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg208,%vreg207
	%vreg209<def> = LD %vreg208, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg209,%vreg208
	ST %vreg209<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg209
	%vreg210<def> = LD %vreg208, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg210,%vreg208
	ST %vreg210<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg210
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#8: derived from LLVM BB %if.else6
    Predecessors according to CFG: BB#6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %SP; CPURegs:%vreg56
	%vreg57<def> = MovGR %ZERO, -1075838976; CPURegs:%vreg57
	ST %vreg57<kill>, %vreg56, 12; mem:ST4[<unknown>] CPURegs:%vreg57,%vreg56
	ST %vreg46, %vreg56, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg56
	%vreg59<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg59
	%vreg60<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg60
	%A0<def> = COPY %vreg59; CPURegs:%vreg59
	%A1<def> = COPY %vreg60; CPURegs:%vreg60
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg61<def> = COPY %V0; CPURegs:%vreg61
	%vreg62<def> = COPY %V1; CPURegs:%vreg62
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg63<def> = COPY %SP; CPURegs:%vreg63
	%vreg64<def> = MovGR %ZERO, 1072079006; CPURegs:%vreg64
	ST %vreg64, %vreg63, 12; mem:ST4[<unknown>] CPURegs:%vreg64,%vreg63
	%vreg65<def> = MovGR %ZERO, 1719614413; CPURegs:%vreg65
	ST %vreg65, %vreg63, 8; mem:ST4[<unknown>] CPURegs:%vreg65,%vreg63
	ST %vreg62, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg62
	ST %vreg61, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg61
	%vreg66<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg66
	%vreg67<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg67
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg67; CPURegs:%vreg67
	CALL <es:__ledf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg68<def> = COPY %V0; CPURegs:%vreg68
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg69<def> = COPY %SP; CPURegs:%vreg69
	ST %vreg64, %vreg69, 12; mem:ST4[<unknown>] CPURegs:%vreg64,%vreg69
	ST %vreg65, %vreg69, 8; mem:ST4[<unknown>] CPURegs:%vreg65,%vreg69
	%vreg70<def> = MovGR %ZERO, 1; CPURegs:%vreg70
	%vreg71<def> = LT %vreg68, %vreg70<kill>; CPURegs:%vreg71,%vreg68,%vreg70
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg67; CPURegs:%vreg67
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg72<def> = COPY %V0; CPURegs:%vreg72
	%vreg73<def> = NEQ %vreg72, %vreg46; CPURegs:%vreg73,%vreg72,%vreg46
	%vreg74<def> = ORu %vreg73<kill>, %vreg71<kill>; CPURegs:%vreg74,%vreg73,%vreg71
	JC %vreg74<kill>, <BB#10>; CPURegs:%vreg74
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then10
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg90<def> = COPY %SP; CPURegs:%vreg90
	%vreg91<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg91
	ST %vreg91, %vreg90, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg90
	ST %vreg46, %vreg90, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg90
	%vreg93<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg93
	%vreg94<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg94
	%A0<def> = COPY %vreg93; CPURegs:%vreg93
	%A1<def> = COPY %vreg94; CPURegs:%vreg94
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg95<def> = COPY %V0; CPURegs:%vreg95
	%vreg96<def> = COPY %V1; CPURegs:%vreg96
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg97<def> = COPY %SP; CPURegs:%vreg97
	ST %vreg91, %vreg97, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg97
	ST %vreg46, %vreg97, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg97
	%A0<def> = COPY %vreg95; CPURegs:%vreg95
	%A1<def> = COPY %vreg96; CPURegs:%vreg96
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg98<def> = COPY %V0; CPURegs:%vreg98
	%vreg99<def> = COPY %V1; CPURegs:%vreg99
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg100<def> = COPY %SP; CPURegs:%vreg100
	ST %vreg91, %vreg100, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg100
	ST %vreg46, %vreg100, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg100
	%vreg101<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg101
	%vreg102<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg102
	%A0<def> = COPY %vreg101; CPURegs:%vreg101
	%A1<def> = COPY %vreg102; CPURegs:%vreg102
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg103<def> = COPY %V0; CPURegs:%vreg103
	%vreg104<def> = COPY %V1; CPURegs:%vreg104
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg105<def> = COPY %SP; CPURegs:%vreg105
	ST %vreg99, %vreg105, 12; mem:ST4[<unknown>] CPURegs:%vreg99,%vreg105
	ST %vreg98, %vreg105, 8; mem:ST4[<unknown>] CPURegs:%vreg98,%vreg105
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ST %vreg107, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg107
	ST %vreg106, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg106
	Jmp <BB#11>
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %if.else12
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg75<def> = COPY %SP; CPURegs:%vreg75
	%vreg76<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg76
	ST %vreg76, %vreg75, 12; mem:ST4[<unknown>] CPURegs:%vreg76,%vreg75
	ST %vreg46, %vreg75, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg75
	%vreg78<def> = LDH <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg78
	%vreg79<def> = ADDiu %vreg78<kill>, -1; CPURegs:%vreg79,%vreg78
	STH %vreg79<kill>, <fi#3>, 0; mem:ST2[%xexp](align=4) CPURegs:%vreg79
	%vreg80<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg80
	%vreg81<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg81
	%A0<def> = COPY %vreg80; CPURegs:%vreg80
	%A1<def> = COPY %vreg81; CPURegs:%vreg81
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg82<def> = COPY %V0; CPURegs:%vreg82
	%vreg83<def> = COPY %V1; CPURegs:%vreg83
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg84<def> = COPY %SP; CPURegs:%vreg84
	ST %vreg76, %vreg84, 12; mem:ST4[<unknown>] CPURegs:%vreg76,%vreg84
	ST %vreg46, %vreg84, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg84
	%A0<def> = COPY %vreg82; CPURegs:%vreg82
	%A1<def> = COPY %vreg83; CPURegs:%vreg83
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg85<def> = COPY %V0; CPURegs:%vreg85
	%vreg86<def> = COPY %V1; CPURegs:%vreg86
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg87<def> = COPY %SP; CPURegs:%vreg87
	ST %vreg86, %vreg87, 12; mem:ST4[<unknown>] CPURegs:%vreg86,%vreg87
	ST %vreg85, %vreg87, 8; mem:ST4[<unknown>] CPURegs:%vreg85,%vreg87
	%A0<def> = COPY %vreg80; CPURegs:%vreg80
	%A1<def> = COPY %vreg81; CPURegs:%vreg81
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg88<def> = COPY %V0; CPURegs:%vreg88
	%vreg89<def> = COPY %V1; CPURegs:%vreg89
	ST %vreg89, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg89
	ST %vreg88, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg88
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#10 BB#9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	%vreg109<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg109
	ST %vreg109, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg108
	%vreg110<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg110
	ST %vreg110, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg108
	%A0<def> = COPY %vreg110; CPURegs:%vreg110
	%A1<def> = COPY %vreg109; CPURegs:%vreg109
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg111<def> = COPY %V0; CPURegs:%vreg111
	%vreg112<def> = COPY %V1; CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	ST %vreg112, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg113
	ST %vreg111, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg113
	%vreg114<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg114
	%vreg115<def,tied1> = MovIGL %vreg114<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD %vreg115, 0; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg116,%vreg115
	%vreg117<def> = LD %vreg115, 4; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg117,%vreg115
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg117; CPURegs:%vreg117
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg118<def> = COPY %V0; CPURegs:%vreg118
	%vreg119<def> = COPY %V1; CPURegs:%vreg119
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %SP; CPURegs:%vreg120
	%vreg121<def> = LD %vreg115, 12; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg121,%vreg115
	ST %vreg121<kill>, %vreg120, 12; mem:ST4[<unknown>] CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg115, 8; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg122,%vreg115
	ST %vreg122<kill>, %vreg120, 8; mem:ST4[<unknown>] CPURegs:%vreg122,%vreg120
	%A0<def> = COPY %vreg118; CPURegs:%vreg118
	%A1<def> = COPY %vreg119; CPURegs:%vreg119
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg112, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg125
	ST %vreg111, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	%vreg129<def> = LD %vreg115, 20; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg129,%vreg115
	ST %vreg129<kill>, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg129,%vreg128
	%vreg130<def> = LD %vreg115, 16; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg130,%vreg115
	ST %vreg130<kill>, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg130,%vreg128
	%A0<def> = COPY %vreg126; CPURegs:%vreg126
	%A1<def> = COPY %vreg127; CPURegs:%vreg127
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg133
	%vreg134<def,tied1> = MovIGL %vreg133<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg134,%vreg133
	%vreg135<def> = COPY %SP; CPURegs:%vreg135
	%vreg136<def> = LD %vreg134, 4; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg136,%vreg134
	ST %vreg136<kill>, %vreg135, 12; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg135
	%vreg137<def> = LD %vreg134, 0; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg137,%vreg134
	ST %vreg137<kill>, %vreg135, 8; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg135
	%A0<def> = COPY %vreg111; CPURegs:%vreg111
	%A1<def> = COPY %vreg112; CPURegs:%vreg112
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg138<def> = COPY %V0; CPURegs:%vreg138
	%vreg139<def> = COPY %V1; CPURegs:%vreg139
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %SP; CPURegs:%vreg140
	ST %vreg112, %vreg140, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg140
	ST %vreg111, %vreg140, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg140
	%A0<def> = COPY %vreg138; CPURegs:%vreg138
	%A1<def> = COPY %vreg139; CPURegs:%vreg139
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg141<def> = COPY %V0; CPURegs:%vreg141
	%vreg142<def> = COPY %V1; CPURegs:%vreg142
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg143<def> = COPY %SP; CPURegs:%vreg143
	%vreg144<def> = LD %vreg134, 12; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg144,%vreg134
	ST %vreg144<kill>, %vreg143, 12; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg143
	%vreg145<def> = LD %vreg134, 8; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg145,%vreg134
	ST %vreg145<kill>, %vreg143, 8; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg143
	%A0<def> = COPY %vreg141; CPURegs:%vreg141
	%A1<def> = COPY %vreg142; CPURegs:%vreg142
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg146<def> = COPY %V0; CPURegs:%vreg146
	%vreg147<def> = COPY %V1; CPURegs:%vreg147
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg148<def> = COPY %SP; CPURegs:%vreg148
	ST %vreg112, %vreg148, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg148
	ST %vreg111, %vreg148, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg148
	%A0<def> = COPY %vreg146; CPURegs:%vreg146
	%A1<def> = COPY %vreg147; CPURegs:%vreg147
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg149<def> = COPY %V0; CPURegs:%vreg149
	%vreg150<def> = COPY %V1; CPURegs:%vreg150
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg151<def> = COPY %SP; CPURegs:%vreg151
	%vreg152<def> = LD %vreg134, 20; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg152,%vreg134
	ST %vreg152<kill>, %vreg151, 12; mem:ST4[<unknown>] CPURegs:%vreg152,%vreg151
	%vreg153<def> = LD %vreg134, 16; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg153,%vreg134
	ST %vreg153<kill>, %vreg151, 8; mem:ST4[<unknown>] CPURegs:%vreg153,%vreg151
	%A0<def> = COPY %vreg149; CPURegs:%vreg149
	%A1<def> = COPY %vreg150; CPURegs:%vreg150
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %V0; CPURegs:%vreg154
	%vreg155<def> = COPY %V1; CPURegs:%vreg155
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg156<def> = COPY %SP; CPURegs:%vreg156
	ST %vreg112, %vreg156, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg156
	ST %vreg111, %vreg156, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg156
	ST %vreg112, <fi#5>, 4; mem:ST4[%w+4] CPURegs:%vreg112
	ST %vreg111, <fi#5>, 0; mem:ST4[%w](align=8) CPURegs:%vreg111
	%vreg157<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg157
	%vreg158<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg158
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %V0; CPURegs:%vreg159
	%vreg160<def> = COPY %V1; CPURegs:%vreg160
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg161<def> = COPY %SP; CPURegs:%vreg161
	ST %vreg132, %vreg161, 12; mem:ST4[<unknown>] CPURegs:%vreg132,%vreg161
	ST %vreg131, %vreg161, 8; mem:ST4[<unknown>] CPURegs:%vreg131,%vreg161
	%A0<def> = COPY %vreg159; CPURegs:%vreg159
	%A1<def> = COPY %vreg160; CPURegs:%vreg160
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg162<def> = COPY %V0; CPURegs:%vreg162
	%vreg163<def> = COPY %V1; CPURegs:%vreg163
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg164<def> = COPY %SP; CPURegs:%vreg164
	ST %vreg155, %vreg164, 12; mem:ST4[<unknown>] CPURegs:%vreg155,%vreg164
	ST %vreg154, %vreg164, 8; mem:ST4[<unknown>] CPURegs:%vreg154,%vreg164
	%A0<def> = COPY %vreg162; CPURegs:%vreg162
	%A1<def> = COPY %vreg163; CPURegs:%vreg163
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg165<def> = COPY %V0; CPURegs:%vreg165
	%vreg166<def> = COPY %V1; CPURegs:%vreg166
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg167<def> = COPY %SP; CPURegs:%vreg167
	ST %vreg166, %vreg167, 12; mem:ST4[<unknown>] CPURegs:%vreg166,%vreg167
	ST %vreg165, %vreg167, 8; mem:ST4[<unknown>] CPURegs:%vreg165,%vreg167
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg168<def> = COPY %V0; CPURegs:%vreg168
	%vreg169<def> = COPY %V1; CPURegs:%vreg169
	ST %vreg169, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg169
	ST %vreg168, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg168
	%vreg170<def> = LDHS <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg170
	%vreg171<def> = EQI %vreg170<kill>, 0; CPURegs:%vreg171,%vreg170
	JC %vreg171<kill>, <BB#13>; CPURegs:%vreg171
	Jmp <BB#12>
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %if.then33
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg172<def> = LDHS <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg172
	%A0<def> = COPY %vreg172; CPURegs:%vreg172
	CALL <es:__dsp_floatsidf>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg173<def> = COPY %V0; CPURegs:%vreg173
	%vreg174<def> = COPY %V1; CPURegs:%vreg174
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg175<def> = COPY %SP; CPURegs:%vreg175
	%vreg176<def> = MovGR %ZERO, 1072049728; CPURegs:%vreg176
	ST %vreg176<kill>, %vreg175, 12; mem:ST4[<unknown>] CPURegs:%vreg176,%vreg175
	ST %vreg46, %vreg175, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg175
	%A0<def> = COPY %vreg173; CPURegs:%vreg173
	%A1<def> = COPY %vreg174; CPURegs:%vreg174
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg178<def> = COPY %V0; CPURegs:%vreg178
	%vreg179<def> = COPY %V1; CPURegs:%vreg179
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg180<def> = COPY %SP; CPURegs:%vreg180
	%vreg181<def> = MovGR %ZERO, 1052243921; CPURegs:%vreg181
	ST %vreg181<kill>, %vreg180, 12; mem:ST4[<unknown>] CPURegs:%vreg181,%vreg180
	%vreg182<def> = MovGR %ZERO, -814109750; CPURegs:%vreg182
	ST %vreg182<kill>, %vreg180, 8; mem:ST4[<unknown>] CPURegs:%vreg182,%vreg180
	ST %vreg174, <fi#6>, 4; mem:ST4[%xn+4] CPURegs:%vreg174
	ST %vreg173, <fi#6>, 0; mem:ST4[%xn](align=8) CPURegs:%vreg173
	%A0<def> = COPY %vreg173; CPURegs:%vreg173
	%A1<def> = COPY %vreg174; CPURegs:%vreg174
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg183<def> = COPY %V0; CPURegs:%vreg183
	%vreg184<def> = COPY %V1; CPURegs:%vreg184
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg185<def> = COPY %SP; CPURegs:%vreg185
	%vreg186<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg186
	ST %vreg186<kill>, %vreg185, 12; mem:ST4[<unknown>] CPURegs:%vreg186,%vreg185
	%vreg187<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg187
	ST %vreg187<kill>, %vreg185, 8; mem:ST4[<unknown>] CPURegs:%vreg187,%vreg185
	%A0<def> = COPY %vreg183; CPURegs:%vreg183
	%A1<def> = COPY %vreg184; CPURegs:%vreg184
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg188<def> = COPY %V0; CPURegs:%vreg188
	%vreg189<def> = COPY %V1; CPURegs:%vreg189
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg190<def> = COPY %SP; CPURegs:%vreg190
	ST %vreg179, %vreg190, 12; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg190
	ST %vreg178, %vreg190, 8; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg190
	%A0<def> = COPY %vreg188; CPURegs:%vreg188
	%A1<def> = COPY %vreg189; CPURegs:%vreg189
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg191<def> = COPY %V0; CPURegs:%vreg191
	%vreg192<def> = COPY %V1; CPURegs:%vreg192
	ST %vreg192, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg192
	ST %vreg191, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg191
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %if.end39
    Predecessors according to CFG: BB#11 BB#12
	%vreg193<def> = LD <fi#2>, 0; mem:LD4[%decflag.addr] CPURegs:%vreg193
	%vreg194<def> = EQI %vreg193<kill>, 0; CPURegs:%vreg194,%vreg193
	JC %vreg194<kill>, <BB#15>; CPURegs:%vreg194
	Jmp <BB#14>
    Successors according to CFG: BB#14(20) BB#15(12)

BB#14: derived from LLVM BB %if.then41
    Predecessors according to CFG: BB#13
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg197<def> = COPY %SP; CPURegs:%vreg197
	%vreg198<def> = MovGR %ZERO, 1071369083; CPURegs:%vreg198
	ST %vreg198<kill>, %vreg197, 12; mem:ST4[<unknown>] CPURegs:%vreg198,%vreg197
	%vreg199<def> = MovGR %ZERO, 354870542; CPURegs:%vreg199
	ST %vreg199<kill>, %vreg197, 8; mem:ST4[<unknown>] CPURegs:%vreg199,%vreg197
	%vreg200<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg200
	%vreg201<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg201
	%A0<def> = COPY %vreg200; CPURegs:%vreg200
	%A1<def> = COPY %vreg201; CPURegs:%vreg201
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg202<def> = COPY %V0; CPURegs:%vreg202
	%vreg203<def> = COPY %V1; CPURegs:%vreg203
	ST %vreg203, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg203
	ST %vreg202, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg202
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#15: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#13
	%vreg195<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg195
	%vreg196<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg196
	ST %vreg196<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg196
	ST %vreg195<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg195
    Successors according to CFG: BB#16

BB#16: derived from LLVM BB %return
    Predecessors according to CFG: BB#5 BB#4 BB#3 BB#1 BB#15 BB#14 BB#7
	%vreg211<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg211
	%vreg212<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg212
	%V0<def> = COPY %vreg211; CPURegs:%vreg211
	%V1<def> = COPY %vreg212; CPURegs:%vreg212
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function _Log.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Log: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=2, align=4, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg3<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg3
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ST %vreg3<kill>, <fi#2>, 0; mem:ST4[%decflag.addr] CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LEA <fi#3>, 0; CPURegs:%vreg4
	%vreg5<def> = LEA <fi#1>, 0; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@_Dunscale>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	%vreg7<def> = EQI %vreg6, 0; CPURegs:%vreg7,%vreg6
	JC %vreg7<kill>, <BB#5>; CPURegs:%vreg7
	Jmp <BB#17>
    Successors according to CFG: BB#5(16) BB#17(32)

BB#17: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg2<def> = COPY %vreg6; CPURegs:%vreg2,%vreg6
	%vreg8<def> = EQI %vreg2, 1; CPURegs:%vreg8,%vreg2
	JC %vreg8<kill>, <BB#2>; CPURegs:%vreg8
	Jmp <BB#18>
    Successors according to CFG: BB#2(16) BB#18(16)

BB#18: derived from LLVM BB %entry
    Predecessors according to CFG: BB#17
	%vreg9<def> = NEQI %vreg2, 2; CPURegs:%vreg9,%vreg2
	JC %vreg9<kill>, <BB#6>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#18
	%vreg40<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg40
	%vreg41<def,tied1> = MovIGL %vreg40<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg41,%vreg40
	%vreg42<def> = MovGR %ZERO, 33; CPURegs:%vreg42
	ST %vreg42<kill>, %vreg41<kill>, 0; mem:ST4[@errno] CPURegs:%vreg42,%vreg41
	%vreg43<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg43
	%vreg44<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg44
	ST %vreg43<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg43
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#17
	%vreg22<def> = MovGR %ZERO, 128; CPURegs:%vreg22
	%vreg23<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg23
	%vreg24<def> = AND %vreg23<kill>, %vreg22<kill>; CPURegs:%vreg24,%vreg23,%vreg22
	%vreg25<def> = EQI %vreg24<kill>, 0; CPURegs:%vreg25,%vreg24
	JC %vreg25<kill>, <BB#4>; CPURegs:%vreg25
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg33<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg33
	%vreg34<def,tied1> = MovIGL %vreg33<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg34,%vreg33
	%vreg35<def> = MovGR %ZERO, 33; CPURegs:%vreg35
	ST %vreg35<kill>, %vreg34<kill>, 0; mem:ST4[@errno] CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg36
	%vreg37<def,tied1> = MovIGL %vreg36<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg37,%vreg36
	%vreg38<def> = LD %vreg37, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg38,%vreg37
	ST %vreg38<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg38
	%vreg39<def> = LD %vreg37, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg39,%vreg37
	ST %vreg39<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg39
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg26<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = MovGR %ZERO, 34; CPURegs:%vreg28
	ST %vreg28<kill>, %vreg27<kill>, 0; mem:ST4[@errno] CPURegs:%vreg28,%vreg27
	%vreg29<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg29
	%vreg30<def,tied1> = MovIGL %vreg29<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg30,%vreg29
	%vreg31<def> = LD %vreg30, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg31,%vreg30
	ST %vreg31<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg31
	%vreg32<def> = LD %vreg30, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg32,%vreg30
	ST %vreg32<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg32
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#5: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = MovIGH %ZERO, <ga:@_Inf>[TF=3]; CPURegs:%vreg10
	%vreg11<def,tied1> = MovIGL %vreg10<tied0>, <ga:@_Inf>[TF=4]; CPURegs:%vreg11,%vreg10
	%vreg12<def> = COPY %SP; CPURegs:%vreg12
	%vreg13<def> = LD %vreg11, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)+4] CPURegs:%vreg13,%vreg11
	ST %vreg13<kill>, %vreg12, 12; mem:ST4[<unknown>] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LD %vreg11, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Inf, i32 0, i32 0)](align=8) CPURegs:%vreg14,%vreg11
	ST %vreg14<kill>, %vreg12, 8; mem:ST4[<unknown>] CPURegs:%vreg14,%vreg12
	%vreg15<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = MovGR %ZERO, 34; CPURegs:%vreg17
	ST %vreg17<kill>, %vreg16<kill>, 0; mem:ST4[@errno] CPURegs:%vreg17,%vreg16
	%vreg18<def> = MovGR %ZERO, 0; CPURegs:%vreg18
	%vreg19<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg19
	%A0<def> = COPY %vreg18; CPURegs:%vreg18
	%A1<def> = COPY %vreg19; CPURegs:%vreg19
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg20<def> = COPY %V0; CPURegs:%vreg20
	%vreg21<def> = COPY %V1; CPURegs:%vreg21
	ST %vreg21, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg21
	ST %vreg20, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#6: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#18
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg45<def> = COPY %SP; CPURegs:%vreg45
	%vreg46<def> = MovGR %ZERO, 0; CPURegs:%vreg46
	ST %vreg46, %vreg45, 12; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg45
	ST %vreg46, %vreg45, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg45
	%vreg47<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg47
	%vreg48<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg48
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg49<def> = COPY %V0; CPURegs:%vreg49
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg50<def> = COPY %SP; CPURegs:%vreg50
	ST %vreg46, %vreg50, 12; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg50
	ST %vreg46, %vreg50, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg50
	%vreg51<def> = MovGR %ZERO, -1; CPURegs:%vreg51
	%vreg52<def> = GT %vreg49, %vreg51<kill>; CPURegs:%vreg52,%vreg49,%vreg51
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg53<def> = COPY %V0; CPURegs:%vreg53
	%vreg54<def> = NEQ %vreg53, %vreg46; CPURegs:%vreg54,%vreg53,%vreg46
	%vreg55<def> = ORu %vreg54<kill>, %vreg52<kill>; CPURegs:%vreg55,%vreg54,%vreg52
	JC %vreg55<kill>, <BB#8>; CPURegs:%vreg55
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#6
	%vreg204<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg204
	%vreg205<def,tied1> = MovIGL %vreg204<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg205,%vreg204
	%vreg206<def> = MovGR %ZERO, 33; CPURegs:%vreg206
	ST %vreg206<kill>, %vreg205<kill>, 0; mem:ST4[@errno] CPURegs:%vreg206,%vreg205
	%vreg207<def> = MovIGH %ZERO, <ga:@_Nan>[TF=3]; CPURegs:%vreg207
	%vreg208<def,tied1> = MovIGL %vreg207<tied0>, <ga:@_Nan>[TF=4]; CPURegs:%vreg208,%vreg207
	%vreg209<def> = LD %vreg208, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)+4] CPURegs:%vreg209,%vreg208
	ST %vreg209<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg209
	%vreg210<def> = LD %vreg208, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Nan, i32 0, i32 0)](align=8) CPURegs:%vreg210,%vreg208
	ST %vreg210<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg210
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#8: derived from LLVM BB %if.else6
    Predecessors according to CFG: BB#6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %SP; CPURegs:%vreg56
	%vreg57<def> = MovGR %ZERO, -1075838976; CPURegs:%vreg57
	ST %vreg57<kill>, %vreg56, 12; mem:ST4[<unknown>] CPURegs:%vreg57,%vreg56
	ST %vreg46, %vreg56, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg56
	%vreg59<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg59
	%vreg60<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg60
	%A0<def> = COPY %vreg59; CPURegs:%vreg59
	%A1<def> = COPY %vreg60; CPURegs:%vreg60
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg61<def> = COPY %V0; CPURegs:%vreg61
	%vreg62<def> = COPY %V1; CPURegs:%vreg62
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg63<def> = COPY %SP; CPURegs:%vreg63
	%vreg64<def> = MovGR %ZERO, 1072079006; CPURegs:%vreg64
	ST %vreg64, %vreg63, 12; mem:ST4[<unknown>] CPURegs:%vreg64,%vreg63
	%vreg65<def> = MovGR %ZERO, 1719614413; CPURegs:%vreg65
	ST %vreg65, %vreg63, 8; mem:ST4[<unknown>] CPURegs:%vreg65,%vreg63
	ST %vreg62, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg62
	ST %vreg61, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg61
	%vreg66<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg66
	%vreg67<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg67
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg67; CPURegs:%vreg67
	CALL <es:__ledf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg68<def> = COPY %V0; CPURegs:%vreg68
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg69<def> = COPY %SP; CPURegs:%vreg69
	ST %vreg64, %vreg69, 12; mem:ST4[<unknown>] CPURegs:%vreg64,%vreg69
	ST %vreg65, %vreg69, 8; mem:ST4[<unknown>] CPURegs:%vreg65,%vreg69
	%vreg70<def> = MovGR %ZERO, 1; CPURegs:%vreg70
	%vreg71<def> = LT %vreg68, %vreg70<kill>; CPURegs:%vreg71,%vreg68,%vreg70
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg67; CPURegs:%vreg67
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg72<def> = COPY %V0; CPURegs:%vreg72
	%vreg73<def> = NEQ %vreg72, %vreg46; CPURegs:%vreg73,%vreg72,%vreg46
	%vreg74<def> = ORu %vreg73<kill>, %vreg71<kill>; CPURegs:%vreg74,%vreg73,%vreg71
	JC %vreg74<kill>, <BB#10>; CPURegs:%vreg74
	Jmp <BB#9>
    Successors according to CFG: BB#9(16) BB#10(16)

BB#9: derived from LLVM BB %if.then10
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg90<def> = COPY %SP; CPURegs:%vreg90
	%vreg91<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg91
	ST %vreg91, %vreg90, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg90
	ST %vreg46, %vreg90, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg90
	%vreg93<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg93
	%vreg94<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg94
	%A0<def> = COPY %vreg93; CPURegs:%vreg93
	%A1<def> = COPY %vreg94; CPURegs:%vreg94
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg95<def> = COPY %V0; CPURegs:%vreg95
	%vreg96<def> = COPY %V1; CPURegs:%vreg96
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg97<def> = COPY %SP; CPURegs:%vreg97
	ST %vreg91, %vreg97, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg97
	ST %vreg46, %vreg97, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg97
	%A0<def> = COPY %vreg95; CPURegs:%vreg95
	%A1<def> = COPY %vreg96; CPURegs:%vreg96
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg98<def> = COPY %V0; CPURegs:%vreg98
	%vreg99<def> = COPY %V1; CPURegs:%vreg99
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg100<def> = COPY %SP; CPURegs:%vreg100
	ST %vreg91, %vreg100, 12; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg100
	ST %vreg46, %vreg100, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg100
	%vreg101<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg101
	%vreg102<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg102
	%A0<def> = COPY %vreg101; CPURegs:%vreg101
	%A1<def> = COPY %vreg102; CPURegs:%vreg102
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg103<def> = COPY %V0; CPURegs:%vreg103
	%vreg104<def> = COPY %V1; CPURegs:%vreg104
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg105<def> = COPY %SP; CPURegs:%vreg105
	ST %vreg99, %vreg105, 12; mem:ST4[<unknown>] CPURegs:%vreg99,%vreg105
	ST %vreg98, %vreg105, 8; mem:ST4[<unknown>] CPURegs:%vreg98,%vreg105
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ST %vreg107, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg107
	ST %vreg106, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg106
	Jmp <BB#11>
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %if.else12
    Predecessors according to CFG: BB#8
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg75<def> = COPY %SP; CPURegs:%vreg75
	%vreg76<def> = MovGR %ZERO, 1071644672; CPURegs:%vreg76
	ST %vreg76, %vreg75, 12; mem:ST4[<unknown>] CPURegs:%vreg76,%vreg75
	ST %vreg46, %vreg75, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg75
	%vreg78<def> = LDH <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg78
	%vreg79<def> = ADDiu %vreg78<kill>, -1; CPURegs:%vreg79,%vreg78
	STH %vreg79<kill>, <fi#3>, 0; mem:ST2[%xexp](align=4) CPURegs:%vreg79
	%vreg80<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg80
	%vreg81<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg81
	%A0<def> = COPY %vreg80; CPURegs:%vreg80
	%A1<def> = COPY %vreg81; CPURegs:%vreg81
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg82<def> = COPY %V0; CPURegs:%vreg82
	%vreg83<def> = COPY %V1; CPURegs:%vreg83
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg84<def> = COPY %SP; CPURegs:%vreg84
	ST %vreg76, %vreg84, 12; mem:ST4[<unknown>] CPURegs:%vreg76,%vreg84
	ST %vreg46, %vreg84, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg84
	%A0<def> = COPY %vreg82; CPURegs:%vreg82
	%A1<def> = COPY %vreg83; CPURegs:%vreg83
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg85<def> = COPY %V0; CPURegs:%vreg85
	%vreg86<def> = COPY %V1; CPURegs:%vreg86
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg87<def> = COPY %SP; CPURegs:%vreg87
	ST %vreg86, %vreg87, 12; mem:ST4[<unknown>] CPURegs:%vreg86,%vreg87
	ST %vreg85, %vreg87, 8; mem:ST4[<unknown>] CPURegs:%vreg85,%vreg87
	%A0<def> = COPY %vreg80; CPURegs:%vreg80
	%A1<def> = COPY %vreg81; CPURegs:%vreg81
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg88<def> = COPY %V0; CPURegs:%vreg88
	%vreg89<def> = COPY %V1; CPURegs:%vreg89
	ST %vreg89, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg89
	ST %vreg88, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg88
    Successors according to CFG: BB#11

BB#11: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#10 BB#9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	%vreg109<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg109
	ST %vreg109, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg108
	%vreg110<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg110
	ST %vreg110, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg108
	%A0<def> = COPY %vreg110; CPURegs:%vreg110
	%A1<def> = COPY %vreg109; CPURegs:%vreg109
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg111<def> = COPY %V0; CPURegs:%vreg111
	%vreg112<def> = COPY %V1; CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	ST %vreg112, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg113
	ST %vreg111, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg113
	%vreg114<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg114
	%vreg115<def,tied1> = MovIGL %vreg114<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD %vreg115, 0; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg116,%vreg115
	%vreg117<def> = LD %vreg115, 4; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg117,%vreg115
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg117; CPURegs:%vreg117
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg118<def> = COPY %V0; CPURegs:%vreg118
	%vreg119<def> = COPY %V1; CPURegs:%vreg119
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %SP; CPURegs:%vreg120
	%vreg121<def> = LD %vreg115, 12; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg121,%vreg115
	ST %vreg121<kill>, %vreg120, 12; mem:ST4[<unknown>] CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg115, 8; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg122,%vreg115
	ST %vreg122<kill>, %vreg120, 8; mem:ST4[<unknown>] CPURegs:%vreg122,%vreg120
	%A0<def> = COPY %vreg118; CPURegs:%vreg118
	%A1<def> = COPY %vreg119; CPURegs:%vreg119
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg112, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg125
	ST %vreg111, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	%vreg129<def> = LD %vreg115, 20; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg129,%vreg115
	ST %vreg129<kill>, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg129,%vreg128
	%vreg130<def> = LD %vreg115, 16; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg130,%vreg115
	ST %vreg130<kill>, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg130,%vreg128
	%A0<def> = COPY %vreg126; CPURegs:%vreg126
	%A1<def> = COPY %vreg127; CPURegs:%vreg127
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg133
	%vreg134<def,tied1> = MovIGL %vreg133<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg134,%vreg133
	%vreg135<def> = COPY %SP; CPURegs:%vreg135
	%vreg136<def> = LD %vreg134, 4; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg136,%vreg134
	ST %vreg136<kill>, %vreg135, 12; mem:ST4[<unknown>] CPURegs:%vreg136,%vreg135
	%vreg137<def> = LD %vreg134, 0; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg137,%vreg134
	ST %vreg137<kill>, %vreg135, 8; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg135
	%A0<def> = COPY %vreg111; CPURegs:%vreg111
	%A1<def> = COPY %vreg112; CPURegs:%vreg112
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg138<def> = COPY %V0; CPURegs:%vreg138
	%vreg139<def> = COPY %V1; CPURegs:%vreg139
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg140<def> = COPY %SP; CPURegs:%vreg140
	ST %vreg112, %vreg140, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg140
	ST %vreg111, %vreg140, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg140
	%A0<def> = COPY %vreg138; CPURegs:%vreg138
	%A1<def> = COPY %vreg139; CPURegs:%vreg139
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg141<def> = COPY %V0; CPURegs:%vreg141
	%vreg142<def> = COPY %V1; CPURegs:%vreg142
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg143<def> = COPY %SP; CPURegs:%vreg143
	%vreg144<def> = LD %vreg134, 12; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg144,%vreg134
	ST %vreg144<kill>, %vreg143, 12; mem:ST4[<unknown>] CPURegs:%vreg144,%vreg143
	%vreg145<def> = LD %vreg134, 8; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg145,%vreg134
	ST %vreg145<kill>, %vreg143, 8; mem:ST4[<unknown>] CPURegs:%vreg145,%vreg143
	%A0<def> = COPY %vreg141; CPURegs:%vreg141
	%A1<def> = COPY %vreg142; CPURegs:%vreg142
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg146<def> = COPY %V0; CPURegs:%vreg146
	%vreg147<def> = COPY %V1; CPURegs:%vreg147
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg148<def> = COPY %SP; CPURegs:%vreg148
	ST %vreg112, %vreg148, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg148
	ST %vreg111, %vreg148, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg148
	%A0<def> = COPY %vreg146; CPURegs:%vreg146
	%A1<def> = COPY %vreg147; CPURegs:%vreg147
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg149<def> = COPY %V0; CPURegs:%vreg149
	%vreg150<def> = COPY %V1; CPURegs:%vreg150
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg151<def> = COPY %SP; CPURegs:%vreg151
	%vreg152<def> = LD %vreg134, 20; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg152,%vreg134
	ST %vreg152<kill>, %vreg151, 12; mem:ST4[<unknown>] CPURegs:%vreg152,%vreg151
	%vreg153<def> = LD %vreg134, 16; mem:LD4[getelementptr inbounds ([3 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg153,%vreg134
	ST %vreg153<kill>, %vreg151, 8; mem:ST4[<unknown>] CPURegs:%vreg153,%vreg151
	%A0<def> = COPY %vreg149; CPURegs:%vreg149
	%A1<def> = COPY %vreg150; CPURegs:%vreg150
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg154<def> = COPY %V0; CPURegs:%vreg154
	%vreg155<def> = COPY %V1; CPURegs:%vreg155
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg156<def> = COPY %SP; CPURegs:%vreg156
	ST %vreg112, %vreg156, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg156
	ST %vreg111, %vreg156, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg156
	ST %vreg112, <fi#5>, 4; mem:ST4[%w+4] CPURegs:%vreg112
	ST %vreg111, <fi#5>, 0; mem:ST4[%w](align=8) CPURegs:%vreg111
	%vreg157<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg157
	%vreg158<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg158
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %V0; CPURegs:%vreg159
	%vreg160<def> = COPY %V1; CPURegs:%vreg160
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg161<def> = COPY %SP; CPURegs:%vreg161
	ST %vreg132, %vreg161, 12; mem:ST4[<unknown>] CPURegs:%vreg132,%vreg161
	ST %vreg131, %vreg161, 8; mem:ST4[<unknown>] CPURegs:%vreg131,%vreg161
	%A0<def> = COPY %vreg159; CPURegs:%vreg159
	%A1<def> = COPY %vreg160; CPURegs:%vreg160
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg162<def> = COPY %V0; CPURegs:%vreg162
	%vreg163<def> = COPY %V1; CPURegs:%vreg163
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg164<def> = COPY %SP; CPURegs:%vreg164
	ST %vreg155, %vreg164, 12; mem:ST4[<unknown>] CPURegs:%vreg155,%vreg164
	ST %vreg154, %vreg164, 8; mem:ST4[<unknown>] CPURegs:%vreg154,%vreg164
	%A0<def> = COPY %vreg162; CPURegs:%vreg162
	%A1<def> = COPY %vreg163; CPURegs:%vreg163
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg165<def> = COPY %V0; CPURegs:%vreg165
	%vreg166<def> = COPY %V1; CPURegs:%vreg166
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg167<def> = COPY %SP; CPURegs:%vreg167
	ST %vreg166, %vreg167, 12; mem:ST4[<unknown>] CPURegs:%vreg166,%vreg167
	ST %vreg165, %vreg167, 8; mem:ST4[<unknown>] CPURegs:%vreg165,%vreg167
	%A0<def> = COPY %vreg157; CPURegs:%vreg157
	%A1<def> = COPY %vreg158; CPURegs:%vreg158
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg168<def> = COPY %V0; CPURegs:%vreg168
	%vreg169<def> = COPY %V1; CPURegs:%vreg169
	ST %vreg169, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg169
	ST %vreg168, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg168
	%vreg170<def> = LDHS <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg170
	%vreg171<def> = EQI %vreg170<kill>, 0; CPURegs:%vreg171,%vreg170
	JC %vreg171<kill>, <BB#13>; CPURegs:%vreg171
	Jmp <BB#12>
    Successors according to CFG: BB#12(20) BB#13(12)

BB#12: derived from LLVM BB %if.then33
    Predecessors according to CFG: BB#11
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg172<def> = LDHS <fi#3>, 0; mem:LD2[%xexp](align=4) CPURegs:%vreg172
	%A0<def> = COPY %vreg172; CPURegs:%vreg172
	CALL <es:__dsp_floatsidf>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg173<def> = COPY %V0; CPURegs:%vreg173
	%vreg174<def> = COPY %V1; CPURegs:%vreg174
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg175<def> = COPY %SP; CPURegs:%vreg175
	%vreg176<def> = MovGR %ZERO, 1072049728; CPURegs:%vreg176
	ST %vreg176<kill>, %vreg175, 12; mem:ST4[<unknown>] CPURegs:%vreg176,%vreg175
	ST %vreg46, %vreg175, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg175
	%A0<def> = COPY %vreg173; CPURegs:%vreg173
	%A1<def> = COPY %vreg174; CPURegs:%vreg174
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg178<def> = COPY %V0; CPURegs:%vreg178
	%vreg179<def> = COPY %V1; CPURegs:%vreg179
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg180<def> = COPY %SP; CPURegs:%vreg180
	%vreg181<def> = MovGR %ZERO, 1052243921; CPURegs:%vreg181
	ST %vreg181<kill>, %vreg180, 12; mem:ST4[<unknown>] CPURegs:%vreg181,%vreg180
	%vreg182<def> = MovGR %ZERO, -814109750; CPURegs:%vreg182
	ST %vreg182<kill>, %vreg180, 8; mem:ST4[<unknown>] CPURegs:%vreg182,%vreg180
	ST %vreg174, <fi#6>, 4; mem:ST4[%xn+4] CPURegs:%vreg174
	ST %vreg173, <fi#6>, 0; mem:ST4[%xn](align=8) CPURegs:%vreg173
	%A0<def> = COPY %vreg173; CPURegs:%vreg173
	%A1<def> = COPY %vreg174; CPURegs:%vreg174
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg183<def> = COPY %V0; CPURegs:%vreg183
	%vreg184<def> = COPY %V1; CPURegs:%vreg184
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg185<def> = COPY %SP; CPURegs:%vreg185
	%vreg186<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg186
	ST %vreg186<kill>, %vreg185, 12; mem:ST4[<unknown>] CPURegs:%vreg186,%vreg185
	%vreg187<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg187
	ST %vreg187<kill>, %vreg185, 8; mem:ST4[<unknown>] CPURegs:%vreg187,%vreg185
	%A0<def> = COPY %vreg183; CPURegs:%vreg183
	%A1<def> = COPY %vreg184; CPURegs:%vreg184
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg188<def> = COPY %V0; CPURegs:%vreg188
	%vreg189<def> = COPY %V1; CPURegs:%vreg189
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg190<def> = COPY %SP; CPURegs:%vreg190
	ST %vreg179, %vreg190, 12; mem:ST4[<unknown>] CPURegs:%vreg179,%vreg190
	ST %vreg178, %vreg190, 8; mem:ST4[<unknown>] CPURegs:%vreg178,%vreg190
	%A0<def> = COPY %vreg188; CPURegs:%vreg188
	%A1<def> = COPY %vreg189; CPURegs:%vreg189
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg191<def> = COPY %V0; CPURegs:%vreg191
	%vreg192<def> = COPY %V1; CPURegs:%vreg192
	ST %vreg192, <fi#4>, 4; mem:ST4[%z+4] CPURegs:%vreg192
	ST %vreg191, <fi#4>, 0; mem:ST4[%z](align=8) CPURegs:%vreg191
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %if.end39
    Predecessors according to CFG: BB#11 BB#12
	%vreg193<def> = LD <fi#2>, 0; mem:LD4[%decflag.addr] CPURegs:%vreg193
	%vreg194<def> = EQI %vreg193<kill>, 0; CPURegs:%vreg194,%vreg193
	JC %vreg194<kill>, <BB#15>; CPURegs:%vreg194
	Jmp <BB#14>
    Successors according to CFG: BB#14(20) BB#15(12)

BB#14: derived from LLVM BB %if.then41
    Predecessors according to CFG: BB#13
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg197<def> = COPY %SP; CPURegs:%vreg197
	%vreg198<def> = MovGR %ZERO, 1071369083; CPURegs:%vreg198
	ST %vreg198<kill>, %vreg197, 12; mem:ST4[<unknown>] CPURegs:%vreg198,%vreg197
	%vreg199<def> = MovGR %ZERO, 354870542; CPURegs:%vreg199
	ST %vreg199<kill>, %vreg197, 8; mem:ST4[<unknown>] CPURegs:%vreg199,%vreg197
	%vreg200<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg200
	%vreg201<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg201
	%A0<def> = COPY %vreg200; CPURegs:%vreg200
	%A1<def> = COPY %vreg201; CPURegs:%vreg201
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg202<def> = COPY %V0; CPURegs:%vreg202
	%vreg203<def> = COPY %V1; CPURegs:%vreg203
	ST %vreg203, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg203
	ST %vreg202, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg202
	Jmp <BB#16>
    Successors according to CFG: BB#16

BB#15: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#13
	%vreg195<def> = LD <fi#4>, 0; mem:LD4[%z](align=8) CPURegs:%vreg195
	%vreg196<def> = LD <fi#4>, 4; mem:LD4[%z+4] CPURegs:%vreg196
	ST %vreg196<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg196
	ST %vreg195<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg195
    Successors according to CFG: BB#16

BB#16: derived from LLVM BB %return
    Predecessors according to CFG: BB#5 BB#4 BB#3 BB#1 BB#15 BB#14 BB#7
	%vreg211<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg211
	%vreg212<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg212
	%V0<def> = COPY %vreg211; CPURegs:%vreg211
	%V1<def> = COPY %vreg212; CPURegs:%vreg212
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function _Log.

