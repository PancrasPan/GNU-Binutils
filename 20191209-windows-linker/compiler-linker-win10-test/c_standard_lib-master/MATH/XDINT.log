
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/XDINT.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Dint: SSA
Frame Objects:
  fi#0: size=2, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=2, align=4, at location [SP]
  fi#5: size=2, align=4, at location [SP]
Function Live Ins: %A0 in %vreg2, %A1 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg3<def> = COPY %A1; CPURegs:%vreg3
	%vreg2<def> = COPY %A0; CPURegs:%vreg2
	ST %vreg2, <fi#1>, 0; mem:ST4[%px.addr] CPURegs:%vreg2
	STH %vreg3, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg3
	%vreg5<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg5
	ST %vreg5, <fi#3>, 0; mem:ST4[%ps] CPURegs:%vreg5
	%vreg6<def> = LDHZ %vreg5, 6; mem:LD2[%arrayidx] CPURegs:%vreg6,%vreg5
	%vreg7<def> = MovGR %ZERO, 15; CPURegs:%vreg7
	%vreg8<def> = AND %vreg6<kill>, %vreg7; CPURegs:%vreg8,%vreg6,%vreg7
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg9<def> = NEQI %vreg8<kill>, 0; CPURegs:%vreg9,%vreg8
	JC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#4(20) BB#1(12)

BB#1: derived from LLVM BB %lor.lhs.false
    Predecessors according to CFG: BB#0
	%vreg11<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg11
	%vreg12<def> = LDHZ %vreg11<kill>, 4; mem:LD2[%arrayidx1] CPURegs:%vreg12,%vreg11
	%vreg13<def> = NEQI %vreg12<kill>, 0; CPURegs:%vreg13,%vreg12
	JC %vreg13<kill>, <BB#4>; CPURegs:%vreg13
	Jmp <BB#2>
    Successors according to CFG: BB#4(20) BB#2(12)

BB#2: derived from LLVM BB %lor.lhs.false4
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg15
	%vreg16<def> = LDHZ %vreg15<kill>, 2; mem:LD2[%arrayidx5] CPURegs:%vreg16,%vreg15
	%vreg17<def> = NEQI %vreg16<kill>, 0; CPURegs:%vreg17,%vreg16
	JC %vreg17<kill>, <BB#4>; CPURegs:%vreg17
	Jmp <BB#3>
    Successors according to CFG: BB#4(20) BB#3(12)

BB#3: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#2
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg18
	%vreg19<def> = LDHZ %vreg18<kill>, 0; mem:LD2[%arrayidx81] CPURegs:%vreg19,%vreg18
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	%vreg0<def> = NEQ %vreg19<kill>, %vreg20<kill>; CPURegs:%vreg0,%vreg19,%vreg20
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %lor.end
    Predecessors according to CFG: BB#0 BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg4, <BB#1>, %vreg4, <BB#2>, %vreg0, <BB#3>; CPURegs:%vreg1,%vreg4,%vreg4,%vreg4,%vreg0
	STH %vreg1, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg1
	%vreg21<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg21
	%vreg22<def> = LDHZ %vreg21<kill>, 6; mem:LD2[%arrayidx12] CPURegs:%vreg22,%vreg21
	%vreg23<def> = MovGR %ZERO, 32752; CPURegs:%vreg23
	%vreg24<def> = AND %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	%vreg25<def> = MovGR %ZERO, 4; CPURegs:%vreg25
	%vreg26<def> = SRL %vreg24<kill>, %vreg25; CPURegs:%vreg26,%vreg24,%vreg25
	STH %vreg26<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg26
	%vreg27<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg27
	%vreg28<def> = NEQI %vreg27<kill>, 0; CPURegs:%vreg28,%vreg27
	JC %vreg28<kill>, <BB#7>; CPURegs:%vreg28
	Jmp <BB#5>
    Successors according to CFG: BB#5(12) BB#7(20)

BB#5: derived from LLVM BB %land.lhs.true
    Predecessors according to CFG: BB#4
	%vreg29<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg29
	%vreg30<def> = NEQI %vreg29<kill>, 0; CPURegs:%vreg30,%vreg29
	JC %vreg30<kill>, <BB#7>; CPURegs:%vreg30
	Jmp <BB#6>
    Successors according to CFG: BB#7(20) BB#6(12)

BB#6: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#5
	%vreg31<def> = MovGR %ZERO, 0; CPURegs:%vreg31
	STH %vreg31<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg31
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#7: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4 BB#5
	%vreg32<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg32
	%vreg33<def> = NEQI %vreg32<kill>, 2047; CPURegs:%vreg33,%vreg32
	JC %vreg33<kill>, <BB#11>; CPURegs:%vreg33
	Jmp <BB#8>
    Successors according to CFG: BB#11(16) BB#8(16)

BB#8: derived from LLVM BB %if.else23
    Predecessors according to CFG: BB#7
	%vreg34<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg34
	%vreg35<def> = NEQI %vreg34<kill>, 0; CPURegs:%vreg35,%vreg34
	JC %vreg35<kill>, <BB#10>; CPURegs:%vreg35
	Jmp <BB#9>
    Successors according to CFG: BB#10(20) BB#9(12)

BB#9: derived from LLVM BB %if.then25
    Predecessors according to CFG: BB#8
	%vreg36<def> = MovGR %ZERO, 1; CPURegs:%vreg36
	STH %vreg36<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg36
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#10: derived from LLVM BB %if.else26
    Predecessors according to CFG: BB#8
	%vreg37<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg37
	%vreg38<def,tied1> = MovIGL %vreg37<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg38,%vreg37
	%vreg39<def> = MovGR %ZERO, 33; CPURegs:%vreg39
	ST %vreg39<kill>, %vreg38<kill>, 0; mem:ST4[@errno] CPURegs:%vreg39,%vreg38
	%vreg40<def> = MovGR %ZERO, 2; CPURegs:%vreg40
	STH %vreg40<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg40
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#11: derived from LLVM BB %if.end27
    Predecessors according to CFG: BB#7
	%vreg41<def> = LDH <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 1075; CPURegs:%vreg42
	%vreg43<def> = SUBu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	%vreg44<def> = LDH <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg44
	%vreg45<def> = SUBu %vreg43<kill>, %vreg44<kill>; CPURegs:%vreg45,%vreg43,%vreg44
	STH %vreg45<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg45
	%vreg46<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg46
	%vreg47<def> = LTI %vreg46<kill>, 1; CPURegs:%vreg47,%vreg46
	JNC %vreg47<kill>, <BB#13>; CPURegs:%vreg47
	Jmp <BB#12>
    Successors according to CFG: BB#12(16) BB#13(16)

BB#12: derived from LLVM BB %if.then35
    Predecessors according to CFG: BB#11
	%vreg117<def> = MovGR %ZERO, 0; CPURegs:%vreg117
	STH %vreg117<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg117
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#13: derived from LLVM BB %if.else36
    Predecessors according to CFG: BB#11
	%vreg48<def> = MovGR %ZERO, 53; CPURegs:%vreg48
	%vreg49<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg49
	%vreg50<def> = LT %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	JC %vreg50<kill>, <BB#15>; CPURegs:%vreg50
	Jmp <BB#14>
    Successors according to CFG: BB#14(16) BB#15(16)

BB#14: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#13
	%vreg111<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg111
	%vreg112<def> = MovGR %ZERO, 0; CPURegs:%vreg112
	STH %vreg112, %vreg111<kill>, 6; mem:ST2[%arrayidx41] CPURegs:%vreg112,%vreg111
	%vreg113<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg113
	STH %vreg112, %vreg113<kill>, 4; mem:ST2[%arrayidx42] CPURegs:%vreg112,%vreg113
	%vreg114<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg114
	STH %vreg112, %vreg114<kill>, 2; mem:ST2[%arrayidx43] CPURegs:%vreg112,%vreg114
	%vreg115<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg115
	STH %vreg112, %vreg115<kill>, 0; mem:ST2[%arrayidx442] CPURegs:%vreg112,%vreg115
	%vreg116<def> = MovGR %ZERO, 65535; CPURegs:%vreg116
	STH %vreg116<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg116
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#15: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#13
	%vreg53<def> = LDHZ <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg53
	%vreg54<def> = AND %vreg53<kill>, %vreg7; CPURegs:%vreg54,%vreg53,%vreg7
	%vreg55<def> = MovGR %ZERO, 1; CPURegs:%vreg55
	%vreg56<def> = SHL %vreg54<kill>, %vreg55; CPURegs:%vreg56,%vreg54,%vreg55
	%vreg57<def> = MovIGH %ZERO, <ga:@_Dint.mask>[TF=3]; CPURegs:%vreg57
	%vreg58<def,tied1> = MovIGL %vreg57<tied0>, <ga:@_Dint.mask>[TF=4]; CPURegs:%vreg58,%vreg57
	%vreg59<def> = ADDu %vreg58<kill>, %vreg56<kill>; CPURegs:%vreg59,%vreg58,%vreg56
	%vreg60<def> = LDH %vreg59<kill>, 0; mem:LD2[%arrayidx48] CPURegs:%vreg60,%vreg59
	STH %vreg60<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg60
	%vreg62<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg62
	%vreg63<def> = SRL %vreg62<kill>, %vreg25; CPURegs:%vreg63,%vreg62,%vreg25
	STH %vreg63<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg63
	%vreg64<def> = MovIGH %ZERO, <ga:@_Dint.sub>[TF=3]; CPURegs:%vreg64
	%vreg65<def,tied1> = MovIGL %vreg64<tied0>, <ga:@_Dint.sub>[TF=4]; CPURegs:%vreg65,%vreg64
	%vreg66<def> = MovGR %ZERO, 2; CPURegs:%vreg66
	%vreg67<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg67
	%vreg68<def> = SHL %vreg67<kill>, %vreg66; CPURegs:%vreg68,%vreg67,%vreg66
	%vreg69<def> = ADDu %vreg65, %vreg68<kill>; CPURegs:%vreg69,%vreg65,%vreg68
	%vreg70<def> = LD %vreg69<kill>, 0; mem:LD4[%arrayidx52] CPURegs:%vreg70,%vreg69
	%vreg71<def> = SHL %vreg70<kill>, %vreg55; CPURegs:%vreg71,%vreg70,%vreg55
	%vreg72<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg72
	%vreg73<def> = ADDu %vreg72<kill>, %vreg71<kill>; CPURegs:%vreg73,%vreg72,%vreg71
	%vreg74<def> = LDH %vreg73<kill>, 0; mem:LD2[%arrayidx53] CPURegs:%vreg74,%vreg73
	%vreg75<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg75
	%vreg76<def> = AND %vreg75<kill>, %vreg74<kill>; CPURegs:%vreg76,%vreg75,%vreg74
	STH %vreg76, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg76
	%vreg77<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg77
	%vreg78<def> = SHL %vreg77<kill>, %vreg66; CPURegs:%vreg78,%vreg77,%vreg66
	%vreg79<def> = ADDu %vreg65, %vreg78<kill>; CPURegs:%vreg79,%vreg65,%vreg78
	%vreg80<def> = LD %vreg79<kill>, 0; mem:LD4[%arrayidx60] CPURegs:%vreg80,%vreg79
	%vreg81<def> = SHL %vreg80<kill>, %vreg55; CPURegs:%vreg81,%vreg80,%vreg55
	%vreg82<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg82
	%vreg83<def> = ADDu %vreg82<kill>, %vreg81<kill>; CPURegs:%vreg83,%vreg82,%vreg81
	%vreg84<def> = LDH %vreg83, 0; mem:LD2[%arrayidx61] CPURegs:%vreg84,%vreg83
	%vreg85<def> = XORu %vreg84<kill>, %vreg76; CPURegs:%vreg85,%vreg84,%vreg76
	STH %vreg85<kill>, %vreg83, 0; mem:ST2[%arrayidx61] CPURegs:%vreg85,%vreg83
	%vreg51<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg51
	%vreg86<def> = EQI %vreg51, 1; CPURegs:%vreg86,%vreg51
	JC %vreg86<kill>, <BB#18>; CPURegs:%vreg86
	Jmp <BB#23>
    Successors according to CFG: BB#18(16) BB#23(32)

BB#23: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#15
	%vreg87<def> = EQI %vreg51, 2; CPURegs:%vreg87,%vreg51
	JC %vreg87<kill>, <BB#17>; CPURegs:%vreg87
	Jmp <BB#24>
    Successors according to CFG: BB#17(16) BB#24(16)

BB#24: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#23
	%vreg88<def> = NEQI %vreg51, 3; CPURegs:%vreg88,%vreg51
	JC %vreg88<kill>, <BB#19>; CPURegs:%vreg88
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#19(16)

BB#16: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#24
	%vreg89<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg89
	%vreg90<def> = LDH %vreg89<kill>, 4; mem:LD2[%arrayidx65] CPURegs:%vreg90,%vreg89
	%vreg91<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg91
	%vreg92<def> = ORu %vreg91<kill>, %vreg90<kill>; CPURegs:%vreg92,%vreg91,%vreg90
	STH %vreg92<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg92
	%vreg93<def> = MovGR %ZERO, 0; CPURegs:%vreg93
	%vreg94<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg94
	STH %vreg93<kill>, %vreg94<kill>, 4; mem:ST2[%arrayidx69] CPURegs:%vreg93,%vreg94
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %sw.bb70
    Predecessors according to CFG: BB#23 BB#16
	%vreg95<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg95
	%vreg96<def> = LDH %vreg95<kill>, 2; mem:LD2[%arrayidx71] CPURegs:%vreg96,%vreg95
	%vreg97<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg97
	%vreg98<def> = ORu %vreg97<kill>, %vreg96<kill>; CPURegs:%vreg98,%vreg97,%vreg96
	STH %vreg98<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg98
	%vreg99<def> = MovGR %ZERO, 0; CPURegs:%vreg99
	%vreg100<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg100
	STH %vreg99<kill>, %vreg100<kill>, 2; mem:ST2[%arrayidx76] CPURegs:%vreg99,%vreg100
    Successors according to CFG: BB#18

BB#18: derived from LLVM BB %sw.bb77
    Predecessors according to CFG: BB#15 BB#17
	%vreg101<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg101
	%vreg102<def> = LDH %vreg101<kill>, 0; mem:LD2[%arrayidx783] CPURegs:%vreg102,%vreg101
	%vreg103<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg103
	%vreg104<def> = ORu %vreg103<kill>, %vreg102<kill>; CPURegs:%vreg104,%vreg103,%vreg102
	STH %vreg104<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg104
	%vreg105<def> = MovGR %ZERO, 0; CPURegs:%vreg105
	%vreg106<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg106
	STH %vreg105<kill>, %vreg106<kill>, 0; mem:ST2[%arrayidx834] CPURegs:%vreg105,%vreg106
    Successors according to CFG: BB#19

BB#19: derived from LLVM BB %sw.epilog
    Predecessors according to CFG: BB#24 BB#18
	%vreg107<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg107
	%vreg108<def> = EQI %vreg107<kill>, 0; CPURegs:%vreg108,%vreg107
	JC %vreg108<kill>, <BB#21>; CPURegs:%vreg108
	Jmp <BB#20>
    Successors according to CFG: BB#20(20) BB#21(12)

BB#20: derived from LLVM BB %if.then85
    Predecessors according to CFG: BB#19
	%vreg110<def> = MovGR %ZERO, 65535; CPURegs:%vreg110
	STH %vreg110<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg110
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#21: derived from LLVM BB %if.else86
    Predecessors according to CFG: BB#19
	%vreg109<def> = MovGR %ZERO, 0; CPURegs:%vreg109
	STH %vreg109<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg109
    Successors according to CFG: BB#22

BB#22: derived from LLVM BB %return
    Predecessors according to CFG: BB#6 BB#9 BB#10 BB#21 BB#20 BB#14 BB#12
	%vreg118<def> = LDHS <fi#0>, 0; mem:LD2[%retval](align=4) CPURegs:%vreg118
	%V0<def> = COPY %vreg118; CPURegs:%vreg118
	RetLR %V0<imp-use>

# End machine code for function _Dint.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function _Dint: SSA
Frame Objects:
  fi#0: size=2, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=2, align=4, at location [SP]
  fi#5: size=2, align=4, at location [SP]
Function Live Ins: %A0 in %vreg2, %A1 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg3<def> = COPY %A1; CPURegs:%vreg3
	%vreg2<def> = COPY %A0; CPURegs:%vreg2
	ST %vreg2, <fi#1>, 0; mem:ST4[%px.addr] CPURegs:%vreg2
	STH %vreg3, <fi#2>, 0; mem:ST2[%xexp.addr](align=4) CPURegs:%vreg3
	%vreg5<def> = LD <fi#1>, 0; mem:LD4[%px.addr] CPURegs:%vreg5
	ST %vreg5, <fi#3>, 0; mem:ST4[%ps] CPURegs:%vreg5
	%vreg6<def> = LDHZ %vreg5, 6; mem:LD2[%arrayidx] CPURegs:%vreg6,%vreg5
	%vreg7<def> = MovGR %ZERO, 15; CPURegs:%vreg7
	%vreg8<def> = AND %vreg6<kill>, %vreg7; CPURegs:%vreg8,%vreg6,%vreg7
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg9<def> = NEQI %vreg8<kill>, 0; CPURegs:%vreg9,%vreg8
	JC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#1>
    Successors according to CFG: BB#4(20) BB#1(12)

BB#1: derived from LLVM BB %lor.lhs.false
    Predecessors according to CFG: BB#0
	%vreg11<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg11
	%vreg12<def> = LDHZ %vreg11<kill>, 4; mem:LD2[%arrayidx1] CPURegs:%vreg12,%vreg11
	%vreg13<def> = NEQI %vreg12<kill>, 0; CPURegs:%vreg13,%vreg12
	JC %vreg13<kill>, <BB#4>; CPURegs:%vreg13
	Jmp <BB#2>
    Successors according to CFG: BB#4(20) BB#2(12)

BB#2: derived from LLVM BB %lor.lhs.false4
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg15
	%vreg16<def> = LDHZ %vreg15<kill>, 2; mem:LD2[%arrayidx5] CPURegs:%vreg16,%vreg15
	%vreg17<def> = NEQI %vreg16<kill>, 0; CPURegs:%vreg17,%vreg16
	JC %vreg17<kill>, <BB#4>; CPURegs:%vreg17
	Jmp <BB#3>
    Successors according to CFG: BB#4(20) BB#3(12)

BB#3: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#2
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg18
	%vreg19<def> = LDHZ %vreg18<kill>, 0; mem:LD2[%arrayidx81] CPURegs:%vreg19,%vreg18
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	%vreg0<def> = NEQ %vreg19<kill>, %vreg20<kill>; CPURegs:%vreg0,%vreg19,%vreg20
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %lor.end
    Predecessors according to CFG: BB#0 BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg4, <BB#1>, %vreg4, <BB#2>, %vreg0, <BB#3>; CPURegs:%vreg1,%vreg4,%vreg4,%vreg4,%vreg0
	STH %vreg1, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg1
	%vreg21<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg21
	%vreg22<def> = LDHZ %vreg21<kill>, 6; mem:LD2[%arrayidx12] CPURegs:%vreg22,%vreg21
	%vreg23<def> = MovGR %ZERO, 32752; CPURegs:%vreg23
	%vreg24<def> = AND %vreg22<kill>, %vreg23<kill>; CPURegs:%vreg24,%vreg22,%vreg23
	%vreg25<def> = MovGR %ZERO, 4; CPURegs:%vreg25
	%vreg26<def> = SRL %vreg24<kill>, %vreg25; CPURegs:%vreg26,%vreg24,%vreg25
	STH %vreg26<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg26
	%vreg27<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg27
	%vreg28<def> = NEQI %vreg27<kill>, 0; CPURegs:%vreg28,%vreg27
	JC %vreg28<kill>, <BB#7>; CPURegs:%vreg28
	Jmp <BB#5>
    Successors according to CFG: BB#5(12) BB#7(20)

BB#5: derived from LLVM BB %land.lhs.true
    Predecessors according to CFG: BB#4
	%vreg29<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg29
	%vreg30<def> = NEQI %vreg29<kill>, 0; CPURegs:%vreg30,%vreg29
	JC %vreg30<kill>, <BB#7>; CPURegs:%vreg30
	Jmp <BB#6>
    Successors according to CFG: BB#7(20) BB#6(12)

BB#6: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#5
	%vreg31<def> = MovGR %ZERO, 0; CPURegs:%vreg31
	STH %vreg31<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg31
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#7: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4 BB#5
	%vreg32<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg32
	%vreg33<def> = NEQI %vreg32<kill>, 2047; CPURegs:%vreg33,%vreg32
	JC %vreg33<kill>, <BB#11>; CPURegs:%vreg33
	Jmp <BB#8>
    Successors according to CFG: BB#11(16) BB#8(16)

BB#8: derived from LLVM BB %if.else23
    Predecessors according to CFG: BB#7
	%vreg34<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg34
	%vreg35<def> = NEQI %vreg34<kill>, 0; CPURegs:%vreg35,%vreg34
	JC %vreg35<kill>, <BB#10>; CPURegs:%vreg35
	Jmp <BB#9>
    Successors according to CFG: BB#10(20) BB#9(12)

BB#9: derived from LLVM BB %if.then25
    Predecessors according to CFG: BB#8
	%vreg36<def> = MovGR %ZERO, 1; CPURegs:%vreg36
	STH %vreg36<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg36
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#10: derived from LLVM BB %if.else26
    Predecessors according to CFG: BB#8
	%vreg37<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg37
	%vreg38<def,tied1> = MovIGL %vreg37<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg38,%vreg37
	%vreg39<def> = MovGR %ZERO, 33; CPURegs:%vreg39
	ST %vreg39<kill>, %vreg38<kill>, 0; mem:ST4[@errno] CPURegs:%vreg39,%vreg38
	%vreg40<def> = MovGR %ZERO, 2; CPURegs:%vreg40
	STH %vreg40<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg40
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#11: derived from LLVM BB %if.end27
    Predecessors according to CFG: BB#7
	%vreg41<def> = LDH <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg41
	%vreg42<def> = MovGR %ZERO, 1075; CPURegs:%vreg42
	%vreg43<def> = SUBu %vreg42<kill>, %vreg41<kill>; CPURegs:%vreg43,%vreg42,%vreg41
	%vreg44<def> = LDH <fi#2>, 0; mem:LD2[%xexp.addr](align=4) CPURegs:%vreg44
	%vreg45<def> = SUBu %vreg43<kill>, %vreg44<kill>; CPURegs:%vreg45,%vreg43,%vreg44
	STH %vreg45<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg45
	%vreg46<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg46
	%vreg47<def> = LTI %vreg46<kill>, 1; CPURegs:%vreg47,%vreg46
	JNC %vreg47<kill>, <BB#13>; CPURegs:%vreg47
	Jmp <BB#12>
    Successors according to CFG: BB#12(16) BB#13(16)

BB#12: derived from LLVM BB %if.then35
    Predecessors according to CFG: BB#11
	%vreg117<def> = MovGR %ZERO, 0; CPURegs:%vreg117
	STH %vreg117<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg117
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#13: derived from LLVM BB %if.else36
    Predecessors according to CFG: BB#11
	%vreg48<def> = MovGR %ZERO, 53; CPURegs:%vreg48
	%vreg49<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg49
	%vreg50<def> = LT %vreg49<kill>, %vreg48<kill>; CPURegs:%vreg50,%vreg49,%vreg48
	JC %vreg50<kill>, <BB#15>; CPURegs:%vreg50
	Jmp <BB#14>
    Successors according to CFG: BB#14(16) BB#15(16)

BB#14: derived from LLVM BB %if.then40
    Predecessors according to CFG: BB#13
	%vreg111<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg111
	%vreg112<def> = MovGR %ZERO, 0; CPURegs:%vreg112
	STH %vreg112, %vreg111<kill>, 6; mem:ST2[%arrayidx41] CPURegs:%vreg112,%vreg111
	%vreg113<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg113
	STH %vreg112, %vreg113<kill>, 4; mem:ST2[%arrayidx42] CPURegs:%vreg112,%vreg113
	%vreg114<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg114
	STH %vreg112, %vreg114<kill>, 2; mem:ST2[%arrayidx43] CPURegs:%vreg112,%vreg114
	%vreg115<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg115
	STH %vreg112, %vreg115<kill>, 0; mem:ST2[%arrayidx442] CPURegs:%vreg112,%vreg115
	%vreg116<def> = MovGR %ZERO, 65535; CPURegs:%vreg116
	STH %vreg116<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg116
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#15: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#13
	%vreg53<def> = LDHZ <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg53
	%vreg54<def> = AND %vreg53<kill>, %vreg7; CPURegs:%vreg54,%vreg53,%vreg7
	%vreg55<def> = MovGR %ZERO, 1; CPURegs:%vreg55
	%vreg56<def> = SHL %vreg54<kill>, %vreg55; CPURegs:%vreg56,%vreg54,%vreg55
	%vreg57<def> = MovIGH %ZERO, <ga:@_Dint.mask>[TF=3]; CPURegs:%vreg57
	%vreg58<def,tied1> = MovIGL %vreg57<tied0>, <ga:@_Dint.mask>[TF=4]; CPURegs:%vreg58,%vreg57
	%vreg59<def> = ADDu %vreg58<kill>, %vreg56<kill>; CPURegs:%vreg59,%vreg58,%vreg56
	%vreg60<def> = LDH %vreg59<kill>, 0; mem:LD2[%arrayidx48] CPURegs:%vreg60,%vreg59
	STH %vreg60<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg60
	%vreg62<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg62
	%vreg63<def> = SRL %vreg62<kill>, %vreg25; CPURegs:%vreg63,%vreg62,%vreg25
	STH %vreg63<kill>, <fi#5>, 0; mem:ST2[%xchar](align=4) CPURegs:%vreg63
	%vreg64<def> = MovIGH %ZERO, <ga:@_Dint.sub>[TF=3]; CPURegs:%vreg64
	%vreg65<def,tied1> = MovIGL %vreg64<tied0>, <ga:@_Dint.sub>[TF=4]; CPURegs:%vreg65,%vreg64
	%vreg66<def> = MovGR %ZERO, 2; CPURegs:%vreg66
	%vreg67<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg67
	%vreg68<def> = SHL %vreg67<kill>, %vreg66; CPURegs:%vreg68,%vreg67,%vreg66
	%vreg69<def> = ADDu %vreg65, %vreg68<kill>; CPURegs:%vreg69,%vreg65,%vreg68
	%vreg70<def> = LD %vreg69<kill>, 0; mem:LD4[%arrayidx52] CPURegs:%vreg70,%vreg69
	%vreg71<def> = SHL %vreg70<kill>, %vreg55; CPURegs:%vreg71,%vreg70,%vreg55
	%vreg72<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg72
	%vreg73<def> = ADDu %vreg72<kill>, %vreg71<kill>; CPURegs:%vreg73,%vreg72,%vreg71
	%vreg74<def> = LDH %vreg73<kill>, 0; mem:LD2[%arrayidx53] CPURegs:%vreg74,%vreg73
	%vreg75<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg75
	%vreg76<def> = AND %vreg75<kill>, %vreg74<kill>; CPURegs:%vreg76,%vreg75,%vreg74
	STH %vreg76, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg76
	%vreg77<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg77
	%vreg78<def> = SHL %vreg77<kill>, %vreg66; CPURegs:%vreg78,%vreg77,%vreg66
	%vreg79<def> = ADDu %vreg65, %vreg78<kill>; CPURegs:%vreg79,%vreg65,%vreg78
	%vreg80<def> = LD %vreg79<kill>, 0; mem:LD4[%arrayidx60] CPURegs:%vreg80,%vreg79
	%vreg81<def> = SHL %vreg80<kill>, %vreg55; CPURegs:%vreg81,%vreg80,%vreg55
	%vreg82<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg82
	%vreg83<def> = ADDu %vreg82<kill>, %vreg81<kill>; CPURegs:%vreg83,%vreg82,%vreg81
	%vreg84<def> = LDH %vreg83, 0; mem:LD2[%arrayidx61] CPURegs:%vreg84,%vreg83
	%vreg85<def> = XORu %vreg84<kill>, %vreg76; CPURegs:%vreg85,%vreg84,%vreg76
	STH %vreg85<kill>, %vreg83, 0; mem:ST2[%arrayidx61] CPURegs:%vreg85,%vreg83
	%vreg51<def> = LDHS <fi#5>, 0; mem:LD2[%xchar](align=4) CPURegs:%vreg51
	%vreg86<def> = EQI %vreg51, 1; CPURegs:%vreg86,%vreg51
	JC %vreg86<kill>, <BB#18>; CPURegs:%vreg86
	Jmp <BB#23>
    Successors according to CFG: BB#18(16) BB#23(32)

BB#23: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#15
	%vreg87<def> = EQI %vreg51, 2; CPURegs:%vreg87,%vreg51
	JC %vreg87<kill>, <BB#17>; CPURegs:%vreg87
	Jmp <BB#24>
    Successors according to CFG: BB#17(16) BB#24(16)

BB#24: derived from LLVM BB %if.else45
    Predecessors according to CFG: BB#23
	%vreg88<def> = NEQI %vreg51, 3; CPURegs:%vreg88,%vreg51
	JC %vreg88<kill>, <BB#19>; CPURegs:%vreg88
	Jmp <BB#16>
    Successors according to CFG: BB#16(16) BB#19(16)

BB#16: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#24
	%vreg89<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg89
	%vreg90<def> = LDH %vreg89<kill>, 4; mem:LD2[%arrayidx65] CPURegs:%vreg90,%vreg89
	%vreg91<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg91
	%vreg92<def> = ORu %vreg91<kill>, %vreg90<kill>; CPURegs:%vreg92,%vreg91,%vreg90
	STH %vreg92<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg92
	%vreg93<def> = MovGR %ZERO, 0; CPURegs:%vreg93
	%vreg94<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg94
	STH %vreg93<kill>, %vreg94<kill>, 4; mem:ST2[%arrayidx69] CPURegs:%vreg93,%vreg94
    Successors according to CFG: BB#17

BB#17: derived from LLVM BB %sw.bb70
    Predecessors according to CFG: BB#23 BB#16
	%vreg95<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg95
	%vreg96<def> = LDH %vreg95<kill>, 2; mem:LD2[%arrayidx71] CPURegs:%vreg96,%vreg95
	%vreg97<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg97
	%vreg98<def> = ORu %vreg97<kill>, %vreg96<kill>; CPURegs:%vreg98,%vreg97,%vreg96
	STH %vreg98<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg98
	%vreg99<def> = MovGR %ZERO, 0; CPURegs:%vreg99
	%vreg100<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg100
	STH %vreg99<kill>, %vreg100<kill>, 2; mem:ST2[%arrayidx76] CPURegs:%vreg99,%vreg100
    Successors according to CFG: BB#18

BB#18: derived from LLVM BB %sw.bb77
    Predecessors according to CFG: BB#15 BB#17
	%vreg101<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg101
	%vreg102<def> = LDH %vreg101<kill>, 0; mem:LD2[%arrayidx783] CPURegs:%vreg102,%vreg101
	%vreg103<def> = LDH <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg103
	%vreg104<def> = ORu %vreg103<kill>, %vreg102<kill>; CPURegs:%vreg104,%vreg103,%vreg102
	STH %vreg104<kill>, <fi#4>, 0; mem:ST2[%frac](align=4) CPURegs:%vreg104
	%vreg105<def> = MovGR %ZERO, 0; CPURegs:%vreg105
	%vreg106<def> = LD <fi#3>, 0; mem:LD4[%ps] CPURegs:%vreg106
	STH %vreg105<kill>, %vreg106<kill>, 0; mem:ST2[%arrayidx834] CPURegs:%vreg105,%vreg106
    Successors according to CFG: BB#19

BB#19: derived from LLVM BB %sw.epilog
    Predecessors according to CFG: BB#24 BB#18
	%vreg107<def> = LDHZ <fi#4>, 0; mem:LD2[%frac](align=4) CPURegs:%vreg107
	%vreg108<def> = EQI %vreg107<kill>, 0; CPURegs:%vreg108,%vreg107
	JC %vreg108<kill>, <BB#21>; CPURegs:%vreg108
	Jmp <BB#20>
    Successors according to CFG: BB#20(20) BB#21(12)

BB#20: derived from LLVM BB %if.then85
    Predecessors according to CFG: BB#19
	%vreg110<def> = MovGR %ZERO, 65535; CPURegs:%vreg110
	STH %vreg110<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg110
	Jmp <BB#22>
    Successors according to CFG: BB#22

BB#21: derived from LLVM BB %if.else86
    Predecessors according to CFG: BB#19
	%vreg109<def> = MovGR %ZERO, 0; CPURegs:%vreg109
	STH %vreg109<kill>, <fi#0>, 0; mem:ST2[%retval](align=4) CPURegs:%vreg109
    Successors according to CFG: BB#22

BB#22: derived from LLVM BB %return
    Predecessors according to CFG: BB#6 BB#9 BB#10 BB#21 BB#20 BB#14 BB#12
	%vreg118<def> = LDHS <fi#0>, 0; mem:LD2[%retval](align=4) CPURegs:%vreg118
	%V0<def> = COPY %vreg118; CPURegs:%vreg118
	RetLR %V0<imp-use>

# End machine code for function _Dint.

