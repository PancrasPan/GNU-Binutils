
#####==========stderr_mid==========#####:
In file included from ./c_standard_lib-master/MATH/TANH.c:2:
In file included from ./c_standard_lib-master/_HEADERS\xmath.h:2:
In file included from ./c_standard_lib-master/_HEADERS\errno.h:5:
./c_standard_lib-master/_HEADERS\yvals.h:35:5: warning: declaration of built-in function 'setjmp' requires inclusion of the header <setjmp.h> [-Wbuiltin-requires-header]
int setjmp(int *);
    ^
'' is not a recognized processor for this target (ignoring processor)
1 warning generated.

#####==========stderr_asm==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function tanh: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	%A0<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; CPURegs:%vreg4
	%vreg5<def> = EQI %vreg4, 0; CPURegs:%vreg5,%vreg4
	JC %vreg5<kill>, <BB#5>; CPURegs:%vreg5
	Jmp <BB#19>
    Successors according to CFG: BB#5(16) BB#19(32)

BB#19: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg2<def> = COPY %vreg4; CPURegs:%vreg2,%vreg4
	%vreg6<def> = EQI %vreg2, 1; CPURegs:%vreg6,%vreg2
	JC %vreg6<kill>, <BB#2>; CPURegs:%vreg6
	Jmp <BB#20>
    Successors according to CFG: BB#2(16) BB#20(16)

BB#20: derived from LLVM BB %entry
    Predecessors according to CFG: BB#19
	%vreg7<def> = NEQI %vreg2, 2; CPURegs:%vreg7,%vreg2
	JC %vreg7<kill>, <BB#6>; CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#20
	%vreg17<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg17
	%vreg18<def,tied1> = MovIGL %vreg17<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg18,%vreg17
	%vreg19<def> = MovGR %ZERO, 33; CPURegs:%vreg19
	ST %vreg19<kill>, %vreg18<kill>, 0; mem:ST4[@errno] CPURegs:%vreg19,%vreg18
	%vreg20<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg20
	%vreg21<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg21
	ST %vreg21<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg21
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#19
	%vreg9<def> = MovGR %ZERO, 128; CPURegs:%vreg9
	%vreg10<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg10
	%vreg11<def> = AND %vreg10<kill>, %vreg9<kill>; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#4>; CPURegs:%vreg12
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg15<def> = MovGR %ZERO, -1074790400; CPURegs:%vreg15
	ST %vreg15<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg15
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	ST %vreg16<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg16
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg13<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg13
	ST %vreg13<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg13
	%vreg14<def> = MovGR %ZERO, 0; CPURegs:%vreg14
	ST %vreg14<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg14
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#5: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	ST %vreg8, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg8
	ST %vreg8, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg8
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#6: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#20
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg22<def> = COPY %SP; CPURegs:%vreg22
	%vreg23<def> = MovGR %ZERO, 0; CPURegs:%vreg23
	ST %vreg23, %vreg22, 12; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg22
	ST %vreg23, %vreg22, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg24
	%vreg25<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg25
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg27<def> = COPY %SP; CPURegs:%vreg27
	ST %vreg23, %vreg27, 12; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg27
	ST %vreg23, %vreg27, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg27
	%vreg28<def> = MovGR %ZERO, -1; CPURegs:%vreg28
	%vreg29<def> = GT %vreg26, %vreg28; CPURegs:%vreg29,%vreg26,%vreg28
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg30<def> = COPY %V0; CPURegs:%vreg30
	%vreg31<def> = NEQ %vreg30, %vreg23; CPURegs:%vreg31,%vreg30,%vreg23
	%vreg32<def> = ORu %vreg31<kill>, %vreg29<kill>; CPURegs:%vreg32,%vreg31,%vreg29
	JC %vreg32<kill>, <BB#8>; CPURegs:%vreg32
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg34<def> = COPY %SP; CPURegs:%vreg34
	%vreg35<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg35
	ST %vreg35<kill>, %vreg34, 12; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg34
	%vreg36<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg36
	ST %vreg36<kill>, %vreg34, 8; mem:ST4[<unknown>] CPURegs:%vreg36,%vreg34
	%vreg37<def> = MovGR %ZERO, 0; CPURegs:%vreg37
	%vreg38<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg38
	%A0<def> = COPY %vreg37; CPURegs:%vreg37
	%A1<def> = COPY %vreg38; CPURegs:%vreg38
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg39<def> = COPY %V0; CPURegs:%vreg39
	%vreg40<def> = COPY %V1; CPURegs:%vreg40
	ST %vreg40, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg40
	ST %vreg39, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg39
	%vreg41<def> = MovGR %ZERO, 1; CPURegs:%vreg41
	STH %vreg41<kill>, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg41
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#8: derived from LLVM BB %if.else6
    Predecessors according to CFG: BB#6
	STH %vreg23, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg23
    Successors according to CFG: BB#9

BB#9: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#8 BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg42<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg42
	%vreg43<def,tied1> = MovIGL %vreg42<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg43,%vreg42
	%vreg44<def> = COPY %SP; CPURegs:%vreg44
	%vreg45<def> = LD %vreg43, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg45,%vreg43
	ST %vreg45<kill>, %vreg44, 12; mem:ST4[<unknown>] CPURegs:%vreg45,%vreg44
	%vreg46<def> = LD %vreg43, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg46,%vreg43
	ST %vreg46<kill>, %vreg44, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg44
	%vreg47<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg47
	%vreg48<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg48
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg49<def> = COPY %V0; CPURegs:%vreg49
	%vreg51<def> = LT %vreg49, %vreg23; CPURegs:%vreg51,%vreg49,%vreg23
	JC %vreg51<kill>, <BB#15>; CPURegs:%vreg51
	Jmp <BB#10>
    Successors according to CFG: BB#15(16) BB#10(16)

BB#10: derived from LLVM BB %if.else10
    Predecessors according to CFG: BB#9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg52<def> = COPY %SP; CPURegs:%vreg52
	%vreg53<def> = MovGR %ZERO, 1071748074; CPURegs:%vreg53
	ST %vreg53, %vreg52, 12; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg52
	%vreg54<def> = MovGR %ZERO, 2058158859; CPURegs:%vreg54
	ST %vreg54, %vreg52, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg52
	%vreg55<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg55
	%vreg56<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg56
	%A0<def> = COPY %vreg55; CPURegs:%vreg55
	%A1<def> = COPY %vreg56; CPURegs:%vreg56
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg57<def> = COPY %V0; CPURegs:%vreg57
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg58<def> = COPY %SP; CPURegs:%vreg58
	ST %vreg53, %vreg58, 12; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg58
	ST %vreg54, %vreg58, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg58
	%vreg60<def> = GT %vreg57, %vreg28; CPURegs:%vreg60,%vreg57,%vreg28
	%A0<def> = COPY %vreg55; CPURegs:%vreg55
	%A1<def> = COPY %vreg56; CPURegs:%vreg56
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg61<def> = COPY %V0; CPURegs:%vreg61
	%vreg63<def> = NEQ %vreg61, %vreg23; CPURegs:%vreg63,%vreg61,%vreg23
	%vreg64<def> = ORu %vreg63<kill>, %vreg60<kill>; CPURegs:%vreg64,%vreg63,%vreg60
	JC %vreg64<kill>, <BB#12>; CPURegs:%vreg64
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#12(16)

BB#11: derived from LLVM BB %if.then13
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg88<def> = COPY %SP; CPURegs:%vreg88
	%vreg89<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg89
	ST %vreg89, %vreg88, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg88
	%vreg90<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg90
	ST %vreg90, %vreg88, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg88
	%A0<def> = COPY %vreg90; CPURegs:%vreg90
	%A1<def> = COPY %vreg89; CPURegs:%vreg89
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg91<def> = COPY %V0; CPURegs:%vreg91
	%vreg92<def> = COPY %V1; CPURegs:%vreg92
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %SP; CPURegs:%vreg93
	ST %vreg92, %vreg93, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg93
	ST %vreg91, %vreg93, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg93
	%vreg94<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg94
	%vreg95<def,tied1> = MovIGL %vreg94<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg95,%vreg94
	%vreg96<def> = LD %vreg95, 0; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg96,%vreg95
	%vreg97<def> = LD %vreg95, 4; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg97,%vreg95
	%A0<def> = COPY %vreg96; CPURegs:%vreg96
	%A1<def> = COPY %vreg97; CPURegs:%vreg97
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg98<def> = COPY %V0; CPURegs:%vreg98
	%vreg99<def> = COPY %V1; CPURegs:%vreg99
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg100<def> = COPY %SP; CPURegs:%vreg100
	%vreg101<def> = LD %vreg95, 12; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg101,%vreg95
	ST %vreg101<kill>, %vreg100, 12; mem:ST4[<unknown>] CPURegs:%vreg101,%vreg100
	%vreg102<def> = LD %vreg95, 8; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg102,%vreg95
	ST %vreg102<kill>, %vreg100, 8; mem:ST4[<unknown>] CPURegs:%vreg102,%vreg100
	%A0<def> = COPY %vreg98; CPURegs:%vreg98
	%A1<def> = COPY %vreg99; CPURegs:%vreg99
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg103<def> = COPY %V0; CPURegs:%vreg103
	%vreg104<def> = COPY %V1; CPURegs:%vreg104
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg105<def> = COPY %SP; CPURegs:%vreg105
	ST %vreg92, %vreg105, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg105
	ST %vreg91, %vreg105, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg105
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	%vreg109<def> = LD %vreg95, 20; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg109,%vreg95
	ST %vreg109<kill>, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg108
	%vreg110<def> = LD %vreg95, 16; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg110,%vreg95
	ST %vreg110<kill>, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg108
	%A0<def> = COPY %vreg106; CPURegs:%vreg106
	%A1<def> = COPY %vreg107; CPURegs:%vreg107
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg111<def> = COPY %V0; CPURegs:%vreg111
	%vreg112<def> = COPY %V1; CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	ST %vreg92, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg113
	ST %vreg91, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg113
	%vreg114<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg114
	%vreg115<def,tied1> = MovIGL %vreg114<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD %vreg115, 0; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg116,%vreg115
	%vreg117<def> = LD %vreg115, 4; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg117,%vreg115
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg117; CPURegs:%vreg117
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg118<def> = COPY %V0; CPURegs:%vreg118
	%vreg119<def> = COPY %V1; CPURegs:%vreg119
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %SP; CPURegs:%vreg120
	%vreg121<def> = LD %vreg115, 12; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg121,%vreg115
	ST %vreg121<kill>, %vreg120, 12; mem:ST4[<unknown>] CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg115, 8; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg122,%vreg115
	ST %vreg122<kill>, %vreg120, 8; mem:ST4[<unknown>] CPURegs:%vreg122,%vreg120
	%A0<def> = COPY %vreg118; CPURegs:%vreg118
	%A1<def> = COPY %vreg119; CPURegs:%vreg119
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg92, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg125
	ST %vreg91, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	%vreg129<def> = LD %vreg115, 20; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg129,%vreg115
	ST %vreg129<kill>, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg129,%vreg128
	%vreg130<def> = LD %vreg115, 16; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg130,%vreg115
	ST %vreg130<kill>, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg130,%vreg128
	%A0<def> = COPY %vreg126; CPURegs:%vreg126
	%A1<def> = COPY %vreg127; CPURegs:%vreg127
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = COPY %SP; CPURegs:%vreg133
	ST %vreg92, %vreg133, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg133
	ST %vreg91, %vreg133, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg133
	%A0<def> = COPY %vreg131; CPURegs:%vreg131
	%A1<def> = COPY %vreg132; CPURegs:%vreg132
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg134<def> = COPY %V0; CPURegs:%vreg134
	%vreg135<def> = COPY %V1; CPURegs:%vreg135
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg136<def> = COPY %SP; CPURegs:%vreg136
	%vreg137<def> = LD %vreg115, 28; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)+4] CPURegs:%vreg137,%vreg115
	ST %vreg137<kill>, %vreg136, 12; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg136
	%vreg138<def> = LD %vreg115, 24; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)](align=8) CPURegs:%vreg138,%vreg115
	ST %vreg138<kill>, %vreg136, 8; mem:ST4[<unknown>] CPURegs:%vreg138,%vreg136
	%A0<def> = COPY %vreg134; CPURegs:%vreg134
	%A1<def> = COPY %vreg135; CPURegs:%vreg135
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg139<def> = COPY %V0; CPURegs:%vreg139
	%vreg140<def> = COPY %V1; CPURegs:%vreg140
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg141<def> = COPY %SP; CPURegs:%vreg141
	ST %vreg92, %vreg141, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg141
	ST %vreg91, %vreg141, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg141
	ST %vreg92, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg92
	ST %vreg91, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg91
	%vreg142<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg142
	%vreg143<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg143
	%A0<def> = COPY %vreg142; CPURegs:%vreg142
	%A1<def> = COPY %vreg143; CPURegs:%vreg143
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg144<def> = COPY %V0; CPURegs:%vreg144
	%vreg145<def> = COPY %V1; CPURegs:%vreg145
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg146<def> = COPY %SP; CPURegs:%vreg146
	ST %vreg112, %vreg146, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg146
	ST %vreg111, %vreg146, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg146
	%A0<def> = COPY %vreg144; CPURegs:%vreg144
	%A1<def> = COPY %vreg145; CPURegs:%vreg145
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg147<def> = COPY %V0; CPURegs:%vreg147
	%vreg148<def> = COPY %V1; CPURegs:%vreg148
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg149<def> = COPY %SP; CPURegs:%vreg149
	ST %vreg140, %vreg149, 12; mem:ST4[<unknown>] CPURegs:%vreg140,%vreg149
	ST %vreg139, %vreg149, 8; mem:ST4[<unknown>] CPURegs:%vreg139,%vreg149
	%A0<def> = COPY %vreg147; CPURegs:%vreg147
	%A1<def> = COPY %vreg148; CPURegs:%vreg148
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg150<def> = COPY %V0; CPURegs:%vreg150
	%vreg151<def> = COPY %V1; CPURegs:%vreg151
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %SP; CPURegs:%vreg152
	ST %vreg151, %vreg152, 12; mem:ST4[<unknown>] CPURegs:%vreg151,%vreg152
	ST %vreg150, %vreg152, 8; mem:ST4[<unknown>] CPURegs:%vreg150,%vreg152
	%A0<def> = COPY %vreg142; CPURegs:%vreg142
	%A1<def> = COPY %vreg143; CPURegs:%vreg143
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg153<def> = COPY %V0; CPURegs:%vreg153
	%vreg154<def> = COPY %V1; CPURegs:%vreg154
	ST %vreg154, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg154
	ST %vreg153, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg153
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#12: derived from LLVM BB %if.else26
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg65<def> = LEA <fi#1>, 0; CPURegs:%vreg65
	%vreg66<def> = MovGR %ZERO, 0; CPURegs:%vreg66
	%A0<def> = COPY %vreg65; CPURegs:%vreg65
	%A1<def> = COPY %vreg66; CPURegs:%vreg66
	CALL <ga:@_Exp>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg67<def> = COPY %V0; CPURegs:%vreg67
	%vreg68<def> = LTI %vreg67, 0; CPURegs:%vreg68,%vreg67
	JNC %vreg68<kill>, <BB#14>; CPURegs:%vreg68
	Jmp <BB#13>
    Successors according to CFG: BB#13(12) BB#14(20)

BB#13: derived from LLVM BB %if.then31
    Predecessors according to CFG: BB#12
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg71<def> = COPY %SP; CPURegs:%vreg71
	%vreg72<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg72
	ST %vreg72, %vreg71, 12; mem:ST4[<unknown>] CPURegs:%vreg72,%vreg71
	%vreg73<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg73
	ST %vreg73, %vreg71, 8; mem:ST4[<unknown>] CPURegs:%vreg73,%vreg71
	%A0<def> = COPY %vreg73; CPURegs:%vreg73
	%A1<def> = COPY %vreg72; CPURegs:%vreg72
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg74<def> = COPY %V0; CPURegs:%vreg74
	%vreg75<def> = COPY %V1; CPURegs:%vreg75
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg76<def> = COPY %SP; CPURegs:%vreg76
	%vreg77<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg77
	ST %vreg77, %vreg76, 12; mem:ST4[<unknown>] CPURegs:%vreg77,%vreg76
	ST %vreg66, %vreg76, 8; mem:ST4[<unknown>] CPURegs:%vreg66,%vreg76
	%A0<def> = COPY %vreg74; CPURegs:%vreg74
	%A1<def> = COPY %vreg75; CPURegs:%vreg75
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg79<def> = COPY %V0; CPURegs:%vreg79
	%vreg80<def> = COPY %V1; CPURegs:%vreg80
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg81<def> = COPY %SP; CPURegs:%vreg81
	ST %vreg80, %vreg81, 12; mem:ST4[<unknown>] CPURegs:%vreg80,%vreg81
	ST %vreg79, %vreg81, 8; mem:ST4[<unknown>] CPURegs:%vreg79,%vreg81
	%vreg82<def> = MovGR %ZERO, -1073741824; CPURegs:%vreg82
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg82; CPURegs:%vreg82
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg83<def> = COPY %V0; CPURegs:%vreg83
	%vreg84<def> = COPY %V1; CPURegs:%vreg84
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg85<def> = COPY %SP; CPURegs:%vreg85
	ST %vreg77, %vreg85, 12; mem:ST4[<unknown>] CPURegs:%vreg77,%vreg85
	ST %vreg66, %vreg85, 8; mem:ST4[<unknown>] CPURegs:%vreg66,%vreg85
	%A0<def> = COPY %vreg83; CPURegs:%vreg83
	%A1<def> = COPY %vreg84; CPURegs:%vreg84
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = COPY %V0; CPURegs:%vreg86
	%vreg87<def> = COPY %V1; CPURegs:%vreg87
	ST %vreg87, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg87
	ST %vreg86, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg86
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#14: derived from LLVM BB %if.else36
    Predecessors according to CFG: BB#12
	%vreg69<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg69
	ST %vreg69<kill>, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg69
	ST %vreg66, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg66
    Successors according to CFG: BB#15

BB#15: derived from LLVM BB %if.end39
    Predecessors according to CFG: BB#9 BB#14 BB#13 BB#11
	%vreg155<def> = LDHZ <fi#2>, 0; mem:LD2[%neg](align=4) CPURegs:%vreg155
	%vreg156<def> = EQI %vreg155<kill>, 0; CPURegs:%vreg156,%vreg155
	JC %vreg156<kill>, <BB#17>; CPURegs:%vreg156
	Jmp <BB#16>
    Successors according to CFG: BB#16(20) BB#17(12)

BB#16: derived from LLVM BB %if.then41
    Predecessors according to CFG: BB#15
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %SP; CPURegs:%vreg159
	%vreg160<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg160
	ST %vreg160<kill>, %vreg159, 12; mem:ST4[<unknown>] CPURegs:%vreg160,%vreg159
	%vreg161<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg161
	ST %vreg161<kill>, %vreg159, 8; mem:ST4[<unknown>] CPURegs:%vreg161,%vreg159
	%vreg162<def> = MovGR %ZERO, 0; CPURegs:%vreg162
	%vreg163<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg163
	%A0<def> = COPY %vreg162; CPURegs:%vreg162
	%A1<def> = COPY %vreg163; CPURegs:%vreg163
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg164<def> = COPY %V0; CPURegs:%vreg164
	%vreg165<def> = COPY %V1; CPURegs:%vreg165
	ST %vreg165, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg165
	ST %vreg164, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg164
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#17: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#15
	%vreg157<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg157
	%vreg158<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg158
	ST %vreg158<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg158
	ST %vreg157<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg157
    Successors according to CFG: BB#18

BB#18: derived from LLVM BB %return
    Predecessors according to CFG: BB#5 BB#4 BB#3 BB#1 BB#17 BB#16
	%vreg166<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg166
	%vreg167<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg167
	%V0<def> = COPY %vreg166; CPURegs:%vreg166
	%V1<def> = COPY %vreg167; CPURegs:%vreg167
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function tanh.


#####==========stderr_obj==========#####:
Pass Arguments:  -targetlibinfo -datalayout -jump-instr-table-info -notti -basictti -targetpassconfig -no-aa -tbaa -basicaa -collector-metadata -machinemoduleinfo -machine-branch-prob -jump-instr-tables -verify -verify-di -domtree -loops -loop-simplify -scalar-evolution -iv-users -loop-reduce -gc-lowering -unreachableblockelim -consthoist -codegenprepare -verify-di -stack-protector -verify -domtree -loops -branch-prob -expand-isel-pseudos -tailduplication -opt-phis -machinedomtree -slotindexes -stack-coloring -localstackalloc -dead-mi-elimination -machinedomtree -machine-loops -machinelicm -machine-cse -machine-sink -peephole-opts -machinedomtree -machine-loops -hwloops -processimpdefs -unreachable-mbb-elimination -livevars -machinedomtree -machine-loops -phi-node-elimination -twoaddressinstruction -slotindexes -liveintervals -simple-register-coalescing -machine-block-freq -livedebugvars -livestacks -virtregmap -liveregmatrix -edge-bundles -spill-code-placement -virtregrewriter -stack-slot-coloring -machinelicm -prologepilog -branch-folder -tailduplication -machine-cp -postrapseudos -machinedomtree -machine-loops -post-RA-sched -gc-analysis -machine-block-freq -block-placement2 -machinedomtree -machine-loops -packets -hwloopsfixup -stackmap-liveness
Target Library Information
Data Layout
Jump-Instruction Table Info
No target information
Target independent code generator's TTI
Target Pass Configuration
No Alias Analysis (always returns 'may' alias)
Type-Based Alias Analysis
Basic Alias Analysis (stateless AA impl)
Create Garbage Collector Module Metadata
Machine Module Information
Machine Branch Probability Analysis
  ModulePass Manager
    Jump-Instruction Tables
    FunctionPass Manager
      Module Verifier
    Debug Info Verifier
    FunctionPass Manager
      Dominator Tree Construction
      Natural Loop Information
      Canonicalize natural loops
      Scalar Evolution Analysis
      Loop Pass Manager
        Induction Variable Users
        Loop Strength Reduction
      Lower Garbage Collection Instructions
      Remove unreachable blocks from the CFG
      Constant Hoisting
      CodeGen Prepare
      Exception handling preparation
    Debug Info Verifier
    FunctionPass Manager
      Insert stack protectors
      Module Verifier
      Machine Function Analysis
      Dominator Tree Construction
      Natural Loop Information
      Branch Probability Analysis
      DSP DAG->DAG Pattern Instruction Selection
      Expand ISel Pseudo-instructions
      Tail Duplication
      Optimize machine instruction PHIs
      MachineDominator Tree Construction
      Slot index numbering
      Merge disjoint stack slots
      Local Stack Slot Allocation
      Remove dead machine instructions
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Machine Loop Invariant Code Motion
      Machine Common Subexpression Elimination
      Machine code sinking
      Peephole Optimizations
      DSP handle CC
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Hardware Loops
      Process Implicit Definitions
      Remove unreachable machine basic blocks
      Live Variable Analysis
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Eliminate PHI nodes for register allocation
      Two-Address instruction pass
      Slot index numbering
      Live Interval Analysis
      Simple Register Coalescing
      Machine Block Frequency Analysis
      Debug Variable Analysis
      Live Stack Slot Analysis
      Virtual Register Map
      Live Register Matrix
      Bundle Machine CFG Edges
      Spill Code Placement Analysis
      Greedy Register Allocator
      Virtual Register Rewriter
      Stack Slot Coloring
      Machine Loop Invariant Code Motion
      Prologue/Epilogue Insertion & Frame Finalization
      Control Flow Optimizer
      Tail Duplication
      Machine Copy Propagation Pass
      Post-RA pseudo instruction expansion pass
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      Post RA top-down list latency scheduler
      Analyze Machine Code For Garbage Collection
      Machine Block Frequency Analysis
      Branch Probability Basic Block Placement
      DSP Del Useless jmp
      DSP Delay Slot Filler
      MachineDominator Tree Construction
      Machine Natural Loop Construction
      DSP Packetizer
      DSP VLIWBundlerDrive
      DSP Hardware Loop Fixup
      StackMap Liveness Analysis
      dsp assembly printer
# Machine code for function tanh: SSA
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=2, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg1, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg1
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	%A0<def> = COPY %vreg3; CPURegs:%vreg3
	CALL <ga:@_Dtest>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; CPURegs:%vreg4
	%vreg5<def> = EQI %vreg4, 0; CPURegs:%vreg5,%vreg4
	JC %vreg5<kill>, <BB#5>; CPURegs:%vreg5
	Jmp <BB#19>
    Successors according to CFG: BB#5(16) BB#19(32)

BB#19: derived from LLVM BB %entry
    Predecessors according to CFG: BB#0
	%vreg2<def> = COPY %vreg4; CPURegs:%vreg2,%vreg4
	%vreg6<def> = EQI %vreg2, 1; CPURegs:%vreg6,%vreg2
	JC %vreg6<kill>, <BB#2>; CPURegs:%vreg6
	Jmp <BB#20>
    Successors according to CFG: BB#2(16) BB#20(16)

BB#20: derived from LLVM BB %entry
    Predecessors according to CFG: BB#19
	%vreg7<def> = NEQI %vreg2, 2; CPURegs:%vreg7,%vreg2
	JC %vreg7<kill>, <BB#6>; CPURegs:%vreg7
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#6(16)

BB#1: derived from LLVM BB %sw.bb
    Predecessors according to CFG: BB#20
	%vreg17<def> = MovIGH %ZERO, <ga:@errno>[TF=3]; CPURegs:%vreg17
	%vreg18<def,tied1> = MovIGL %vreg17<tied0>, <ga:@errno>[TF=4]; CPURegs:%vreg18,%vreg17
	%vreg19<def> = MovGR %ZERO, 33; CPURegs:%vreg19
	ST %vreg19<kill>, %vreg18<kill>, 0; mem:ST4[@errno] CPURegs:%vreg19,%vreg18
	%vreg20<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg20
	%vreg21<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg21
	ST %vreg21<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg21
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg20
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#2: derived from LLVM BB %sw.bb1
    Predecessors according to CFG: BB#19
	%vreg9<def> = MovGR %ZERO, 128; CPURegs:%vreg9
	%vreg10<def> = LDBZ <fi#1>, 7; mem:LD1[%arrayidx+1] CPURegs:%vreg10
	%vreg11<def> = AND %vreg10<kill>, %vreg9<kill>; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = EQI %vreg11<kill>, 0; CPURegs:%vreg12,%vreg11
	JC %vreg12<kill>, <BB#4>; CPURegs:%vreg12
	Jmp <BB#3>
    Successors according to CFG: BB#3(20) BB#4(12)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	%vreg15<def> = MovGR %ZERO, -1074790400; CPURegs:%vreg15
	ST %vreg15<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg15
	%vreg16<def> = MovGR %ZERO, 0; CPURegs:%vreg16
	ST %vreg16<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg16
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#4: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#2
	%vreg13<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg13
	ST %vreg13<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg13
	%vreg14<def> = MovGR %ZERO, 0; CPURegs:%vreg14
	ST %vreg14<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg14
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#5: derived from LLVM BB %sw.bb3
    Predecessors according to CFG: BB#0
	%vreg8<def> = MovGR %ZERO, 0; CPURegs:%vreg8
	ST %vreg8, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg8
	ST %vreg8, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg8
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#6: derived from LLVM BB %sw.default
    Predecessors according to CFG: BB#20
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg22<def> = COPY %SP; CPURegs:%vreg22
	%vreg23<def> = MovGR %ZERO, 0; CPURegs:%vreg23
	ST %vreg23, %vreg22, 12; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg22
	ST %vreg23, %vreg22, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg24
	%vreg25<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg25
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg27<def> = COPY %SP; CPURegs:%vreg27
	ST %vreg23, %vreg27, 12; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg27
	ST %vreg23, %vreg27, 8; mem:ST4[<unknown>] CPURegs:%vreg23,%vreg27
	%vreg28<def> = MovGR %ZERO, -1; CPURegs:%vreg28
	%vreg29<def> = GT %vreg26, %vreg28; CPURegs:%vreg29,%vreg26,%vreg28
	%A0<def> = COPY %vreg24; CPURegs:%vreg24
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg30<def> = COPY %V0; CPURegs:%vreg30
	%vreg31<def> = NEQ %vreg30, %vreg23; CPURegs:%vreg31,%vreg30,%vreg23
	%vreg32<def> = ORu %vreg31<kill>, %vreg29<kill>; CPURegs:%vreg32,%vreg31,%vreg29
	JC %vreg32<kill>, <BB#8>; CPURegs:%vreg32
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then5
    Predecessors according to CFG: BB#6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg34<def> = COPY %SP; CPURegs:%vreg34
	%vreg35<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg35
	ST %vreg35<kill>, %vreg34, 12; mem:ST4[<unknown>] CPURegs:%vreg35,%vreg34
	%vreg36<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg36
	ST %vreg36<kill>, %vreg34, 8; mem:ST4[<unknown>] CPURegs:%vreg36,%vreg34
	%vreg37<def> = MovGR %ZERO, 0; CPURegs:%vreg37
	%vreg38<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg38
	%A0<def> = COPY %vreg37; CPURegs:%vreg37
	%A1<def> = COPY %vreg38; CPURegs:%vreg38
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg39<def> = COPY %V0; CPURegs:%vreg39
	%vreg40<def> = COPY %V1; CPURegs:%vreg40
	ST %vreg40, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg40
	ST %vreg39, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg39
	%vreg41<def> = MovGR %ZERO, 1; CPURegs:%vreg41
	STH %vreg41<kill>, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg41
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#8: derived from LLVM BB %if.else6
    Predecessors according to CFG: BB#6
	STH %vreg23, <fi#2>, 0; mem:ST2[%neg](align=4) CPURegs:%vreg23
    Successors according to CFG: BB#9

BB#9: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#8 BB#7
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg42<def> = MovIGH %ZERO, <ga:@_Rteps>[TF=3]; CPURegs:%vreg42
	%vreg43<def,tied1> = MovIGL %vreg42<tied0>, <ga:@_Rteps>[TF=4]; CPURegs:%vreg43,%vreg42
	%vreg44<def> = COPY %SP; CPURegs:%vreg44
	%vreg45<def> = LD %vreg43, 4; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)+4] CPURegs:%vreg45,%vreg43
	ST %vreg45<kill>, %vreg44, 12; mem:ST4[<unknown>] CPURegs:%vreg45,%vreg44
	%vreg46<def> = LD %vreg43, 0; mem:LD4[getelementptr inbounds (%union.anon* @_Rteps, i32 0, i32 0)](align=8) CPURegs:%vreg46,%vreg43
	ST %vreg46<kill>, %vreg44, 8; mem:ST4[<unknown>] CPURegs:%vreg46,%vreg44
	%vreg47<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg47
	%vreg48<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg48
	%A0<def> = COPY %vreg47; CPURegs:%vreg47
	%A1<def> = COPY %vreg48; CPURegs:%vreg48
	CALL <es:__ltdf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg49<def> = COPY %V0; CPURegs:%vreg49
	%vreg51<def> = LT %vreg49, %vreg23; CPURegs:%vreg51,%vreg49,%vreg23
	JC %vreg51<kill>, <BB#15>; CPURegs:%vreg51
	Jmp <BB#10>
    Successors according to CFG: BB#15(16) BB#10(16)

BB#10: derived from LLVM BB %if.else10
    Predecessors according to CFG: BB#9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg52<def> = COPY %SP; CPURegs:%vreg52
	%vreg53<def> = MovGR %ZERO, 1071748074; CPURegs:%vreg53
	ST %vreg53, %vreg52, 12; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg52
	%vreg54<def> = MovGR %ZERO, 2058158859; CPURegs:%vreg54
	ST %vreg54, %vreg52, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg52
	%vreg55<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg55
	%vreg56<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg56
	%A0<def> = COPY %vreg55; CPURegs:%vreg55
	%A1<def> = COPY %vreg56; CPURegs:%vreg56
	CALL <es:__gedf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg57<def> = COPY %V0; CPURegs:%vreg57
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg58<def> = COPY %SP; CPURegs:%vreg58
	ST %vreg53, %vreg58, 12; mem:ST4[<unknown>] CPURegs:%vreg53,%vreg58
	ST %vreg54, %vreg58, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg58
	%vreg60<def> = GT %vreg57, %vreg28; CPURegs:%vreg60,%vreg57,%vreg28
	%A0<def> = COPY %vreg55; CPURegs:%vreg55
	%A1<def> = COPY %vreg56; CPURegs:%vreg56
	CALL <es:__unorddf2>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg61<def> = COPY %V0; CPURegs:%vreg61
	%vreg63<def> = NEQ %vreg61, %vreg23; CPURegs:%vreg63,%vreg61,%vreg23
	%vreg64<def> = ORu %vreg63<kill>, %vreg60<kill>; CPURegs:%vreg64,%vreg63,%vreg60
	JC %vreg64<kill>, <BB#12>; CPURegs:%vreg64
	Jmp <BB#11>
    Successors according to CFG: BB#11(16) BB#12(16)

BB#11: derived from LLVM BB %if.then13
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg88<def> = COPY %SP; CPURegs:%vreg88
	%vreg89<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg89
	ST %vreg89, %vreg88, 12; mem:ST4[<unknown>] CPURegs:%vreg89,%vreg88
	%vreg90<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg90
	ST %vreg90, %vreg88, 8; mem:ST4[<unknown>] CPURegs:%vreg90,%vreg88
	%A0<def> = COPY %vreg90; CPURegs:%vreg90
	%A1<def> = COPY %vreg89; CPURegs:%vreg89
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg91<def> = COPY %V0; CPURegs:%vreg91
	%vreg92<def> = COPY %V1; CPURegs:%vreg92
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg93<def> = COPY %SP; CPURegs:%vreg93
	ST %vreg92, %vreg93, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg93
	ST %vreg91, %vreg93, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg93
	%vreg94<def> = MovIGH %ZERO, <ga:@p>[TF=3]; CPURegs:%vreg94
	%vreg95<def,tied1> = MovIGL %vreg94<tied0>, <ga:@p>[TF=4]; CPURegs:%vreg95,%vreg94
	%vreg96<def> = LD %vreg95, 0; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)](align=8) CPURegs:%vreg96,%vreg95
	%vreg97<def> = LD %vreg95, 4; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 0)+4] CPURegs:%vreg97,%vreg95
	%A0<def> = COPY %vreg96; CPURegs:%vreg96
	%A1<def> = COPY %vreg97; CPURegs:%vreg97
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg98<def> = COPY %V0; CPURegs:%vreg98
	%vreg99<def> = COPY %V1; CPURegs:%vreg99
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg100<def> = COPY %SP; CPURegs:%vreg100
	%vreg101<def> = LD %vreg95, 12; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)+4] CPURegs:%vreg101,%vreg95
	ST %vreg101<kill>, %vreg100, 12; mem:ST4[<unknown>] CPURegs:%vreg101,%vreg100
	%vreg102<def> = LD %vreg95, 8; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 1)](align=8) CPURegs:%vreg102,%vreg95
	ST %vreg102<kill>, %vreg100, 8; mem:ST4[<unknown>] CPURegs:%vreg102,%vreg100
	%A0<def> = COPY %vreg98; CPURegs:%vreg98
	%A1<def> = COPY %vreg99; CPURegs:%vreg99
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg103<def> = COPY %V0; CPURegs:%vreg103
	%vreg104<def> = COPY %V1; CPURegs:%vreg104
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg105<def> = COPY %SP; CPURegs:%vreg105
	ST %vreg92, %vreg105, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg105
	ST %vreg91, %vreg105, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg105
	%A0<def> = COPY %vreg103; CPURegs:%vreg103
	%A1<def> = COPY %vreg104; CPURegs:%vreg104
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg106<def> = COPY %V0; CPURegs:%vreg106
	%vreg107<def> = COPY %V1; CPURegs:%vreg107
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg108<def> = COPY %SP; CPURegs:%vreg108
	%vreg109<def> = LD %vreg95, 20; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)+4] CPURegs:%vreg109,%vreg95
	ST %vreg109<kill>, %vreg108, 12; mem:ST4[<unknown>] CPURegs:%vreg109,%vreg108
	%vreg110<def> = LD %vreg95, 16; mem:LD4[getelementptr inbounds ([3 x double]* @p, i32 0, i32 2)](align=8) CPURegs:%vreg110,%vreg95
	ST %vreg110<kill>, %vreg108, 8; mem:ST4[<unknown>] CPURegs:%vreg110,%vreg108
	%A0<def> = COPY %vreg106; CPURegs:%vreg106
	%A1<def> = COPY %vreg107; CPURegs:%vreg107
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg111<def> = COPY %V0; CPURegs:%vreg111
	%vreg112<def> = COPY %V1; CPURegs:%vreg112
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg113<def> = COPY %SP; CPURegs:%vreg113
	ST %vreg92, %vreg113, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg113
	ST %vreg91, %vreg113, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg113
	%vreg114<def> = MovIGH %ZERO, <ga:@q>[TF=3]; CPURegs:%vreg114
	%vreg115<def,tied1> = MovIGL %vreg114<tied0>, <ga:@q>[TF=4]; CPURegs:%vreg115,%vreg114
	%vreg116<def> = LD %vreg115, 0; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)](align=8) CPURegs:%vreg116,%vreg115
	%vreg117<def> = LD %vreg115, 4; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 0)+4] CPURegs:%vreg117,%vreg115
	%A0<def> = COPY %vreg116; CPURegs:%vreg116
	%A1<def> = COPY %vreg117; CPURegs:%vreg117
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg118<def> = COPY %V0; CPURegs:%vreg118
	%vreg119<def> = COPY %V1; CPURegs:%vreg119
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg120<def> = COPY %SP; CPURegs:%vreg120
	%vreg121<def> = LD %vreg115, 12; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)+4] CPURegs:%vreg121,%vreg115
	ST %vreg121<kill>, %vreg120, 12; mem:ST4[<unknown>] CPURegs:%vreg121,%vreg120
	%vreg122<def> = LD %vreg115, 8; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 1)](align=8) CPURegs:%vreg122,%vreg115
	ST %vreg122<kill>, %vreg120, 8; mem:ST4[<unknown>] CPURegs:%vreg122,%vreg120
	%A0<def> = COPY %vreg118; CPURegs:%vreg118
	%A1<def> = COPY %vreg119; CPURegs:%vreg119
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg123<def> = COPY %V0; CPURegs:%vreg123
	%vreg124<def> = COPY %V1; CPURegs:%vreg124
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg125<def> = COPY %SP; CPURegs:%vreg125
	ST %vreg92, %vreg125, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg125
	ST %vreg91, %vreg125, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg125
	%A0<def> = COPY %vreg123; CPURegs:%vreg123
	%A1<def> = COPY %vreg124; CPURegs:%vreg124
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg126<def> = COPY %V0; CPURegs:%vreg126
	%vreg127<def> = COPY %V1; CPURegs:%vreg127
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg128<def> = COPY %SP; CPURegs:%vreg128
	%vreg129<def> = LD %vreg115, 20; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)+4] CPURegs:%vreg129,%vreg115
	ST %vreg129<kill>, %vreg128, 12; mem:ST4[<unknown>] CPURegs:%vreg129,%vreg128
	%vreg130<def> = LD %vreg115, 16; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 2)](align=8) CPURegs:%vreg130,%vreg115
	ST %vreg130<kill>, %vreg128, 8; mem:ST4[<unknown>] CPURegs:%vreg130,%vreg128
	%A0<def> = COPY %vreg126; CPURegs:%vreg126
	%A1<def> = COPY %vreg127; CPURegs:%vreg127
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg131<def> = COPY %V0; CPURegs:%vreg131
	%vreg132<def> = COPY %V1; CPURegs:%vreg132
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg133<def> = COPY %SP; CPURegs:%vreg133
	ST %vreg92, %vreg133, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg133
	ST %vreg91, %vreg133, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg133
	%A0<def> = COPY %vreg131; CPURegs:%vreg131
	%A1<def> = COPY %vreg132; CPURegs:%vreg132
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg134<def> = COPY %V0; CPURegs:%vreg134
	%vreg135<def> = COPY %V1; CPURegs:%vreg135
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg136<def> = COPY %SP; CPURegs:%vreg136
	%vreg137<def> = LD %vreg115, 28; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)+4] CPURegs:%vreg137,%vreg115
	ST %vreg137<kill>, %vreg136, 12; mem:ST4[<unknown>] CPURegs:%vreg137,%vreg136
	%vreg138<def> = LD %vreg115, 24; mem:LD4[getelementptr inbounds ([4 x double]* @q, i32 0, i32 3)](align=8) CPURegs:%vreg138,%vreg115
	ST %vreg138<kill>, %vreg136, 8; mem:ST4[<unknown>] CPURegs:%vreg138,%vreg136
	%A0<def> = COPY %vreg134; CPURegs:%vreg134
	%A1<def> = COPY %vreg135; CPURegs:%vreg135
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg139<def> = COPY %V0; CPURegs:%vreg139
	%vreg140<def> = COPY %V1; CPURegs:%vreg140
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg141<def> = COPY %SP; CPURegs:%vreg141
	ST %vreg92, %vreg141, 12; mem:ST4[<unknown>] CPURegs:%vreg92,%vreg141
	ST %vreg91, %vreg141, 8; mem:ST4[<unknown>] CPURegs:%vreg91,%vreg141
	ST %vreg92, <fi#3>, 4; mem:ST4[%g+4] CPURegs:%vreg92
	ST %vreg91, <fi#3>, 0; mem:ST4[%g](align=8) CPURegs:%vreg91
	%vreg142<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg142
	%vreg143<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg143
	%A0<def> = COPY %vreg142; CPURegs:%vreg142
	%A1<def> = COPY %vreg143; CPURegs:%vreg143
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg144<def> = COPY %V0; CPURegs:%vreg144
	%vreg145<def> = COPY %V1; CPURegs:%vreg145
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg146<def> = COPY %SP; CPURegs:%vreg146
	ST %vreg112, %vreg146, 12; mem:ST4[<unknown>] CPURegs:%vreg112,%vreg146
	ST %vreg111, %vreg146, 8; mem:ST4[<unknown>] CPURegs:%vreg111,%vreg146
	%A0<def> = COPY %vreg144; CPURegs:%vreg144
	%A1<def> = COPY %vreg145; CPURegs:%vreg145
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg147<def> = COPY %V0; CPURegs:%vreg147
	%vreg148<def> = COPY %V1; CPURegs:%vreg148
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg149<def> = COPY %SP; CPURegs:%vreg149
	ST %vreg140, %vreg149, 12; mem:ST4[<unknown>] CPURegs:%vreg140,%vreg149
	ST %vreg139, %vreg149, 8; mem:ST4[<unknown>] CPURegs:%vreg139,%vreg149
	%A0<def> = COPY %vreg147; CPURegs:%vreg147
	%A1<def> = COPY %vreg148; CPURegs:%vreg148
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg150<def> = COPY %V0; CPURegs:%vreg150
	%vreg151<def> = COPY %V1; CPURegs:%vreg151
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg152<def> = COPY %SP; CPURegs:%vreg152
	ST %vreg151, %vreg152, 12; mem:ST4[<unknown>] CPURegs:%vreg151,%vreg152
	ST %vreg150, %vreg152, 8; mem:ST4[<unknown>] CPURegs:%vreg150,%vreg152
	%A0<def> = COPY %vreg142; CPURegs:%vreg142
	%A1<def> = COPY %vreg143; CPURegs:%vreg143
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg153<def> = COPY %V0; CPURegs:%vreg153
	%vreg154<def> = COPY %V1; CPURegs:%vreg154
	ST %vreg154, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg154
	ST %vreg153, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg153
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#12: derived from LLVM BB %if.else26
    Predecessors according to CFG: BB#10
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg65<def> = LEA <fi#1>, 0; CPURegs:%vreg65
	%vreg66<def> = MovGR %ZERO, 0; CPURegs:%vreg66
	%A0<def> = COPY %vreg65; CPURegs:%vreg65
	%A1<def> = COPY %vreg66; CPURegs:%vreg66
	CALL <ga:@_Exp>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg67<def> = COPY %V0; CPURegs:%vreg67
	%vreg68<def> = LTI %vreg67, 0; CPURegs:%vreg68,%vreg67
	JNC %vreg68<kill>, <BB#14>; CPURegs:%vreg68
	Jmp <BB#13>
    Successors according to CFG: BB#13(12) BB#14(20)

BB#13: derived from LLVM BB %if.then31
    Predecessors according to CFG: BB#12
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg71<def> = COPY %SP; CPURegs:%vreg71
	%vreg72<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg72
	ST %vreg72, %vreg71, 12; mem:ST4[<unknown>] CPURegs:%vreg72,%vreg71
	%vreg73<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg73
	ST %vreg73, %vreg71, 8; mem:ST4[<unknown>] CPURegs:%vreg73,%vreg71
	%A0<def> = COPY %vreg73; CPURegs:%vreg73
	%A1<def> = COPY %vreg72; CPURegs:%vreg72
	CALL <es:__muldf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg74<def> = COPY %V0; CPURegs:%vreg74
	%vreg75<def> = COPY %V1; CPURegs:%vreg75
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg76<def> = COPY %SP; CPURegs:%vreg76
	%vreg77<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg77
	ST %vreg77, %vreg76, 12; mem:ST4[<unknown>] CPURegs:%vreg77,%vreg76
	ST %vreg66, %vreg76, 8; mem:ST4[<unknown>] CPURegs:%vreg66,%vreg76
	%A0<def> = COPY %vreg74; CPURegs:%vreg74
	%A1<def> = COPY %vreg75; CPURegs:%vreg75
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg79<def> = COPY %V0; CPURegs:%vreg79
	%vreg80<def> = COPY %V1; CPURegs:%vreg80
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg81<def> = COPY %SP; CPURegs:%vreg81
	ST %vreg80, %vreg81, 12; mem:ST4[<unknown>] CPURegs:%vreg80,%vreg81
	ST %vreg79, %vreg81, 8; mem:ST4[<unknown>] CPURegs:%vreg79,%vreg81
	%vreg82<def> = MovGR %ZERO, -1073741824; CPURegs:%vreg82
	%A0<def> = COPY %vreg66; CPURegs:%vreg66
	%A1<def> = COPY %vreg82; CPURegs:%vreg82
	CALL <es:__divdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg83<def> = COPY %V0; CPURegs:%vreg83
	%vreg84<def> = COPY %V1; CPURegs:%vreg84
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg85<def> = COPY %SP; CPURegs:%vreg85
	ST %vreg77, %vreg85, 12; mem:ST4[<unknown>] CPURegs:%vreg77,%vreg85
	ST %vreg66, %vreg85, 8; mem:ST4[<unknown>] CPURegs:%vreg66,%vreg85
	%A0<def> = COPY %vreg83; CPURegs:%vreg83
	%A1<def> = COPY %vreg84; CPURegs:%vreg84
	CALL <es:__adddf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg86<def> = COPY %V0; CPURegs:%vreg86
	%vreg87<def> = COPY %V1; CPURegs:%vreg87
	ST %vreg87, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg87
	ST %vreg86, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg86
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#14: derived from LLVM BB %if.else36
    Predecessors according to CFG: BB#12
	%vreg69<def> = MovGR %ZERO, 1072693248; CPURegs:%vreg69
	ST %vreg69<kill>, <fi#1>, 4; mem:ST4[%x.addr+4] CPURegs:%vreg69
	ST %vreg66, <fi#1>, 0; mem:ST4[%x.addr](align=8) CPURegs:%vreg66
    Successors according to CFG: BB#15

BB#15: derived from LLVM BB %if.end39
    Predecessors according to CFG: BB#9 BB#14 BB#13 BB#11
	%vreg155<def> = LDHZ <fi#2>, 0; mem:LD2[%neg](align=4) CPURegs:%vreg155
	%vreg156<def> = EQI %vreg155<kill>, 0; CPURegs:%vreg156,%vreg155
	JC %vreg156<kill>, <BB#17>; CPURegs:%vreg156
	Jmp <BB#16>
    Successors according to CFG: BB#16(20) BB#17(12)

BB#16: derived from LLVM BB %if.then41
    Predecessors according to CFG: BB#15
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg159<def> = COPY %SP; CPURegs:%vreg159
	%vreg160<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg160
	ST %vreg160<kill>, %vreg159, 12; mem:ST4[<unknown>] CPURegs:%vreg160,%vreg159
	%vreg161<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg161
	ST %vreg161<kill>, %vreg159, 8; mem:ST4[<unknown>] CPURegs:%vreg161,%vreg159
	%vreg162<def> = MovGR %ZERO, 0; CPURegs:%vreg162
	%vreg163<def> = MovGR %ZERO, -2147483648; CPURegs:%vreg163
	%A0<def> = COPY %vreg162; CPURegs:%vreg162
	%A1<def> = COPY %vreg163; CPURegs:%vreg163
	CALL <es:__subdf3>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>, %V1<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg164<def> = COPY %V0; CPURegs:%vreg164
	%vreg165<def> = COPY %V1; CPURegs:%vreg165
	ST %vreg165, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg165
	ST %vreg164, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg164
	Jmp <BB#18>
    Successors according to CFG: BB#18

BB#17: derived from LLVM BB %if.else43
    Predecessors according to CFG: BB#15
	%vreg157<def> = LD <fi#1>, 0; mem:LD4[%x.addr](align=8) CPURegs:%vreg157
	%vreg158<def> = LD <fi#1>, 4; mem:LD4[%x.addr+4] CPURegs:%vreg158
	ST %vreg158<kill>, <fi#0>, 4; mem:ST4[%retval+4] CPURegs:%vreg158
	ST %vreg157<kill>, <fi#0>, 0; mem:ST4[%retval](align=8) CPURegs:%vreg157
    Successors according to CFG: BB#18

BB#18: derived from LLVM BB %return
    Predecessors according to CFG: BB#5 BB#4 BB#3 BB#1 BB#17 BB#16
	%vreg166<def> = LD <fi#0>, 0; mem:LD4[%retval](align=8) CPURegs:%vreg166
	%vreg167<def> = LD <fi#0>, 4; mem:LD4[%retval+4] CPURegs:%vreg167
	%V0<def> = COPY %vreg166; CPURegs:%vreg166
	%V1<def> = COPY %vreg167; CPURegs:%vreg167
	RetLR %V0<imp-use>, %V1<imp-use>

# End machine code for function tanh.

