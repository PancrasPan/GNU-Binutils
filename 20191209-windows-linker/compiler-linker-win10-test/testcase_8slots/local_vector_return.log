
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name local_vector_return.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/local_vector_return.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/local_vector_return.ll -x c ./testcase_8slots/local_vector_return.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg2<def> = MovIGH %ZERO, <ga:@vla>[TF=3]; CPURegs:%vreg2
	%vreg3<def,tied1> = MovIGL %vreg2<tied0>, <ga:@vla>[TF=4]; CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovIGH %ZERO, <ga:@vlb>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@vlb>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5, 0; mem:LD256[@vlb](tbaa=<badref>) CPUVecRegs:%vreg6 CPURegs:%vreg5
	%vreg7<def> = VLOAD32 %vreg3, 0; mem:LD256[@vla](tbaa=<badref>) CPUVecRegs:%vreg7 CPURegs:%vreg3
	%vreg8<def> = VADD32 %vreg7<kill>, %vreg6; CPUVecRegs:%vreg8,%vreg7,%vreg6
	VSTORE32 %vreg8, %vreg3, 0; mem:ST256[@vla](tbaa=<badref>) CPUVecRegs:%vreg8 CPURegs:%vreg3
	%vreg9<def> = VADD32 %vreg6, %vreg8; CPUVecRegs:%vreg9,%vreg6,%vreg8
	VSTORE32 %vreg9<kill>, %vreg5, 0; mem:ST256[@vlb](tbaa=<badref>) CPUVecRegs:%vreg9 CPURegs:%vreg5
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg2<def> = MovIGH %ZERO, <ga:@vla>[TF=3]; CPURegs:%vreg2
	%vreg3<def,tied1> = MovIGL %vreg2<tied0>, <ga:@vla>[TF=4]; CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovIGH %ZERO, <ga:@vlb>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@vlb>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5, 0; mem:LD256[@vlb](tbaa=<badref>) CPUVecRegs:%vreg6 CPURegs:%vreg5
	%vreg7<def> = VLOAD32 %vreg3, 0; mem:LD256[@vla](tbaa=<badref>) CPUVecRegs:%vreg7 CPURegs:%vreg3
	%vreg8<def> = VADD32 %vreg7<kill>, %vreg6; CPUVecRegs:%vreg8,%vreg7,%vreg6
	VSTORE32 %vreg8, %vreg3, 0; mem:ST256[@vla](tbaa=<badref>) CPUVecRegs:%vreg8 CPURegs:%vreg3
	%vreg9<def> = VADD32 %vreg6, %vreg8; CPUVecRegs:%vreg9,%vreg6,%vreg8
	VSTORE32 %vreg9<kill>, %vreg5, 0; mem:ST256[@vlb](tbaa=<badref>) CPUVecRegs:%vreg9 CPURegs:%vreg5
	%vreg10<def> = MovGR %ZERO, 0; CPURegs:%vreg10
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.

