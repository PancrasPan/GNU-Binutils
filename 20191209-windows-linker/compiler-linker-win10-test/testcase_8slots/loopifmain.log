
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name loopifmain.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/loopifmain.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/loopifmain.ll -x c ./testcase_8slots/loopifmain.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=20, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg6<def> = MovGR %ZERO, 1; CPURegs:%vreg6
	ST %vreg6, <fi#0>, 4; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg6
	ST %vreg6, <fi#0>, 0; mem:ST4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg6
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg0<def> = LEA <fi#0>, 0; CPURegs:%vreg0
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg5,%vreg2
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = SHL %vreg1, %vreg8<kill>; CPURegs:%vreg9,%vreg1,%vreg8
	%vreg10<def> = LEA <fi#0>, 0; CPURegs:%vreg10
	%vreg11<def> = ADDu %vreg10<kill>, %vreg9<kill>; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LD %vreg11, -4; mem:LD4[%arrayidx2](tbaa=<badref>) CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD %vreg11, -8; mem:LD4[%arrayidx4](tbaa=<badref>) CPURegs:%vreg13,%vreg11
	%vreg14<def> = ADDu %vreg13<kill>, %vreg12<kill>; CPURegs:%vreg14,%vreg13,%vreg12
	ST %vreg14<kill>, %vreg11, 0; mem:ST4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg14,%vreg11
	%vreg7<def> = MovGR %ZERO, 1; CPURegs:%vreg7
	%vreg2<def> = ADDiu %vreg1, 1; CPURegs:%vreg2,%vreg1
	%vreg15<def> = NEQI %vreg2, 5; CPURegs:%vreg15,%vreg2
	JC %vreg15<kill>, <BB#1>; CPURegs:%vreg15
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#1 BB#2
	%vreg3<def> = PHI %vreg7, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg3,%vreg7,%vreg4
	%vreg16<def> = MovGR %ZERO, 2; CPURegs:%vreg16
	%vreg17<def> = SHL %vreg3, %vreg16<kill>; CPURegs:%vreg17,%vreg3,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@ExArray>[TF=3]; CPURegs:%vreg18
	%vreg19<def,tied1> = MovIGL %vreg18<tied0>, <ga:@ExArray>[TF=4]; CPURegs:%vreg19,%vreg18
	%vreg20<def> = ADDu %vreg19<kill>, %vreg17<kill>; CPURegs:%vreg20,%vreg19,%vreg17
	%vreg21<def> = LD %vreg20, -4; mem:LD4[%arrayidx11](tbaa=<badref>) CPURegs:%vreg21,%vreg20
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg23<def> = SHL %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	ST %vreg23<kill>, %vreg20, 0; mem:ST4[%arrayidx12](tbaa=<badref>) CPURegs:%vreg23,%vreg20
	%vreg4<def> = ADDiu %vreg3, 1; CPURegs:%vreg4,%vreg3
	%vreg24<def> = NEQI %vreg4, 5; CPURegs:%vreg24,%vreg4
	JC %vreg24<kill>, <BB#2>; CPURegs:%vreg24
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#2(124)

BB#3: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#2
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg25<def> = MovGR %ZERO, 5; CPURegs:%vreg25
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <ga:@add>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	%vreg27<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg27
	%vreg28<def,tied1> = MovIGL %vreg27<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg28,%vreg27
	ST %vreg26, %vreg28<kill>, 0; mem:ST4[@sum](tbaa=<badref>) CPURegs:%vreg26,%vreg28
	%V0<def> = COPY %vreg26; CPURegs:%vreg26
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=20, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg6<def> = MovGR %ZERO, 1; CPURegs:%vreg6
	ST %vreg6, <fi#0>, 4; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg6
	ST %vreg6, <fi#0>, 0; mem:ST4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg6
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg0<def> = LEA <fi#0>, 0; CPURegs:%vreg0
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg5,%vreg2
	%vreg8<def> = MovGR %ZERO, 2; CPURegs:%vreg8
	%vreg9<def> = SHL %vreg1, %vreg8<kill>; CPURegs:%vreg9,%vreg1,%vreg8
	%vreg10<def> = LEA <fi#0>, 0; CPURegs:%vreg10
	%vreg11<def> = ADDu %vreg10<kill>, %vreg9<kill>; CPURegs:%vreg11,%vreg10,%vreg9
	%vreg12<def> = LD %vreg11, -4; mem:LD4[%arrayidx2](tbaa=<badref>) CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD %vreg11, -8; mem:LD4[%arrayidx4](tbaa=<badref>) CPURegs:%vreg13,%vreg11
	%vreg14<def> = ADDu %vreg13<kill>, %vreg12<kill>; CPURegs:%vreg14,%vreg13,%vreg12
	ST %vreg14<kill>, %vreg11, 0; mem:ST4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg14,%vreg11
	%vreg7<def> = MovGR %ZERO, 1; CPURegs:%vreg7
	%vreg2<def> = ADDiu %vreg1, 1; CPURegs:%vreg2,%vreg1
	%vreg15<def> = NEQI %vreg2, 5; CPURegs:%vreg15,%vreg2
	JC %vreg15<kill>, <BB#1>; CPURegs:%vreg15
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#1 BB#2
	%vreg3<def> = PHI %vreg7, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg3,%vreg7,%vreg4
	%vreg16<def> = MovGR %ZERO, 2; CPURegs:%vreg16
	%vreg17<def> = SHL %vreg3, %vreg16<kill>; CPURegs:%vreg17,%vreg3,%vreg16
	%vreg18<def> = MovIGH %ZERO, <ga:@ExArray>[TF=3]; CPURegs:%vreg18
	%vreg19<def,tied1> = MovIGL %vreg18<tied0>, <ga:@ExArray>[TF=4]; CPURegs:%vreg19,%vreg18
	%vreg20<def> = ADDu %vreg19<kill>, %vreg17<kill>; CPURegs:%vreg20,%vreg19,%vreg17
	%vreg21<def> = LD %vreg20, -4; mem:LD4[%arrayidx11](tbaa=<badref>) CPURegs:%vreg21,%vreg20
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg23<def> = SHL %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	ST %vreg23<kill>, %vreg20, 0; mem:ST4[%arrayidx12](tbaa=<badref>) CPURegs:%vreg23,%vreg20
	%vreg4<def> = ADDiu %vreg3, 1; CPURegs:%vreg4,%vreg3
	%vreg24<def> = NEQI %vreg4, 5; CPURegs:%vreg24,%vreg4
	JC %vreg24<kill>, <BB#2>; CPURegs:%vreg24
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#2(124)

BB#3: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#2
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg25<def> = MovGR %ZERO, 5; CPURegs:%vreg25
	%A0<def> = COPY %vreg0; CPURegs:%vreg0
	%A1<def> = COPY %vreg25; CPURegs:%vreg25
	CALL <ga:@add>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg26<def> = COPY %V0; CPURegs:%vreg26
	%vreg27<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg27
	%vreg28<def,tied1> = MovIGL %vreg27<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg28,%vreg27
	ST %vreg26, %vreg28<kill>, 0; mem:ST4[@sum](tbaa=<badref>) CPURegs:%vreg26,%vreg28
	%V0<def> = COPY %vreg26; CPURegs:%vreg26
	RetLR %V0<imp-use>

# End machine code for function main.

