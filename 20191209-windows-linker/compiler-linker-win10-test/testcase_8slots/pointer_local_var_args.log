
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name pointer_local_var_args.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/pointer_local_var_args.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/pointer_local_var_args.ll -x c ./testcase_8slots/pointer_local_var_args.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 3; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%b](tbaa=<badref>) CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 2; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#1>, 0; mem:ST4[%c](tbaa=<badref>) CPURegs:%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = COPY %SP; CPURegs:%vreg2
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	ST %vreg3, %vreg2, 8; mem:ST4[<unknown>] CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg5<def> = LEA <fi#0>, 0; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@inFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	ST %vreg6, <fi#0>, 0; mem:ST4[%b](tbaa=<badref>) CPURegs:%vreg6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %SP; CPURegs:%vreg7
	ST %vreg3, %vreg7, 8; mem:ST4[<unknown>] CPURegs:%vreg3,%vreg7
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@outFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %V0; CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function inFunct: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg7<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg7
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	%vreg0<def> = LD %vreg4, 0; mem:LD4[%b](tbaa=<badref>) CPURegs:%vreg0,%vreg4
	%vreg5<def> = COPY %vreg3; CPURegs:%vreg5,%vreg3
	%vreg8<def> = LT %vreg0, %vreg3; CPURegs:%vreg8,%vreg0,%vreg3
	JC %vreg8<kill>, <BB#2>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#2(16) BB#1(16)

BB#1: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	%vreg1<def> = LD %vreg7, 0; mem:LD4[%c](tbaa=<badref>) CPURegs:%vreg1,%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg0, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg2,%vreg0,%vreg1
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function inFunct.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 3; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%b](tbaa=<badref>) CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 2; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#1>, 0; mem:ST4[%c](tbaa=<badref>) CPURegs:%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = COPY %SP; CPURegs:%vreg2
	%vreg3<def> = LEA <fi#1>, 0; CPURegs:%vreg3
	ST %vreg3, %vreg2, 8; mem:ST4[<unknown>] CPURegs:%vreg3,%vreg2
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg5<def> = LEA <fi#0>, 0; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@inFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	ST %vreg6, <fi#0>, 0; mem:ST4[%b](tbaa=<badref>) CPURegs:%vreg6
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %SP; CPURegs:%vreg7
	ST %vreg3, %vreg7, 8; mem:ST4[<unknown>] CPURegs:%vreg3,%vreg7
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@outFunct>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = COPY %V0; CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function inFunct: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg3, %A1 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg4<def> = COPY %A1; CPURegs:%vreg4
	%vreg3<def> = COPY %A0; CPURegs:%vreg3
	%vreg7<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg7
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	%vreg0<def> = LD %vreg4, 0; mem:LD4[%b](tbaa=<badref>) CPURegs:%vreg0,%vreg4
	%vreg5<def> = COPY %vreg3; CPURegs:%vreg5,%vreg3
	%vreg8<def> = LT %vreg0, %vreg3; CPURegs:%vreg8,%vreg0,%vreg3
	JC %vreg8<kill>, <BB#2>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#2(16) BB#1(16)

BB#1: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#0
	%vreg1<def> = LD %vreg7, 0; mem:LD4[%c](tbaa=<badref>) CPURegs:%vreg1,%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg0, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg2,%vreg0,%vreg1
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function inFunct.

