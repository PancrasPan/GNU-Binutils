
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name quicksort1.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/quicksort1.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/quicksort1.ll -x c ./testcase_8slots/quicksort1.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function partition_1: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg15, %A1 in %vreg16

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg16<def> = COPY %A1; CPURegs:%vreg16
	%vreg15<def> = COPY %A0; CPURegs:%vreg15
	%vreg17<def> = COPY %vreg15; CPURegs:%vreg17,%vreg15
	%vreg20<def> = MovGR %ZERO, -1; CPURegs:%vreg20
	%vreg18<def> = COPY %vreg16; CPURegs:%vreg18,%vreg16
	%vreg19<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg19
	%vreg21<def> = GT %vreg16, %vreg19; CPURegs:%vreg21,%vreg16,%vreg19
	JC %vreg21<kill>, <BB#10>; CPURegs:%vreg21
	Jmp <BB#1>
    Successors according to CFG: BB#10(16) BB#1(16)

BB#1: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0 BB#9
	%vreg0<def> = PHI %vreg18, <BB#0>, %vreg13, <BB#9>; CPURegs:%vreg0,%vreg18,%vreg13
	%vreg22<def> = GE %vreg0, %vreg19; CPURegs:%vreg22,%vreg0,%vreg19
	%vreg23<def> = MovGR %ZERO, 2; CPURegs:%vreg23
	%vreg24<def> = SHL %vreg0, %vreg23<kill>; CPURegs:%vreg24,%vreg0,%vreg23
	%vreg25<def> = ADDu %vreg17, %vreg24<kill>; CPURegs:%vreg25,%vreg17,%vreg24
	%vreg1<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg1,%vreg25
	JC %vreg22<kill>, <BB#9>; CPURegs:%vreg22
	Jmp <BB#2>
    Successors according to CFG: BB#2(16) BB#9(16)

BB#2: derived from LLVM BB %while.cond2.preheader
    Predecessors according to CFG: BB#1 BB#8
	%vreg2<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#8>; CPURegs:%vreg2,%vreg19,%vreg6
	%vreg3<def> = PHI %vreg0, <BB#1>, %vreg10, <BB#8>; CPURegs:%vreg3,%vreg0,%vreg10
	%vreg26<def> = LT %vreg3, %vreg2; CPURegs:%vreg26,%vreg3,%vreg2
	JC %vreg26<kill>, <BB#4>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#4(16) BB#5(16)

BB#3: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#4
	%vreg32<def> = GE %vreg3, %vreg5; CPURegs:%vreg32,%vreg3,%vreg5
	JC %vreg32<kill>, <BB#5>; CPURegs:%vreg32
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#4: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#2 BB#3
	%vreg4<def> = PHI %vreg2, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg4,%vreg2,%vreg5
	%vreg27<def> = MovGR %ZERO, 2; CPURegs:%vreg27
	%vreg28<def> = SHL %vreg4, %vreg27<kill>; CPURegs:%vreg28,%vreg4,%vreg27
	%vreg29<def> = ADDu %vreg17, %vreg28<kill>; CPURegs:%vreg29,%vreg17,%vreg28
	%vreg30<def> = LD %vreg29<kill>, 0; mem:LD4[%arrayidx4](tbaa=<badref>) CPURegs:%vreg30,%vreg29
	%vreg31<def> = GE %vreg30<kill>, %vreg1; CPURegs:%vreg31,%vreg30,%vreg1
	%vreg5<def> = ADDiu %vreg4, -1; CPURegs:%vreg5,%vreg4
	JC %vreg31<kill>, <BB#3>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#3(124)

BB#5: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#2 BB#4 BB#3
	%vreg6<def> = PHI %vreg2, <BB#2>, %vreg4, <BB#4>, %vreg5, <BB#3>; CPURegs:%vreg6,%vreg2,%vreg4,%vreg5
	%vreg33<def> = MovGR %ZERO, 2; CPURegs:%vreg33
	%vreg34<def> = SHL %vreg3, %vreg33; CPURegs:%vreg34,%vreg3,%vreg33
	%vreg35<def> = ADDu %vreg17, %vreg34<kill>; CPURegs:%vreg35,%vreg17,%vreg34
	%vreg36<def> = SHL %vreg6, %vreg33; CPURegs:%vreg36,%vreg6,%vreg33
	%vreg7<def> = ADDu %vreg17, %vreg36<kill>; CPURegs:%vreg7,%vreg17,%vreg36
	%vreg37<def> = LD %vreg7, 0; mem:LD4[%arrayidx7](tbaa=<badref>) CPURegs:%vreg37,%vreg7
	ST %vreg37<kill>, %vreg35<kill>, 0; mem:ST4[%arrayidx8](tbaa=<badref>) CPURegs:%vreg37,%vreg35
	%vreg38<def> = LT %vreg3, %vreg6; CPURegs:%vreg38,%vreg3,%vreg6
	JC %vreg38<kill>, <BB#7>; CPURegs:%vreg38
	Jmp <BB#8>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#6: derived from LLVM BB %while.cond9
    Predecessors according to CFG: BB#7
	%vreg44<def> = GE %vreg9, %vreg6; CPURegs:%vreg44,%vreg9,%vreg6
	JC %vreg44<kill>, <BB#8>; CPURegs:%vreg44
	Jmp <BB#7>
    Successors according to CFG: BB#7(124) BB#8(4)

BB#7: derived from LLVM BB %land.rhs11
    Predecessors according to CFG: BB#5 BB#6
	%vreg8<def> = PHI %vreg3, <BB#5>, %vreg9, <BB#6>; CPURegs:%vreg8,%vreg3,%vreg9
	%vreg39<def> = MovGR %ZERO, 2; CPURegs:%vreg39
	%vreg40<def> = SHL %vreg8, %vreg39<kill>; CPURegs:%vreg40,%vreg8,%vreg39
	%vreg41<def> = ADDu %vreg17, %vreg40<kill>; CPURegs:%vreg41,%vreg17,%vreg40
	%vreg42<def> = LD %vreg41<kill>, 0; mem:LD4[%arrayidx12](tbaa=<badref>) CPURegs:%vreg42,%vreg41
	%vreg43<def> = LE %vreg42<kill>, %vreg1; CPURegs:%vreg43,%vreg42,%vreg1
	%vreg9<def> = ADDiu %vreg8, 1; CPURegs:%vreg9,%vreg8
	JC %vreg43<kill>, <BB#6>; CPURegs:%vreg43
	Jmp <BB#8>
    Successors according to CFG: BB#8(4) BB#6(124)

BB#8: derived from LLVM BB %while.end16
    Predecessors according to CFG: BB#5 BB#7 BB#6
	%vreg10<def> = PHI %vreg3, <BB#5>, %vreg8, <BB#7>, %vreg9, <BB#6>; CPURegs:%vreg10,%vreg3,%vreg8,%vreg9
	%vreg45<def> = MovGR %ZERO, 2; CPURegs:%vreg45
	%vreg46<def> = SHL %vreg10, %vreg45<kill>; CPURegs:%vreg46,%vreg10,%vreg45
	%vreg47<def> = ADDu %vreg17, %vreg46<kill>; CPURegs:%vreg47,%vreg17,%vreg46
	%vreg48<def> = LD %vreg47<kill>, 0; mem:LD4[%arrayidx17](tbaa=<badref>) CPURegs:%vreg48,%vreg47
	ST %vreg48<kill>, %vreg7, 0; mem:ST4[%arrayidx7](tbaa=<badref>) CPURegs:%vreg48,%vreg7
	%vreg49<def> = LT %vreg10, %vreg6; CPURegs:%vreg49,%vreg10,%vreg6
	JC %vreg49<kill>, <BB#2>; CPURegs:%vreg49
	Jmp <BB#9>
    Successors according to CFG: BB#2(124) BB#9(4)

BB#9: derived from LLVM BB %while.end19
    Predecessors according to CFG: BB#1 BB#8
	%vreg11<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#8>; CPURegs:%vreg11,%vreg19,%vreg6
	%vreg12<def> = PHI %vreg0, <BB#1>, %vreg10, <BB#8>; CPURegs:%vreg12,%vreg0,%vreg10
	%vreg51<def> = MovGR %ZERO, 2; CPURegs:%vreg51
	%vreg52<def> = SHL %vreg11, %vreg51<kill>; CPURegs:%vreg52,%vreg11,%vreg51
	%vreg53<def> = ADDu %vreg17, %vreg52<kill>; CPURegs:%vreg53,%vreg17,%vreg52
	ST %vreg1, %vreg53<kill>, 0; mem:ST4[%arrayidx20](tbaa=<badref>) CPURegs:%vreg1,%vreg53
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg54<def> = ADDiu %vreg12, -1; CPURegs:%vreg54,%vreg12
	%vreg55<def> = COPY %SP; CPURegs:%vreg55
	ST %vreg54<kill>, %vreg55, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg55
	%A0<def> = COPY %vreg17; CPURegs:%vreg17
	%A1<def> = COPY %vreg0; CPURegs:%vreg0
	CALL <ga:@partition_1>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %V0; CPURegs:%vreg56
	%vreg50<def> = MovGR %ZERO, 0; CPURegs:%vreg50
	%vreg57<def> = LT %vreg11, %vreg19; CPURegs:%vreg57,%vreg11,%vreg19
	%vreg13<def> = ADDiu %vreg11, 1; CPURegs:%vreg13,%vreg11
	JC %vreg57<kill>, <BB#1>; CPURegs:%vreg57
	Jmp <BB#10>
    Successors according to CFG: BB#1(124) BB#10(4)

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#9
	%vreg14<def> = PHI %vreg20, <BB#0>, %vreg50, <BB#9>; CPURegs:%vreg14,%vreg20,%vreg50
	%V0<def> = COPY %vreg14; CPURegs:%vreg14
	RetLR %V0<imp-use>

# End machine code for function partition_1.


#####==========stderr_obj==========#####:
# Machine code for function partition_1: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg15, %A1 in %vreg16

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg16<def> = COPY %A1; CPURegs:%vreg16
	%vreg15<def> = COPY %A0; CPURegs:%vreg15
	%vreg17<def> = COPY %vreg15; CPURegs:%vreg17,%vreg15
	%vreg20<def> = MovGR %ZERO, -1; CPURegs:%vreg20
	%vreg18<def> = COPY %vreg16; CPURegs:%vreg18,%vreg16
	%vreg19<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg19
	%vreg21<def> = GT %vreg16, %vreg19; CPURegs:%vreg21,%vreg16,%vreg19
	JC %vreg21<kill>, <BB#10>; CPURegs:%vreg21
	Jmp <BB#1>
    Successors according to CFG: BB#10(16) BB#1(16)

BB#1: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0 BB#9
	%vreg0<def> = PHI %vreg18, <BB#0>, %vreg13, <BB#9>; CPURegs:%vreg0,%vreg18,%vreg13
	%vreg22<def> = GE %vreg0, %vreg19; CPURegs:%vreg22,%vreg0,%vreg19
	%vreg23<def> = MovGR %ZERO, 2; CPURegs:%vreg23
	%vreg24<def> = SHL %vreg0, %vreg23<kill>; CPURegs:%vreg24,%vreg0,%vreg23
	%vreg25<def> = ADDu %vreg17, %vreg24<kill>; CPURegs:%vreg25,%vreg17,%vreg24
	%vreg1<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg1,%vreg25
	JC %vreg22<kill>, <BB#9>; CPURegs:%vreg22
	Jmp <BB#2>
    Successors according to CFG: BB#2(16) BB#9(16)

BB#2: derived from LLVM BB %while.cond2.preheader
    Predecessors according to CFG: BB#1 BB#8
	%vreg2<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#8>; CPURegs:%vreg2,%vreg19,%vreg6
	%vreg3<def> = PHI %vreg0, <BB#1>, %vreg10, <BB#8>; CPURegs:%vreg3,%vreg0,%vreg10
	%vreg26<def> = LT %vreg3, %vreg2; CPURegs:%vreg26,%vreg3,%vreg2
	JC %vreg26<kill>, <BB#4>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#4(16) BB#5(16)

BB#3: derived from LLVM BB %while.cond2
    Predecessors according to CFG: BB#4
	%vreg32<def> = GE %vreg3, %vreg5; CPURegs:%vreg32,%vreg3,%vreg5
	JC %vreg32<kill>, <BB#5>; CPURegs:%vreg32
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#5(4)

BB#4: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#2 BB#3
	%vreg4<def> = PHI %vreg2, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg4,%vreg2,%vreg5
	%vreg27<def> = MovGR %ZERO, 2; CPURegs:%vreg27
	%vreg28<def> = SHL %vreg4, %vreg27<kill>; CPURegs:%vreg28,%vreg4,%vreg27
	%vreg29<def> = ADDu %vreg17, %vreg28<kill>; CPURegs:%vreg29,%vreg17,%vreg28
	%vreg30<def> = LD %vreg29<kill>, 0; mem:LD4[%arrayidx4](tbaa=<badref>) CPURegs:%vreg30,%vreg29
	%vreg31<def> = GE %vreg30<kill>, %vreg1; CPURegs:%vreg31,%vreg30,%vreg1
	%vreg5<def> = ADDiu %vreg4, -1; CPURegs:%vreg5,%vreg4
	JC %vreg31<kill>, <BB#3>; CPURegs:%vreg31
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#3(124)

BB#5: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#2 BB#4 BB#3
	%vreg6<def> = PHI %vreg2, <BB#2>, %vreg4, <BB#4>, %vreg5, <BB#3>; CPURegs:%vreg6,%vreg2,%vreg4,%vreg5
	%vreg33<def> = MovGR %ZERO, 2; CPURegs:%vreg33
	%vreg34<def> = SHL %vreg3, %vreg33; CPURegs:%vreg34,%vreg3,%vreg33
	%vreg35<def> = ADDu %vreg17, %vreg34<kill>; CPURegs:%vreg35,%vreg17,%vreg34
	%vreg36<def> = SHL %vreg6, %vreg33; CPURegs:%vreg36,%vreg6,%vreg33
	%vreg7<def> = ADDu %vreg17, %vreg36<kill>; CPURegs:%vreg7,%vreg17,%vreg36
	%vreg37<def> = LD %vreg7, 0; mem:LD4[%arrayidx7](tbaa=<badref>) CPURegs:%vreg37,%vreg7
	ST %vreg37<kill>, %vreg35<kill>, 0; mem:ST4[%arrayidx8](tbaa=<badref>) CPURegs:%vreg37,%vreg35
	%vreg38<def> = LT %vreg3, %vreg6; CPURegs:%vreg38,%vreg3,%vreg6
	JC %vreg38<kill>, <BB#7>; CPURegs:%vreg38
	Jmp <BB#8>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#6: derived from LLVM BB %while.cond9
    Predecessors according to CFG: BB#7
	%vreg44<def> = GE %vreg9, %vreg6; CPURegs:%vreg44,%vreg9,%vreg6
	JC %vreg44<kill>, <BB#8>; CPURegs:%vreg44
	Jmp <BB#7>
    Successors according to CFG: BB#7(124) BB#8(4)

BB#7: derived from LLVM BB %land.rhs11
    Predecessors according to CFG: BB#5 BB#6
	%vreg8<def> = PHI %vreg3, <BB#5>, %vreg9, <BB#6>; CPURegs:%vreg8,%vreg3,%vreg9
	%vreg39<def> = MovGR %ZERO, 2; CPURegs:%vreg39
	%vreg40<def> = SHL %vreg8, %vreg39<kill>; CPURegs:%vreg40,%vreg8,%vreg39
	%vreg41<def> = ADDu %vreg17, %vreg40<kill>; CPURegs:%vreg41,%vreg17,%vreg40
	%vreg42<def> = LD %vreg41<kill>, 0; mem:LD4[%arrayidx12](tbaa=<badref>) CPURegs:%vreg42,%vreg41
	%vreg43<def> = LE %vreg42<kill>, %vreg1; CPURegs:%vreg43,%vreg42,%vreg1
	%vreg9<def> = ADDiu %vreg8, 1; CPURegs:%vreg9,%vreg8
	JC %vreg43<kill>, <BB#6>; CPURegs:%vreg43
	Jmp <BB#8>
    Successors according to CFG: BB#8(4) BB#6(124)

BB#8: derived from LLVM BB %while.end16
    Predecessors according to CFG: BB#5 BB#7 BB#6
	%vreg10<def> = PHI %vreg3, <BB#5>, %vreg8, <BB#7>, %vreg9, <BB#6>; CPURegs:%vreg10,%vreg3,%vreg8,%vreg9
	%vreg45<def> = MovGR %ZERO, 2; CPURegs:%vreg45
	%vreg46<def> = SHL %vreg10, %vreg45<kill>; CPURegs:%vreg46,%vreg10,%vreg45
	%vreg47<def> = ADDu %vreg17, %vreg46<kill>; CPURegs:%vreg47,%vreg17,%vreg46
	%vreg48<def> = LD %vreg47<kill>, 0; mem:LD4[%arrayidx17](tbaa=<badref>) CPURegs:%vreg48,%vreg47
	ST %vreg48<kill>, %vreg7, 0; mem:ST4[%arrayidx7](tbaa=<badref>) CPURegs:%vreg48,%vreg7
	%vreg49<def> = LT %vreg10, %vreg6; CPURegs:%vreg49,%vreg10,%vreg6
	JC %vreg49<kill>, <BB#2>; CPURegs:%vreg49
	Jmp <BB#9>
    Successors according to CFG: BB#2(124) BB#9(4)

BB#9: derived from LLVM BB %while.end19
    Predecessors according to CFG: BB#1 BB#8
	%vreg11<def> = PHI %vreg19, <BB#1>, %vreg6, <BB#8>; CPURegs:%vreg11,%vreg19,%vreg6
	%vreg12<def> = PHI %vreg0, <BB#1>, %vreg10, <BB#8>; CPURegs:%vreg12,%vreg0,%vreg10
	%vreg51<def> = MovGR %ZERO, 2; CPURegs:%vreg51
	%vreg52<def> = SHL %vreg11, %vreg51<kill>; CPURegs:%vreg52,%vreg11,%vreg51
	%vreg53<def> = ADDu %vreg17, %vreg52<kill>; CPURegs:%vreg53,%vreg17,%vreg52
	ST %vreg1, %vreg53<kill>, 0; mem:ST4[%arrayidx20](tbaa=<badref>) CPURegs:%vreg1,%vreg53
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg54<def> = ADDiu %vreg12, -1; CPURegs:%vreg54,%vreg12
	%vreg55<def> = COPY %SP; CPURegs:%vreg55
	ST %vreg54<kill>, %vreg55, 8; mem:ST4[<unknown>] CPURegs:%vreg54,%vreg55
	%A0<def> = COPY %vreg17; CPURegs:%vreg17
	%A1<def> = COPY %vreg0; CPURegs:%vreg0
	CALL <ga:@partition_1>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg56<def> = COPY %V0; CPURegs:%vreg56
	%vreg50<def> = MovGR %ZERO, 0; CPURegs:%vreg50
	%vreg57<def> = LT %vreg11, %vreg19; CPURegs:%vreg57,%vreg11,%vreg19
	%vreg13<def> = ADDiu %vreg11, 1; CPURegs:%vreg13,%vreg11
	JC %vreg57<kill>, <BB#1>; CPURegs:%vreg57
	Jmp <BB#10>
    Successors according to CFG: BB#1(124) BB#10(4)

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#9
	%vreg14<def> = PHI %vreg20, <BB#0>, %vreg50, <BB#9>; CPURegs:%vreg14,%vreg20,%vreg50
	%V0<def> = COPY %vreg14; CPURegs:%vreg14
	RetLR %V0<imp-use>

# End machine code for function partition_1.

