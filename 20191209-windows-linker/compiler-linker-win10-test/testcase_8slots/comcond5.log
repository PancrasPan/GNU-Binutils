
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name comcond5.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/comcond5.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/comcond5.ll -x c ./testcase_8slots/comcond5.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function part: SSA
Function Live Ins: %A0 in %vreg4, %A1 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg5<def> = COPY %A1; CPURegs:%vreg5
	%vreg4<def> = COPY %A0; CPURegs:%vreg4
	%vreg7<def> = COPY %vreg5; CPURegs:%vreg7,%vreg5
	%vreg8<def> = LE %vreg5, %vreg4; CPURegs:%vreg8,%vreg5,%vreg4
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	JC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %land.rhs.lr.ph
    Predecessors according to CFG: BB#0
	%vreg9<def> = MovGR %ZERO, 2; CPURegs:%vreg9
	%vreg10<def> = SHL %vreg6, %vreg9<kill>; CPURegs:%vreg10,%vreg6,%vreg9
	%vreg11<def> = MovIGH %ZERO, <ga:@array>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@array>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = ADDu %vreg12<kill>, %vreg10<kill>; CPURegs:%vreg13,%vreg12,%vreg10
	%vreg0<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg0,%vreg13
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#3
	%vreg21<def> = LE %vreg2, %vreg6; CPURegs:%vreg21,%vreg2,%vreg6
	JC %vreg21<kill>, <BB#4>; CPURegs:%vreg21
	Jmp <BB#3>
    Successors according to CFG: BB#3(124) BB#4(4)

BB#3: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg7, <BB#1>, %vreg2, <BB#2>; CPURegs:%vreg1,%vreg7,%vreg2
	%vreg14<def> = MovGR %ZERO, 2; CPURegs:%vreg14
	%vreg15<def> = SHL %vreg1, %vreg14<kill>; CPURegs:%vreg15,%vreg1,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@array>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@array>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg19,%vreg18
	%vreg20<def> = GT %vreg19<kill>, %vreg0; CPURegs:%vreg20,%vreg19,%vreg0
	%vreg2<def> = ADDiu %vreg1, -1; CPURegs:%vreg2,%vreg1
	JC %vreg20<kill>, <BB#2>; CPURegs:%vreg20
	Jmp <BB#4>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#4: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#3 BB#2
	%vreg3<def> = PHI %vreg7, <BB#0>, %vreg1, <BB#3>, %vreg2, <BB#2>; CPURegs:%vreg3,%vreg7,%vreg1,%vreg2
	%vreg22<def> = SUBu %vreg3, %vreg6; CPURegs:%vreg22,%vreg3,%vreg6
	%V0<def> = COPY %vreg22; CPURegs:%vreg22
	RetLR %V0<imp-use>

# End machine code for function part.


#####==========stderr_obj==========#####:
# Machine code for function part: SSA
Function Live Ins: %A0 in %vreg4, %A1 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg5<def> = COPY %A1; CPURegs:%vreg5
	%vreg4<def> = COPY %A0; CPURegs:%vreg4
	%vreg7<def> = COPY %vreg5; CPURegs:%vreg7,%vreg5
	%vreg8<def> = LE %vreg5, %vreg4; CPURegs:%vreg8,%vreg5,%vreg4
	%vreg6<def> = COPY %vreg4; CPURegs:%vreg6,%vreg4
	JC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %land.rhs.lr.ph
    Predecessors according to CFG: BB#0
	%vreg9<def> = MovGR %ZERO, 2; CPURegs:%vreg9
	%vreg10<def> = SHL %vreg6, %vreg9<kill>; CPURegs:%vreg10,%vreg6,%vreg9
	%vreg11<def> = MovIGH %ZERO, <ga:@array>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@array>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = ADDu %vreg12<kill>, %vreg10<kill>; CPURegs:%vreg13,%vreg12,%vreg10
	%vreg0<def> = LD %vreg13<kill>, 0; mem:LD4[%arrayidx1](tbaa=<badref>) CPURegs:%vreg0,%vreg13
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#3
	%vreg21<def> = LE %vreg2, %vreg6; CPURegs:%vreg21,%vreg2,%vreg6
	JC %vreg21<kill>, <BB#4>; CPURegs:%vreg21
	Jmp <BB#3>
    Successors according to CFG: BB#3(124) BB#4(4)

BB#3: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#1 BB#2
	%vreg1<def> = PHI %vreg7, <BB#1>, %vreg2, <BB#2>; CPURegs:%vreg1,%vreg7,%vreg2
	%vreg14<def> = MovGR %ZERO, 2; CPURegs:%vreg14
	%vreg15<def> = SHL %vreg1, %vreg14<kill>; CPURegs:%vreg15,%vreg1,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@array>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@array>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg19,%vreg18
	%vreg20<def> = GT %vreg19<kill>, %vreg0; CPURegs:%vreg20,%vreg19,%vreg0
	%vreg2<def> = ADDiu %vreg1, -1; CPURegs:%vreg2,%vreg1
	JC %vreg20<kill>, <BB#2>; CPURegs:%vreg20
	Jmp <BB#4>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#4: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#3 BB#2
	%vreg3<def> = PHI %vreg7, <BB#0>, %vreg1, <BB#3>, %vreg2, <BB#2>; CPURegs:%vreg3,%vreg7,%vreg1,%vreg2
	%vreg22<def> = SUBu %vreg3, %vreg6; CPURegs:%vreg22,%vreg3,%vreg6
	%V0<def> = COPY %vreg22; CPURegs:%vreg22
	RetLR %V0<imp-use>

# End machine code for function part.

