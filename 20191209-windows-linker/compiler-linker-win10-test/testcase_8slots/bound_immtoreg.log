
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name bound_immtoreg.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/bound_immtoreg.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/bound_immtoreg.ll -x c ./testcase_8slots/bound_immtoreg.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function add: SSA

BB#0: derived from LLVM BB %entry
	%vreg6<def> = MovIGH %ZERO, <ga:@lowerbound>[TF=3]; CPURegs:%vreg6
	%vreg7<def,tied1> = MovIGL %vreg6<tied0>, <ga:@lowerbound>[TF=4]; CPURegs:%vreg7,%vreg6
	%vreg0<def> = LD %vreg7<kill>, 0; mem:LD4[@lowerbound](tbaa=<badref>) CPURegs:%vreg0,%vreg7
	%vreg8<def> = LTI %vreg0, 256; CPURegs:%vreg8,%vreg0
	JNC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %for.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg9<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg10,%vreg9
	%vreg1<def> = LD %vreg10<kill>, 0; mem:LD4[@sum](tbaa=<badref>) CPURegs:%vreg1,%vreg10
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg1, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg2,%vreg1,%vreg4
	%vreg3<def> = PHI %vreg0, <BB#1>, %vreg5, <BB#2>; CPURegs:%vreg3,%vreg0,%vreg5
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = SHL %vreg3, %vreg11<kill>; CPURegs:%vreg12,%vreg3,%vreg11
	%vreg13<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = ADDu %vreg14<kill>, %vreg12<kill>; CPURegs:%vreg15,%vreg14,%vreg12
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg4<def> = ADDu %vreg2, %vreg16<kill>; CPURegs:%vreg4,%vreg2,%vreg16
	%vreg5<def> = ADDiu %vreg3, 2; CPURegs:%vreg5,%vreg3
	%vreg17<def> = MovGR %ZERO, 256; CPURegs:%vreg17
	%vreg18<def> = LT %vreg5, %vreg17<kill>; CPURegs:%vreg18,%vreg5,%vreg17
	JC %vreg18<kill>, <BB#2>; CPURegs:%vreg18
	Jmp <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.cond.for.end_crit_edge
    Predecessors according to CFG: BB#2
	%vreg19<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg19
	%vreg20<def,tied1> = MovIGL %vreg19<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg20,%vreg19
	ST %vreg4, %vreg20<kill>, 0; mem:ST4[@sum](tbaa=<badref>) CPURegs:%vreg4,%vreg20
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#3
	%vreg21<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg22,%vreg21
	%vreg23<def> = LD %vreg22<kill>, 0; mem:LD4[@sum](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%V0<def> = COPY %vreg23; CPURegs:%vreg23
	RetLR %V0<imp-use>

# End machine code for function add.


#####==========stderr_obj==========#####:
# Machine code for function add: SSA

BB#0: derived from LLVM BB %entry
	%vreg6<def> = MovIGH %ZERO, <ga:@lowerbound>[TF=3]; CPURegs:%vreg6
	%vreg7<def,tied1> = MovIGL %vreg6<tied0>, <ga:@lowerbound>[TF=4]; CPURegs:%vreg7,%vreg6
	%vreg0<def> = LD %vreg7<kill>, 0; mem:LD4[@lowerbound](tbaa=<badref>) CPURegs:%vreg0,%vreg7
	%vreg8<def> = LTI %vreg0, 256; CPURegs:%vreg8,%vreg0
	JNC %vreg8<kill>, <BB#4>; CPURegs:%vreg8
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#4(16)

BB#1: derived from LLVM BB %for.body.lr.ph
    Predecessors according to CFG: BB#0
	%vreg9<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg9
	%vreg10<def,tied1> = MovIGL %vreg9<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg10,%vreg9
	%vreg1<def> = LD %vreg10<kill>, 0; mem:LD4[@sum](tbaa=<badref>) CPURegs:%vreg1,%vreg10
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg1, <BB#1>, %vreg4, <BB#2>; CPURegs:%vreg2,%vreg1,%vreg4
	%vreg3<def> = PHI %vreg0, <BB#1>, %vreg5, <BB#2>; CPURegs:%vreg3,%vreg0,%vreg5
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = SHL %vreg3, %vreg11<kill>; CPURegs:%vreg12,%vreg3,%vreg11
	%vreg13<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg13
	%vreg14<def,tied1> = MovIGL %vreg13<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg14,%vreg13
	%vreg15<def> = ADDu %vreg14<kill>, %vreg12<kill>; CPURegs:%vreg15,%vreg14,%vreg12
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg16,%vreg15
	%vreg4<def> = ADDu %vreg2, %vreg16<kill>; CPURegs:%vreg4,%vreg2,%vreg16
	%vreg5<def> = ADDiu %vreg3, 2; CPURegs:%vreg5,%vreg3
	%vreg17<def> = MovGR %ZERO, 256; CPURegs:%vreg17
	%vreg18<def> = LT %vreg5, %vreg17<kill>; CPURegs:%vreg18,%vreg5,%vreg17
	JC %vreg18<kill>, <BB#2>; CPURegs:%vreg18
	Jmp <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.cond.for.end_crit_edge
    Predecessors according to CFG: BB#2
	%vreg19<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg19
	%vreg20<def,tied1> = MovIGL %vreg19<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg20,%vreg19
	ST %vreg4, %vreg20<kill>, 0; mem:ST4[@sum](tbaa=<badref>) CPURegs:%vreg4,%vreg20
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#3
	%vreg21<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg21
	%vreg22<def,tied1> = MovIGL %vreg21<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg22,%vreg21
	%vreg23<def> = LD %vreg22<kill>, 0; mem:LD4[@sum](tbaa=<badref>) CPURegs:%vreg23,%vreg22
	%V0<def> = COPY %vreg23; CPURegs:%vreg23
	RetLR %V0<imp-use>

# End machine code for function add.

