
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name parallelandnestedloop.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/1/parallelandnestedloop.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/1/parallelandnestedloop.ll -x c ./testcase_8slots/1/parallelandnestedloop.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%p_array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%p_size.addr] CPURegs:%vreg1
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg5<def> = SRA %vreg1, %vreg4<kill>; CPURegs:%vreg5,%vreg1,%vreg4
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg5
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	ST %vreg6<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg6
	%vreg3<def> = COPY %vreg1; CPURegs:%vreg3,%vreg1
	%vreg2<def> = COPY %vreg0; CPURegs:%vreg2,%vreg0
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#10
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg7
	%vreg8<def> = LTI %vreg7<kill>, 255; CPURegs:%vreg8,%vreg7
	JNC %vreg8<kill>, <BB#11>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#11(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg20<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg20
	ST %vreg20<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg20
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond1
    Predecessors according to CFG: BB#2 BB#5
	%vreg21<def> = MovGR %ZERO, 0; CPURegs:%vreg21
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg22
	%vreg23<def> = LT %vreg22<kill>, %vreg21<kill>; CPURegs:%vreg23,%vreg22,%vreg21
	JC %vreg23<kill>, <BB#6>; CPURegs:%vreg23
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#6(4)

BB#4: derived from LLVM BB %for.body3
    Predecessors according to CFG: BB#3
	%vreg40<def> = MovGR %ZERO, 2; CPURegs:%vreg40
	%vreg41<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg41
	%vreg42<def> = SHL %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LD <fi#0>, 0; mem:LD4[%p_array.addr] CPURegs:%vreg43
	%vreg44<def> = ADDu %vreg43<kill>, %vreg42<kill>; CPURegs:%vreg44,%vreg43,%vreg42
	%vreg45<def> = LD %vreg44<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg45,%vreg44
	%vreg46<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg46
	%vreg47<def,tied1> = MovIGL %vreg46<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg47,%vreg46
	%vreg48<def> = LD %vreg47, 0; mem:LD4[@sum] CPURegs:%vreg48,%vreg47
	%vreg49<def> = ADDu %vreg48<kill>, %vreg45<kill>; CPURegs:%vreg49,%vreg48,%vreg45
	ST %vreg49<kill>, %vreg47, 0; mem:ST4[@sum] CPURegs:%vreg49,%vreg47
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#4
	%vreg50<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg50
	%vreg51<def> = ADDiu %vreg50<kill>, -2; CPURegs:%vreg51,%vreg50
	ST %vreg51<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg51
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#6: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#3
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#6 BB#8
	%vreg24<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg24
	%vreg25<def> = LTI %vreg24<kill>, 255; CPURegs:%vreg25,%vreg24
	JNC %vreg25<kill>, <BB#9>; CPURegs:%vreg25
	Jmp <BB#8>
    Successors according to CFG: BB#8(124) BB#9(4)

BB#8: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#7
	%vreg28<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg28
	%vreg29<def> = ADDiu %vreg28, 1; CPURegs:%vreg29,%vreg28
	ST %vreg29<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg29
	%vreg30<def> = MovGR %ZERO, 2; CPURegs:%vreg30
	%vreg31<def> = SHL %vreg28, %vreg30<kill>; CPURegs:%vreg31,%vreg28,%vreg30
	%vreg32<def> = MovIGH %ZERO, <ga:@ex_array>[TF=3]; CPURegs:%vreg32
	%vreg33<def,tied1> = MovIGL %vreg32<tied0>, <ga:@ex_array>[TF=4]; CPURegs:%vreg33,%vreg32
	%vreg34<def> = ADDu %vreg33<kill>, %vreg31<kill>; CPURegs:%vreg34,%vreg33,%vreg31
	%vreg35<def> = LD %vreg34<kill>, 0; mem:LD4[%arrayidx5] CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg36
	%vreg37<def,tied1> = MovIGL %vreg36<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg37,%vreg36
	%vreg38<def> = LD %vreg37, 0; mem:LD4[@sum] CPURegs:%vreg38,%vreg37
	%vreg39<def> = SUBu %vreg38<kill>, %vreg35<kill>; CPURegs:%vreg39,%vreg38,%vreg35
	ST %vreg39<kill>, %vreg37, 0; mem:ST4[@sum] CPURegs:%vreg39,%vreg37
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#7
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %for.inc7
    Predecessors according to CFG: BB#9
	%vreg26<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg26
	%vreg27<def> = ADDiu %vreg26<kill>, 1; CPURegs:%vreg27,%vreg26
	ST %vreg27<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg27
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#11: derived from LLVM BB %for.end9
    Predecessors according to CFG: BB#1
	Jmp <BB#12>
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %do.body
    Predecessors according to CFG: BB#11 BB#13
	Jmp <BB#13>
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#12
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = ADDiu %vreg9, 1; CPURegs:%vreg10,%vreg9
	ST %vreg10<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@bound>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@bound>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD %vreg12<kill>, 0; mem:LD4[@bound] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LT %vreg9, %vreg13<kill>; CPURegs:%vreg14,%vreg9,%vreg13
	JC %vreg14<kill>, <BB#12>; CPURegs:%vreg14
	Jmp <BB#14>
    Successors according to CFG: BB#12(124) BB#14(4)

BB#14: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#13
	%vreg15<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg16, 0; mem:LD4[@sum] CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDu %vreg17<kill>, %vreg18<kill>; CPURegs:%vreg19,%vreg17,%vreg18
	ST %vreg19, %vreg16, 0; mem:ST4[@sum] CPURegs:%vreg19,%vreg16
	%V0<def> = COPY %vreg19; CPURegs:%vreg19
	RetLR %V0<imp-use>

# End machine code for function add.


#####==========stderr_obj==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%p_array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%p_size.addr] CPURegs:%vreg1
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	%vreg5<def> = SRA %vreg1, %vreg4<kill>; CPURegs:%vreg5,%vreg1,%vreg4
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg5
	%vreg6<def> = MovGR %ZERO, 0; CPURegs:%vreg6
	ST %vreg6<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg6
	%vreg3<def> = COPY %vreg1; CPURegs:%vreg3,%vreg1
	%vreg2<def> = COPY %vreg0; CPURegs:%vreg2,%vreg0
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#10
	%vreg7<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg7
	%vreg8<def> = LTI %vreg7<kill>, 255; CPURegs:%vreg8,%vreg7
	JNC %vreg8<kill>, <BB#11>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#11(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg20<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg20
	ST %vreg20<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg20
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.cond1
    Predecessors according to CFG: BB#2 BB#5
	%vreg21<def> = MovGR %ZERO, 0; CPURegs:%vreg21
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg22
	%vreg23<def> = LT %vreg22<kill>, %vreg21<kill>; CPURegs:%vreg23,%vreg22,%vreg21
	JC %vreg23<kill>, <BB#6>; CPURegs:%vreg23
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#6(4)

BB#4: derived from LLVM BB %for.body3
    Predecessors according to CFG: BB#3
	%vreg40<def> = MovGR %ZERO, 2; CPURegs:%vreg40
	%vreg41<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg41
	%vreg42<def> = SHL %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	%vreg43<def> = LD <fi#0>, 0; mem:LD4[%p_array.addr] CPURegs:%vreg43
	%vreg44<def> = ADDu %vreg43<kill>, %vreg42<kill>; CPURegs:%vreg44,%vreg43,%vreg42
	%vreg45<def> = LD %vreg44<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg45,%vreg44
	%vreg46<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg46
	%vreg47<def,tied1> = MovIGL %vreg46<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg47,%vreg46
	%vreg48<def> = LD %vreg47, 0; mem:LD4[@sum] CPURegs:%vreg48,%vreg47
	%vreg49<def> = ADDu %vreg48<kill>, %vreg45<kill>; CPURegs:%vreg49,%vreg48,%vreg45
	ST %vreg49<kill>, %vreg47, 0; mem:ST4[@sum] CPURegs:%vreg49,%vreg47
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#4
	%vreg50<def> = LD <fi#4>, 0; mem:LD4[%j] CPURegs:%vreg50
	%vreg51<def> = ADDiu %vreg50<kill>, -2; CPURegs:%vreg51,%vreg50
	ST %vreg51<kill>, <fi#4>, 0; mem:ST4[%j] CPURegs:%vreg51
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#6: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#3
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#6 BB#8
	%vreg24<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg24
	%vreg25<def> = LTI %vreg24<kill>, 255; CPURegs:%vreg25,%vreg24
	JNC %vreg25<kill>, <BB#9>; CPURegs:%vreg25
	Jmp <BB#8>
    Successors according to CFG: BB#8(124) BB#9(4)

BB#8: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#7
	%vreg28<def> = LD <fi#2>, 0; mem:LD4[%half] CPURegs:%vreg28
	%vreg29<def> = ADDiu %vreg28, 1; CPURegs:%vreg29,%vreg28
	ST %vreg29<kill>, <fi#2>, 0; mem:ST4[%half] CPURegs:%vreg29
	%vreg30<def> = MovGR %ZERO, 2; CPURegs:%vreg30
	%vreg31<def> = SHL %vreg28, %vreg30<kill>; CPURegs:%vreg31,%vreg28,%vreg30
	%vreg32<def> = MovIGH %ZERO, <ga:@ex_array>[TF=3]; CPURegs:%vreg32
	%vreg33<def,tied1> = MovIGL %vreg32<tied0>, <ga:@ex_array>[TF=4]; CPURegs:%vreg33,%vreg32
	%vreg34<def> = ADDu %vreg33<kill>, %vreg31<kill>; CPURegs:%vreg34,%vreg33,%vreg31
	%vreg35<def> = LD %vreg34<kill>, 0; mem:LD4[%arrayidx5] CPURegs:%vreg35,%vreg34
	%vreg36<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg36
	%vreg37<def,tied1> = MovIGL %vreg36<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg37,%vreg36
	%vreg38<def> = LD %vreg37, 0; mem:LD4[@sum] CPURegs:%vreg38,%vreg37
	%vreg39<def> = SUBu %vreg38<kill>, %vreg35<kill>; CPURegs:%vreg39,%vreg38,%vreg35
	ST %vreg39<kill>, %vreg37, 0; mem:ST4[@sum] CPURegs:%vreg39,%vreg37
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#7
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %for.inc7
    Predecessors according to CFG: BB#9
	%vreg26<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg26
	%vreg27<def> = ADDiu %vreg26<kill>, 1; CPURegs:%vreg27,%vreg26
	ST %vreg27<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg27
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#11: derived from LLVM BB %for.end9
    Predecessors according to CFG: BB#1
	Jmp <BB#12>
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %do.body
    Predecessors according to CFG: BB#11 BB#13
	Jmp <BB#13>
    Successors according to CFG: BB#13

BB#13: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#12
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = ADDiu %vreg9, 1; CPURegs:%vreg10,%vreg9
	ST %vreg10<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@bound>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@bound>[TF=4]; CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD %vreg12<kill>, 0; mem:LD4[@bound] CPURegs:%vreg13,%vreg12
	%vreg14<def> = LT %vreg9, %vreg13<kill>; CPURegs:%vreg14,%vreg9,%vreg13
	JC %vreg14<kill>, <BB#12>; CPURegs:%vreg14
	Jmp <BB#14>
    Successors according to CFG: BB#12(124) BB#14(4)

BB#14: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#13
	%vreg15<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg15
	%vreg16<def,tied1> = MovIGL %vreg15<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD %vreg16, 0; mem:LD4[@sum] CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDu %vreg17<kill>, %vreg18<kill>; CPURegs:%vreg19,%vreg17,%vreg18
	ST %vreg19, %vreg16, 0; mem:ST4[@sum] CPURegs:%vreg19,%vreg16
	%V0<def> = COPY %vreg19; CPURegs:%vreg19
	RetLR %V0<imp-use>

# End machine code for function add.

