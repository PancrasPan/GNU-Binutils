
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name loopifmain.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/1/loopifmain.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/1/loopifmain.ll -x c ./testcase_8slots/1/loopifmain.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=20, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1, <fi#1>, 4; mem:ST4[%arrayidx] CPURegs:%vreg1
	ST %vreg1, <fi#1>, 0; mem:ST4[%arrayidx1] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 5; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg24<def> = MovGR %ZERO, 2; CPURegs:%vreg24
	%vreg25<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg25
	%vreg26<def> = SHL %vreg25<kill>, %vreg24<kill>; CPURegs:%vreg26,%vreg25,%vreg24
	%vreg27<def> = LEA <fi#1>, 0; CPURegs:%vreg27
	%vreg28<def> = ADDu %vreg27<kill>, %vreg26<kill>; CPURegs:%vreg28,%vreg27,%vreg26
	%vreg29<def> = LD %vreg28, -8; mem:LD4[%arrayidx4] CPURegs:%vreg29,%vreg28
	%vreg30<def> = LD %vreg28, -4; mem:LD4[%arrayidx2] CPURegs:%vreg30,%vreg28
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	ST %vreg31<kill>, %vreg28, 0; mem:ST4[%arrayidx5] CPURegs:%vreg31,%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg32<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg32
	%vreg33<def> = ADDiu %vreg32<kill>, 1; CPURegs:%vreg33,%vreg32
	ST %vreg33<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg33
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovGR %ZERO, 1; CPURegs:%vreg5
	ST %vreg5<kill>, <fi#3>, 0; mem:ST4[%i6] CPURegs:%vreg5
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.cond7
    Predecessors according to CFG: BB#4 BB#7
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg6
	%vreg7<def> = LTI %vreg6<kill>, 5; CPURegs:%vreg7,%vreg6
	JNC %vreg7<kill>, <BB#8>; CPURegs:%vreg7
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#8(4)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#5
	%vreg13<def> = MovGR %ZERO, 2; CPURegs:%vreg13
	%vreg14<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg14
	%vreg15<def> = SHL %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = MovIGH %ZERO, <ga:@ExArray>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@ExArray>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18, -4; mem:LD4[%arrayidx11] CPURegs:%vreg19,%vreg18
	%vreg20<def> = MovGR %ZERO, 1; CPURegs:%vreg20
	%vreg21<def> = SHL %vreg19<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg19,%vreg20
	ST %vreg21<kill>, %vreg18, 0; mem:ST4[%arrayidx12] CPURegs:%vreg21,%vreg18
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %for.inc13
    Predecessors according to CFG: BB#6
	%vreg22<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg22
	%vreg23<def> = ADDiu %vreg22<kill>, 1; CPURegs:%vreg23,%vreg22
	ST %vreg23<kill>, <fi#3>, 0; mem:ST4[%i6] CPURegs:%vreg23
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#8: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = LEA <fi#1>, 0; CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 5; CPURegs:%vreg9
	%A0<def> = COPY %vreg8; CPURegs:%vreg8
	%A1<def> = COPY %vreg9; CPURegs:%vreg9
	CALL <ga:@add>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg12,%vreg11
	ST %vreg10, %vreg12<kill>, 0; mem:ST4[@sum] CPURegs:%vreg10,%vreg12
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=20, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	ST %vreg1, <fi#1>, 4; mem:ST4[%arrayidx] CPURegs:%vreg1
	ST %vreg1, <fi#1>, 0; mem:ST4[%arrayidx1] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 5; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg24<def> = MovGR %ZERO, 2; CPURegs:%vreg24
	%vreg25<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg25
	%vreg26<def> = SHL %vreg25<kill>, %vreg24<kill>; CPURegs:%vreg26,%vreg25,%vreg24
	%vreg27<def> = LEA <fi#1>, 0; CPURegs:%vreg27
	%vreg28<def> = ADDu %vreg27<kill>, %vreg26<kill>; CPURegs:%vreg28,%vreg27,%vreg26
	%vreg29<def> = LD %vreg28, -8; mem:LD4[%arrayidx4] CPURegs:%vreg29,%vreg28
	%vreg30<def> = LD %vreg28, -4; mem:LD4[%arrayidx2] CPURegs:%vreg30,%vreg28
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	ST %vreg31<kill>, %vreg28, 0; mem:ST4[%arrayidx5] CPURegs:%vreg31,%vreg28
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg32<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg32
	%vreg33<def> = ADDiu %vreg32<kill>, 1; CPURegs:%vreg33,%vreg32
	ST %vreg33<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg33
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovGR %ZERO, 1; CPURegs:%vreg5
	ST %vreg5<kill>, <fi#3>, 0; mem:ST4[%i6] CPURegs:%vreg5
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.cond7
    Predecessors according to CFG: BB#4 BB#7
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg6
	%vreg7<def> = LTI %vreg6<kill>, 5; CPURegs:%vreg7,%vreg6
	JNC %vreg7<kill>, <BB#8>; CPURegs:%vreg7
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#8(4)

BB#6: derived from LLVM BB %for.body9
    Predecessors according to CFG: BB#5
	%vreg13<def> = MovGR %ZERO, 2; CPURegs:%vreg13
	%vreg14<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg14
	%vreg15<def> = SHL %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = MovIGH %ZERO, <ga:@ExArray>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@ExArray>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18, -4; mem:LD4[%arrayidx11] CPURegs:%vreg19,%vreg18
	%vreg20<def> = MovGR %ZERO, 1; CPURegs:%vreg20
	%vreg21<def> = SHL %vreg19<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg19,%vreg20
	ST %vreg21<kill>, %vreg18, 0; mem:ST4[%arrayidx12] CPURegs:%vreg21,%vreg18
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %for.inc13
    Predecessors according to CFG: BB#6
	%vreg22<def> = LD <fi#3>, 0; mem:LD4[%i6] CPURegs:%vreg22
	%vreg23<def> = ADDiu %vreg22<kill>, 1; CPURegs:%vreg23,%vreg22
	ST %vreg23<kill>, <fi#3>, 0; mem:ST4[%i6] CPURegs:%vreg23
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#8: derived from LLVM BB %for.end15
    Predecessors according to CFG: BB#5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = LEA <fi#1>, 0; CPURegs:%vreg8
	%vreg9<def> = MovGR %ZERO, 5; CPURegs:%vreg9
	%A0<def> = COPY %vreg8; CPURegs:%vreg8
	%A1<def> = COPY %vreg9; CPURegs:%vreg9
	CALL <ga:@add>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; CPURegs:%vreg10
	%vreg11<def> = MovIGH %ZERO, <ga:@sum>[TF=3]; CPURegs:%vreg11
	%vreg12<def,tied1> = MovIGL %vreg11<tied0>, <ga:@sum>[TF=4]; CPURegs:%vreg12,%vreg11
	ST %vreg10, %vreg12<kill>, 0; mem:ST4[@sum] CPURegs:%vreg10,%vreg12
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.

