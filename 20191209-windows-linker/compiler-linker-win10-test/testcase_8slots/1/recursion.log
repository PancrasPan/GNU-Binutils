
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name recursion.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/1/recursion.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/1/recursion.ll -x c ./testcase_8slots/1/recursion.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 5; CPURegs:%vreg1
	ST %vreg1, <fi#1>, 0; mem:ST4[%n] CPURegs:%vreg1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	CALL <ga:@sum>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = COPY %V0; CPURegs:%vreg2
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr] CPURegs:%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	%vreg2<def> = LTI %vreg0, 2; CPURegs:%vreg2,%vreg0
	JNC %vreg2<kill>, <BB#2>; CPURegs:%vreg2
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg7<def> = LD <fi#1>, 0; mem:LD4[%x.addr] CPURegs:%vreg7
	ST %vreg7<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg7
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#0
	%vreg3<def> = LD <fi#1>, 0; mem:LD4[%x.addr] CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = ADDiu %vreg3, -1; CPURegs:%vreg4,%vreg3
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@sum>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %V0; CPURegs:%vreg5
	%vreg6<def> = ADDu %vreg3, %vreg5; CPURegs:%vreg6,%vreg3,%vreg5
	ST %vreg6<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg6
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %return
    Predecessors according to CFG: BB#2 BB#1
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function sum.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 5; CPURegs:%vreg1
	ST %vreg1, <fi#1>, 0; mem:ST4[%n] CPURegs:%vreg1
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	CALL <ga:@sum>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = COPY %V0; CPURegs:%vreg2
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%x.addr] CPURegs:%vreg0
	%vreg1<def> = COPY %vreg0; CPURegs:%vreg1,%vreg0
	%vreg2<def> = LTI %vreg0, 2; CPURegs:%vreg2,%vreg0
	JNC %vreg2<kill>, <BB#2>; CPURegs:%vreg2
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg7<def> = LD <fi#1>, 0; mem:LD4[%x.addr] CPURegs:%vreg7
	ST %vreg7<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg7
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#2: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#0
	%vreg3<def> = LD <fi#1>, 0; mem:LD4[%x.addr] CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = ADDiu %vreg3, -1; CPURegs:%vreg4,%vreg3
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@sum>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = COPY %V0; CPURegs:%vreg5
	%vreg6<def> = ADDu %vreg3, %vreg5; CPURegs:%vreg6,%vreg3,%vreg5
	ST %vreg6<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg6
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %return
    Predecessors according to CFG: BB#2 BB#1
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function sum.

