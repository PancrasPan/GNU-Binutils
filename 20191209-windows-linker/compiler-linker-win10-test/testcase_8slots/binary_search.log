
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name binary_search.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/binary_search.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/binary_search.ll -x c ./testcase_8slots/binary_search.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function binarysearch: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg8, %A1 in %vreg9

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg9<def> = COPY %A1; CPURegs:%vreg9
	%vreg8<def> = COPY %A0; CPURegs:%vreg8
	%vreg11<def> = COPY %vreg9; CPURegs:%vreg11,%vreg9
	%vreg10<def> = COPY %vreg8; CPURegs:%vreg10,%vreg8
	%vreg14<def> = MovGR %ZERO, -1; CPURegs:%vreg14
	%vreg13<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg13
	%vreg12<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg12
	%vreg15<def> = GT %vreg12, %vreg13; CPURegs:%vreg15,%vreg12,%vreg13
	JC %vreg15<kill>, <BB#7>; CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#7(16) BB#1(16)

BB#1: derived from LLVM BB %while.cond.preheader
    Predecessors according to CFG: BB#0
	%vreg17<def> = GT %vreg12, %vreg13; CPURegs:%vreg17,%vreg12,%vreg13
	%vreg16<def> = MovGR %ZERO, -2; CPURegs:%vreg16
	JC %vreg17<kill>, <BB#7>; CPURegs:%vreg17
	Jmp <BB#2>
    Successors according to CFG: BB#7(16) BB#2(16)

BB#2: derived from LLVM BB %while.body.lr.ph
    Predecessors according to CFG: BB#1 BB#6
	%vreg0<def> = PHI %vreg13, <BB#1>, %vreg2, <BB#6>; CPURegs:%vreg0,%vreg13,%vreg2
	%vreg1<def> = PHI %vreg12, <BB#1>, %vreg6, <BB#6>; CPURegs:%vreg1,%vreg12,%vreg6
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#5
	%vreg29<def> = GT %vreg1, %vreg5; CPURegs:%vreg29,%vreg1,%vreg5
	%vreg28<def> = MovGR %ZERO, -2; CPURegs:%vreg28
	JC %vreg29<kill>, <BB#7>; CPURegs:%vreg29
	Jmp <BB#4>
    Successors according to CFG: BB#7(4) BB#4(124)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = PHI %vreg0, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg2,%vreg0,%vreg5
	%vreg18<def> = ADDu %vreg2, %vreg1; CPURegs:%vreg18,%vreg2,%vreg1
	%vreg19<def> = MovGR %ZERO, 31; CPURegs:%vreg19
	%vreg20<def> = SRL %vreg18, %vreg19<kill>; CPURegs:%vreg20,%vreg18,%vreg19
	%vreg21<def> = ADDu %vreg18, %vreg20<kill>; CPURegs:%vreg21,%vreg18,%vreg20
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg3<def> = SRA %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg3,%vreg21,%vreg22
	%vreg23<def> = MovGR %ZERO, 2; CPURegs:%vreg23
	%vreg24<def> = SHL %vreg3, %vreg23<kill>; CPURegs:%vreg24,%vreg3,%vreg23
	%vreg25<def> = ADDu %vreg10, %vreg24<kill>; CPURegs:%vreg25,%vreg10,%vreg24
	%vreg4<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg4,%vreg25
	%vreg26<def> = EQ %vreg4, %vreg11; CPURegs:%vreg26,%vreg4,%vreg11
	JC %vreg26<kill>, <BB#7>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#7(4) BB#5(124)

BB#5: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg27<def> = GE %vreg4, %vreg11; CPURegs:%vreg27,%vreg4,%vreg11
	%vreg5<def> = ADDiu %vreg3, -1; CPURegs:%vreg5,%vreg3
	JC %vreg27<kill>, <BB#3>; CPURegs:%vreg27
	Jmp <BB#6>
    Successors according to CFG: BB#6(4) BB#3(124)

BB#6: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#5
	%vreg30<def> = MovGR %ZERO, -2; CPURegs:%vreg30
	%vreg31<def> = LT %vreg3, %vreg2; CPURegs:%vreg31,%vreg3,%vreg2
	%vreg6<def> = ADDiu %vreg3, 1; CPURegs:%vreg6,%vreg3
	JC %vreg31<kill>, <BB#2>; CPURegs:%vreg31
	Jmp <BB#7>
    Successors according to CFG: BB#2(124) BB#7(4)

BB#7: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#1 BB#4 BB#3 BB#6
	%vreg7<def> = PHI %vreg14, <BB#0>, %vreg16, <BB#1>, %vreg3, <BB#4>, %vreg28, <BB#3>, %vreg30, <BB#6>; CPURegs:%vreg7,%vreg14,%vreg16,%vreg3,%vreg28,%vreg30
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function binarysearch.


#####==========stderr_obj==========#####:
# Machine code for function binarysearch: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
Function Live Ins: %A0 in %vreg8, %A1 in %vreg9

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg9<def> = COPY %A1; CPURegs:%vreg9
	%vreg8<def> = COPY %A0; CPURegs:%vreg8
	%vreg11<def> = COPY %vreg9; CPURegs:%vreg11,%vreg9
	%vreg10<def> = COPY %vreg8; CPURegs:%vreg10,%vreg8
	%vreg14<def> = MovGR %ZERO, -1; CPURegs:%vreg14
	%vreg13<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg13
	%vreg12<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg12
	%vreg15<def> = GT %vreg12, %vreg13; CPURegs:%vreg15,%vreg12,%vreg13
	JC %vreg15<kill>, <BB#7>; CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#7(16) BB#1(16)

BB#1: derived from LLVM BB %while.cond.preheader
    Predecessors according to CFG: BB#0
	%vreg17<def> = GT %vreg12, %vreg13; CPURegs:%vreg17,%vreg12,%vreg13
	%vreg16<def> = MovGR %ZERO, -2; CPURegs:%vreg16
	JC %vreg17<kill>, <BB#7>; CPURegs:%vreg17
	Jmp <BB#2>
    Successors according to CFG: BB#7(16) BB#2(16)

BB#2: derived from LLVM BB %while.body.lr.ph
    Predecessors according to CFG: BB#1 BB#6
	%vreg0<def> = PHI %vreg13, <BB#1>, %vreg2, <BB#6>; CPURegs:%vreg0,%vreg13,%vreg2
	%vreg1<def> = PHI %vreg12, <BB#1>, %vreg6, <BB#6>; CPURegs:%vreg1,%vreg12,%vreg6
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#5
	%vreg29<def> = GT %vreg1, %vreg5; CPURegs:%vreg29,%vreg1,%vreg5
	%vreg28<def> = MovGR %ZERO, -2; CPURegs:%vreg28
	JC %vreg29<kill>, <BB#7>; CPURegs:%vreg29
	Jmp <BB#4>
    Successors according to CFG: BB#7(4) BB#4(124)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#3
	%vreg2<def> = PHI %vreg0, <BB#2>, %vreg5, <BB#3>; CPURegs:%vreg2,%vreg0,%vreg5
	%vreg18<def> = ADDu %vreg2, %vreg1; CPURegs:%vreg18,%vreg2,%vreg1
	%vreg19<def> = MovGR %ZERO, 31; CPURegs:%vreg19
	%vreg20<def> = SRL %vreg18, %vreg19<kill>; CPURegs:%vreg20,%vreg18,%vreg19
	%vreg21<def> = ADDu %vreg18, %vreg20<kill>; CPURegs:%vreg21,%vreg18,%vreg20
	%vreg22<def> = MovGR %ZERO, 1; CPURegs:%vreg22
	%vreg3<def> = SRA %vreg21<kill>, %vreg22<kill>; CPURegs:%vreg3,%vreg21,%vreg22
	%vreg23<def> = MovGR %ZERO, 2; CPURegs:%vreg23
	%vreg24<def> = SHL %vreg3, %vreg23<kill>; CPURegs:%vreg24,%vreg3,%vreg23
	%vreg25<def> = ADDu %vreg10, %vreg24<kill>; CPURegs:%vreg25,%vreg10,%vreg24
	%vreg4<def> = LD %vreg25<kill>, 0; mem:LD4[%arrayidx](tbaa=<badref>) CPURegs:%vreg4,%vreg25
	%vreg26<def> = EQ %vreg4, %vreg11; CPURegs:%vreg26,%vreg4,%vreg11
	JC %vreg26<kill>, <BB#7>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#7(4) BB#5(124)

BB#5: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg27<def> = GE %vreg4, %vreg11; CPURegs:%vreg27,%vreg4,%vreg11
	%vreg5<def> = ADDiu %vreg3, -1; CPURegs:%vreg5,%vreg3
	JC %vreg27<kill>, <BB#3>; CPURegs:%vreg27
	Jmp <BB#6>
    Successors according to CFG: BB#6(4) BB#3(124)

BB#6: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#5
	%vreg30<def> = MovGR %ZERO, -2; CPURegs:%vreg30
	%vreg31<def> = LT %vreg3, %vreg2; CPURegs:%vreg31,%vreg3,%vreg2
	%vreg6<def> = ADDiu %vreg3, 1; CPURegs:%vreg6,%vreg3
	JC %vreg31<kill>, <BB#2>; CPURegs:%vreg31
	Jmp <BB#7>
    Successors according to CFG: BB#2(124) BB#7(4)

BB#7: derived from LLVM BB %return
    Predecessors according to CFG: BB#0 BB#1 BB#4 BB#3 BB#6
	%vreg7<def> = PHI %vreg14, <BB#0>, %vreg16, <BB#1>, %vreg3, <BB#4>, %vreg28, <BB#3>, %vreg30, <BB#6>; CPURegs:%vreg7,%vreg14,%vreg16,%vreg3,%vreg28,%vreg30
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function binarysearch.

