
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name global_array.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/global_array.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/global_array.ll -x c ./testcase_8slots/global_array.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg4, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg0,%vreg4,%vreg1
	%vreg6<def> = MovGR %ZERO, 2; CPURegs:%vreg6
	%vreg7<def> = SHL %vreg0, %vreg6<kill>; CPURegs:%vreg7,%vreg0,%vreg6
	%vreg8<def> = MovIGH %ZERO, <ga:@g_Array>[TF=3]; CPURegs:%vreg8
	%vreg9<def,tied1> = MovIGL %vreg8<tied0>, <ga:@g_Array>[TF=4]; CPURegs:%vreg9,%vreg8
	%vreg10<def> = ADDu %vreg9<kill>, %vreg7<kill>; CPURegs:%vreg10,%vreg9,%vreg7
	%vreg11<def> = MovGR %ZERO, 5; CPURegs:%vreg11
	%vreg12<def> = SUBu %vreg11<kill>, %vreg0; CPURegs:%vreg12,%vreg11,%vreg0
	ST %vreg12<kill>, %vreg10<kill>, 0; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg12,%vreg10
	%vreg5<def> = MovGR %ZERO, 0; CPURegs:%vreg5
	%vreg1<def> = ADDiu %vreg0, 1; CPURegs:%vreg1,%vreg0
	%vreg13<def> = NEQI %vreg1, 5; CPURegs:%vreg13,%vreg1
	JC %vreg13<kill>, <BB#1>; CPURegs:%vreg13
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.body4
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg2,%vreg5,%vreg3
	%vreg14<def> = MovGR %ZERO, 2; CPURegs:%vreg14
	%vreg15<def> = SHL %vreg2, %vreg14<kill>; CPURegs:%vreg15,%vreg2,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@g_Array>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@g_Array>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18, 0; mem:LD4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg19,%vreg18
	%vreg20<def> = ADDiu %vreg19<kill>, 1; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, %vreg18, 0; mem:ST4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg20,%vreg18
	%vreg3<def> = ADDiu %vreg2, 1; CPURegs:%vreg3,%vreg2
	%vreg21<def> = NEQI %vreg3, 5; CPURegs:%vreg21,%vreg3
	JC %vreg21<kill>, <BB#2>; CPURegs:%vreg21
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#2(124)

BB#3: derived from LLVM BB %for.end9
    Predecessors according to CFG: BB#2
	%vreg22<def> = MovGR %ZERO, 0; CPURegs:%vreg22
	%V0<def> = COPY %vreg22; CPURegs:%vreg22
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg4, <BB#0>, %vreg1, <BB#1>; CPURegs:%vreg0,%vreg4,%vreg1
	%vreg6<def> = MovGR %ZERO, 2; CPURegs:%vreg6
	%vreg7<def> = SHL %vreg0, %vreg6<kill>; CPURegs:%vreg7,%vreg0,%vreg6
	%vreg8<def> = MovIGH %ZERO, <ga:@g_Array>[TF=3]; CPURegs:%vreg8
	%vreg9<def,tied1> = MovIGL %vreg8<tied0>, <ga:@g_Array>[TF=4]; CPURegs:%vreg9,%vreg8
	%vreg10<def> = ADDu %vreg9<kill>, %vreg7<kill>; CPURegs:%vreg10,%vreg9,%vreg7
	%vreg11<def> = MovGR %ZERO, 5; CPURegs:%vreg11
	%vreg12<def> = SUBu %vreg11<kill>, %vreg0; CPURegs:%vreg12,%vreg11,%vreg0
	ST %vreg12<kill>, %vreg10<kill>, 0; mem:ST4[%arrayidx](tbaa=<badref>) CPURegs:%vreg12,%vreg10
	%vreg5<def> = MovGR %ZERO, 0; CPURegs:%vreg5
	%vreg1<def> = ADDiu %vreg0, 1; CPURegs:%vreg1,%vreg0
	%vreg13<def> = NEQI %vreg1, 5; CPURegs:%vreg13,%vreg1
	JC %vreg13<kill>, <BB#1>; CPURegs:%vreg13
	Jmp <BB#2>
    Successors according to CFG: BB#2(4) BB#1(124)

BB#2: derived from LLVM BB %for.body4
    Predecessors according to CFG: BB#1 BB#2
	%vreg2<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg2,%vreg5,%vreg3
	%vreg14<def> = MovGR %ZERO, 2; CPURegs:%vreg14
	%vreg15<def> = SHL %vreg2, %vreg14<kill>; CPURegs:%vreg15,%vreg2,%vreg14
	%vreg16<def> = MovIGH %ZERO, <ga:@g_Array>[TF=3]; CPURegs:%vreg16
	%vreg17<def,tied1> = MovIGL %vreg16<tied0>, <ga:@g_Array>[TF=4]; CPURegs:%vreg17,%vreg16
	%vreg18<def> = ADDu %vreg17<kill>, %vreg15<kill>; CPURegs:%vreg18,%vreg17,%vreg15
	%vreg19<def> = LD %vreg18, 0; mem:LD4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg19,%vreg18
	%vreg20<def> = ADDiu %vreg19<kill>, 1; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, %vreg18, 0; mem:ST4[%arrayidx5](tbaa=<badref>) CPURegs:%vreg20,%vreg18
	%vreg3<def> = ADDiu %vreg2, 1; CPURegs:%vreg3,%vreg2
	%vreg21<def> = NEQI %vreg3, 5; CPURegs:%vreg21,%vreg3
	JC %vreg21<kill>, <BB#2>; CPURegs:%vreg21
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#2(124)

BB#3: derived from LLVM BB %for.end9
    Predecessors according to CFG: BB#2
	%vreg22<def> = MovGR %ZERO, 0; CPURegs:%vreg22
	%V0<def> = COPY %vreg22; CPURegs:%vreg22
	RetLR %V0<imp-use>

# End machine code for function main.

