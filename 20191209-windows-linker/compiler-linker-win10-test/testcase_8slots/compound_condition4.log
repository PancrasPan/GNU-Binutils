
#####==========stderr_mid==========#####:
clang version 3.5.0 (tags/RELEASE_350/final)
Target: dsp
Thread model: posix
 "D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\clang.exe" -cc1 -triple dsp -emit-llvm -disable-free -main-file-name compound_condition4.c -mrelocation-model static -mdisable-fp-elim -fmath-errno -no-integrated-as -mconstructor-aliases -v -dwarf-column-info -coverage-file "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test\\./testcase_8slots/compound_condition4.ll" -resource-dir "D:\\ppp\\lee_han-dsp_compiler-master\\dsp_compiler_old\\build-x64\\Debug\\bin\\..\\lib\\clang\\3.5.0" -I ./include -O1 -fno-dwarf-directory-asm -fdebug-compilation-dir "D:\\ppp\\Linker PPP\\20191209-windows-linker\\compiler-linker-win10-test" -ferror-limit 19 -fmessage-length 0 -mstackrealign -fobjc-runtime=gcc -fdiagnostics-show-option -o ./testcase_8slots/compound_condition4.ll -x c ./testcase_8slots/compound_condition4.c
clang -cc1 version 3.5.0 based upon LLVM 3.5.0svn default target x86_64-pc-windows-msvc
ignoring nonexistent directory "/usr/local/include"
ignoring nonexistent directory "/usr/include"
#include "..." search starts here:
#include <...> search starts here:
 ./include
 D:\ppp\lee_han-dsp_compiler-master\dsp_compiler_old\build-x64\Debug\bin\..\lib\clang\3.5.0\include
End of search list.
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg5<def> = MovGR %ZERO, 0; CPURegs:%vreg5
	%vreg4<def> = MovGR %ZERO, 2; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg0<def> = PHI %vreg4, <BB#0>, %vreg3, <BB#3>; CPURegs:%vreg0,%vreg4,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#3>; CPURegs:%vreg1,%vreg5,%vreg2
	%vreg6<def> = LTI %vreg1, 4; CPURegs:%vreg6,%vreg1
	JNC %vreg6<kill>, <BB#2>; CPURegs:%vreg6
	Jmp <BB#5>
    Successors according to CFG: BB#5(48) BB#2(16)

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#1
	%vreg7<def> = MovGR %ZERO, 4; CPURegs:%vreg7
	%vreg8<def> = LT %vreg0, %vreg7<kill>; CPURegs:%vreg8,%vreg0,%vreg7
	JC %vreg8<kill>, <BB#3>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#3(32) BB#2(16)

BB#2: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#1 BB#5
	%vreg9<def> = GE %vreg1, %vreg0; CPURegs:%vreg9,%vreg1,%vreg0
	JC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#6>
    Successors according to CFG: BB#6(252) BB#4(4)

BB#6: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#2
	%vreg10<def> = LTI %vreg0, 3; CPURegs:%vreg10,%vreg0
	JNC %vreg10<kill>, <BB#4>; CPURegs:%vreg10
	Jmp <BB#3>
    Successors according to CFG: BB#3(248) BB#4(4)

BB#3: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5 BB#6
	%vreg3<def> = ADDiu %vreg0, 1; CPURegs:%vreg3,%vreg0
	%vreg2<def> = ADDiu %vreg1, 1; CPURegs:%vreg2,%vreg1
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#2 BB#6
	%vreg11<def> = MovGR %ZERO, 4; CPURegs:%vreg11
	%vreg12<def> = SUBu %vreg11<kill>, %vreg1; CPURegs:%vreg12,%vreg11,%vreg1
	%V0<def> = COPY %vreg12; CPURegs:%vreg12
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg5<def> = MovGR %ZERO, 0; CPURegs:%vreg5
	%vreg4<def> = MovGR %ZERO, 2; CPURegs:%vreg4
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg0<def> = PHI %vreg4, <BB#0>, %vreg3, <BB#3>; CPURegs:%vreg0,%vreg4,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#3>; CPURegs:%vreg1,%vreg5,%vreg2
	%vreg6<def> = LTI %vreg1, 4; CPURegs:%vreg6,%vreg1
	JNC %vreg6<kill>, <BB#2>; CPURegs:%vreg6
	Jmp <BB#5>
    Successors according to CFG: BB#5(48) BB#2(16)

BB#5: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#1
	%vreg7<def> = MovGR %ZERO, 4; CPURegs:%vreg7
	%vreg8<def> = LT %vreg0, %vreg7<kill>; CPURegs:%vreg8,%vreg0,%vreg7
	JC %vreg8<kill>, <BB#3>; CPURegs:%vreg8
	Jmp <BB#2>
    Successors according to CFG: BB#3(32) BB#2(16)

BB#2: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#1 BB#5
	%vreg9<def> = GE %vreg1, %vreg0; CPURegs:%vreg9,%vreg1,%vreg0
	JC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#6>
    Successors according to CFG: BB#6(252) BB#4(4)

BB#6: derived from LLVM BB %lor.rhs
    Predecessors according to CFG: BB#2
	%vreg10<def> = LTI %vreg0, 3; CPURegs:%vreg10,%vreg0
	JNC %vreg10<kill>, <BB#4>; CPURegs:%vreg10
	Jmp <BB#3>
    Successors according to CFG: BB#3(248) BB#4(4)

BB#3: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#5 BB#6
	%vreg3<def> = ADDiu %vreg0, 1; CPURegs:%vreg3,%vreg0
	%vreg2<def> = ADDiu %vreg1, 1; CPURegs:%vreg2,%vreg1
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#2 BB#6
	%vreg11<def> = MovGR %ZERO, 4; CPURegs:%vreg11
	%vreg12<def> = SUBu %vreg11<kill>, %vreg1; CPURegs:%vreg12,%vreg11,%vreg1
	%V0<def> = COPY %vreg12; CPURegs:%vreg12
	RetLR %V0<imp-use>

# End machine code for function main.

