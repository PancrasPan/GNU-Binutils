
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function merge_sort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg8, %A1 in %vreg9

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg9<def> = COPY %A1; CPURegs:%vreg9
	%vreg8<def> = COPY %A0; CPURegs:%vreg8
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	ST %vreg8, <fi#1>, 0; mem:ST4[%Array.addr] CPURegs:%vreg8
	ST %vreg9, <fi#2>, 0; mem:ST4[%start.addr] CPURegs:%vreg9
	ST %vreg10, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg10
	%vreg11<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg11
	%vreg12<def> = LE %vreg11<kill>, %vreg10; CPURegs:%vreg12,%vreg11,%vreg10
	JC %vreg12<kill>, <BB#2>; CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg162<def> = MovGR %ZERO, -1; CPURegs:%vreg162
	ST %vreg162<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg162
	Jmp <BB#30>
    Successors according to CFG: BB#30

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg13<def> = MovGR %ZERO, 1; CPURegs:%vreg13
	ST %vreg13, <fi#4>, 0; mem:ST4[%dist] CPURegs:%vreg13
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#28
	%vreg14<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg14
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg15
	%vreg16<def> = SUBu %vreg15<kill>, %vreg14<kill>; CPURegs:%vreg16,%vreg15,%vreg14
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg18
	%vreg19<def> = GE %vreg18<kill>, %vreg17<kill>; CPURegs:%vreg19,%vreg18,%vreg17
	JC %vreg19<kill>, <BB#29>; CPURegs:%vreg19
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#29(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	%vreg21<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg21
	ST %vreg21, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg21
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg21, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	%vreg24<def> = ADDiu %vreg23, -1; CPURegs:%vreg24,%vreg23
	ST %vreg24<kill>, <fi#6>, 0; mem:ST4[%a1_e] CPURegs:%vreg24
	ST %vreg23, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg23
	%vreg25<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg25
	%vreg26<def> = ADDu %vreg23, %vreg25<kill>; CPURegs:%vreg26,%vreg23,%vreg25
	%vreg27<def> = ADDiu %vreg26<kill>, -1; CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg28
	%vreg29<def> = LE %vreg27<kill>, %vreg28<kill>; CPURegs:%vreg29,%vreg27,%vreg28
	JC %vreg29<kill>, <BB#6>; CPURegs:%vreg29
	Jmp <BB#5>
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#4
	%vreg0<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg0
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#4
	%vreg30<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg30
	%vreg31<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	%vreg1<def> = ADDiu %vreg32<kill>, -1; CPURegs:%vreg1,%vreg32
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#6 BB#5
	%vreg2<def> = PHI %vreg1, <BB#6>, %vreg0, <BB#5>; CPURegs:%vreg2,%vreg1,%vreg0
	ST %vreg2, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg2
	%vreg33<def> = MovGR %ZERO, 0; CPURegs:%vreg33
	ST %vreg33, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg33
    Successors according to CFG: BB#8

BB#8: derived from LLVM BB %while.cond10
    Predecessors according to CFG: BB#7 BB#20 BB#21
	%vreg34<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg34
	%vreg35<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg35
	%vreg36<def> = GT %vreg35<kill>, %vreg34<kill>; CPURegs:%vreg36,%vreg35,%vreg34
	JC %vreg36<kill>, <BB#23>; CPURegs:%vreg36
	Jmp <BB#9>
    Successors according to CFG: BB#9(124) BB#23(4)

BB#9: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#8 BB#14 BB#13
	%vreg75<def> = LD <fi#6>, 0; mem:LD4[%a1_e] CPURegs:%vreg75
	%vreg76<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg76
	%vreg77<def> = GT %vreg76<kill>, %vreg75<kill>; CPURegs:%vreg77,%vreg76,%vreg75
	JC %vreg77<kill>, <BB#11>; CPURegs:%vreg77
	Jmp <BB#10>
    Successors according to CFG: BB#10(16) BB#11(16)

BB#31: 
    Predecessors according to CFG: BB#10
	%vreg167<def> = MovGR %ZERO, 1; CPURegs:%vreg167
	Jmp <BB#11>
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#9
	%vreg78<def> = LD <fi#8>, 0; mem:LD4[%a2_e] CPURegs:%vreg78
	%vreg79<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg79
	%vreg3<def> = LE %vreg79<kill>, %vreg78<kill>; CPURegs:%vreg3,%vreg79,%vreg78
	%vreg166<def> = MovGR %ZERO, 0; CPURegs:%vreg166
	JNC %vreg79<kill>, <BB#11>; CPURegs:%vreg79
	Jmp <BB#31>
    Successors according to CFG: BB#11 BB#31

BB#11: derived from LLVM BB %land.end
    Predecessors according to CFG: BB#9 BB#10 BB#31
	%vreg4<def> = PHI %vreg33, <BB#9>, %vreg166, <BB#10>, %vreg167, <BB#31>; CPURegs:%vreg4,%vreg33,%vreg166,%vreg167
	%vreg80<def> = EQI %vreg4, 0; CPURegs:%vreg80,%vreg4
	JC %vreg80<kill>, <BB#15>; CPURegs:%vreg80
	Jmp <BB#12>
    Successors according to CFG: BB#12(124) BB#15(4)

BB#12: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#11
	%vreg125<def> = MovGR %ZERO, 2; CPURegs:%vreg125
	%vreg126<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg126
	%vreg127<def> = SHL %vreg126<kill>, %vreg125; CPURegs:%vreg127,%vreg126,%vreg125
	%vreg128<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg128
	%vreg129<def> = SHL %vreg128<kill>, %vreg125; CPURegs:%vreg129,%vreg128,%vreg125
	%vreg130<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg130
	%vreg131<def> = ADDu %vreg130, %vreg129<kill>; CPURegs:%vreg131,%vreg130,%vreg129
	%vreg132<def> = ADDu %vreg130, %vreg127<kill>; CPURegs:%vreg132,%vreg130,%vreg127
	%vreg133<def> = LD %vreg132<kill>, 0; mem:LD4[%arrayidx15] CPURegs:%vreg133,%vreg132
	%vreg134<def> = LD %vreg131<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg134,%vreg131
	%vreg135<def> = LE %vreg134<kill>, %vreg133<kill>; CPURegs:%vreg135,%vreg134,%vreg133
	JC %vreg135<kill>, <BB#14>; CPURegs:%vreg135
	Jmp <BB#13>
    Successors according to CFG: BB#13(16) BB#14(16)

BB#13: derived from LLVM BB %if.then17
    Predecessors according to CFG: BB#12
	%vreg149<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg149
	%vreg150<def> = ADDiu %vreg149, 1; CPURegs:%vreg150,%vreg149
	ST %vreg150<kill>, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg150
	%vreg152<def> = SHL %vreg149, %vreg125; CPURegs:%vreg152,%vreg149,%vreg125
	%vreg153<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg153
	%vreg154<def> = ADDu %vreg153<kill>, %vreg152<kill>; CPURegs:%vreg154,%vreg153,%vreg152
	%vreg155<def> = LD %vreg154<kill>, 0; mem:LD4[%arrayidx18] CPURegs:%vreg155,%vreg154
	%vreg156<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg156
	%vreg157<def> = ADDiu %vreg156, 1; CPURegs:%vreg157,%vreg156
	ST %vreg157<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg157
	%vreg158<def> = SHL %vreg156, %vreg125; CPURegs:%vreg158,%vreg156,%vreg125
	%vreg159<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg159
	%vreg160<def,tied1> = MovIGL %vreg159<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg160,%vreg159
	%vreg161<def> = ADDu %vreg160<kill>, %vreg158<kill>; CPURegs:%vreg161,%vreg160,%vreg158
	ST %vreg155<kill>, %vreg161<kill>, 0; mem:ST4[%arrayidx20] CPURegs:%vreg155,%vreg161
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#14: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#12
	%vreg136<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg136
	%vreg137<def> = ADDiu %vreg136, 1; CPURegs:%vreg137,%vreg136
	ST %vreg137<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg137
	%vreg139<def> = SHL %vreg136, %vreg125; CPURegs:%vreg139,%vreg136,%vreg125
	%vreg140<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg140
	%vreg141<def> = ADDu %vreg140<kill>, %vreg139<kill>; CPURegs:%vreg141,%vreg140,%vreg139
	%vreg142<def> = LD %vreg141<kill>, 0; mem:LD4[%arrayidx22] CPURegs:%vreg142,%vreg141
	%vreg143<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg143
	%vreg144<def> = ADDiu %vreg143, 1; CPURegs:%vreg144,%vreg143
	ST %vreg144<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg144
	%vreg145<def> = SHL %vreg143, %vreg125; CPURegs:%vreg145,%vreg143,%vreg125
	%vreg146<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg146
	%vreg147<def,tied1> = MovIGL %vreg146<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg147,%vreg146
	%vreg148<def> = ADDu %vreg147<kill>, %vreg145<kill>; CPURegs:%vreg148,%vreg147,%vreg145
	ST %vreg142<kill>, %vreg148<kill>, 0; mem:ST4[%arrayidx24] CPURegs:%vreg142,%vreg148
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#15: derived from LLVM BB %for.cond26
    Predecessors according to CFG: BB#11 BB#16
	%vreg81<def> = LD <fi#6>, 0; mem:LD4[%a1_e] CPURegs:%vreg81
	%vreg82<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg82
	%vreg83<def> = GT %vreg82<kill>, %vreg81<kill>; CPURegs:%vreg83,%vreg82,%vreg81
	JC %vreg83<kill>, <BB#17>; CPURegs:%vreg83
	Jmp <BB#16>
    Successors according to CFG: BB#16(124) BB#17(4)

BB#16: derived from LLVM BB %for.body28
    Predecessors according to CFG: BB#15
	%vreg112<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg112
	%vreg113<def> = ADDiu %vreg112, 1; CPURegs:%vreg113,%vreg112
	ST %vreg113<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg113
	%vreg114<def> = MovGR %ZERO, 2; CPURegs:%vreg114
	%vreg115<def> = SHL %vreg112, %vreg114; CPURegs:%vreg115,%vreg112,%vreg114
	%vreg116<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg116
	%vreg117<def> = ADDu %vreg116<kill>, %vreg115<kill>; CPURegs:%vreg117,%vreg116,%vreg115
	%vreg118<def> = LD %vreg117<kill>, 0; mem:LD4[%arrayidx30] CPURegs:%vreg118,%vreg117
	%vreg119<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg119
	%vreg120<def> = ADDiu %vreg119, 1; CPURegs:%vreg120,%vreg119
	ST %vreg120<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg120
	%vreg121<def> = SHL %vreg119, %vreg114; CPURegs:%vreg121,%vreg119,%vreg114
	%vreg122<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg122
	%vreg123<def,tied1> = MovIGL %vreg122<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg123,%vreg122
	%vreg124<def> = ADDu %vreg123<kill>, %vreg121<kill>; CPURegs:%vreg124,%vreg123,%vreg121
	ST %vreg118<kill>, %vreg124<kill>, 0; mem:ST4[%arrayidx32] CPURegs:%vreg118,%vreg124
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#17: derived from LLVM BB %for.cond34
    Predecessors according to CFG: BB#15 BB#18
	%vreg84<def> = LD <fi#8>, 0; mem:LD4[%a2_e] CPURegs:%vreg84
	%vreg85<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg85
	%vreg86<def> = GT %vreg85<kill>, %vreg84<kill>; CPURegs:%vreg86,%vreg85,%vreg84
	JC %vreg86<kill>, <BB#19>; CPURegs:%vreg86
	Jmp <BB#18>
    Successors according to CFG: BB#18(124) BB#19(4)

BB#18: derived from LLVM BB %for.body36
    Predecessors according to CFG: BB#17
	%vreg99<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg99
	%vreg100<def> = ADDiu %vreg99, 1; CPURegs:%vreg100,%vreg99
	ST %vreg100<kill>, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg100
	%vreg101<def> = MovGR %ZERO, 2; CPURegs:%vreg101
	%vreg102<def> = SHL %vreg99, %vreg101; CPURegs:%vreg102,%vreg99,%vreg101
	%vreg103<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg103
	%vreg104<def> = ADDu %vreg103<kill>, %vreg102<kill>; CPURegs:%vreg104,%vreg103,%vreg102
	%vreg105<def> = LD %vreg104<kill>, 0; mem:LD4[%arrayidx38] CPURegs:%vreg105,%vreg104
	%vreg106<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg106
	%vreg107<def> = ADDiu %vreg106, 1; CPURegs:%vreg107,%vreg106
	ST %vreg107<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg107
	%vreg108<def> = SHL %vreg106, %vreg101; CPURegs:%vreg108,%vreg106,%vreg101
	%vreg109<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg109
	%vreg110<def,tied1> = MovIGL %vreg109<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg110,%vreg109
	%vreg111<def> = ADDu %vreg110<kill>, %vreg108<kill>; CPURegs:%vreg111,%vreg110,%vreg108
	ST %vreg105<kill>, %vreg111<kill>, 0; mem:ST4[%arrayidx40] CPURegs:%vreg105,%vreg111
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#19: derived from LLVM BB %for.end41
    Predecessors according to CFG: BB#17
	%vreg87<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg87
	ST %vreg87, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg87
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg88
	%vreg89<def> = ADDu %vreg87, %vreg88<kill>; CPURegs:%vreg89,%vreg87,%vreg88
	%vreg90<def> = ADDiu %vreg89, -1; CPURegs:%vreg90,%vreg89
	ST %vreg90<kill>, <fi#6>, 0; mem:ST4[%a1_e] CPURegs:%vreg90
	ST %vreg89, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg89
	%vreg91<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg91
	%vreg92<def> = ADDu %vreg89, %vreg91<kill>; CPURegs:%vreg92,%vreg89,%vreg91
	%vreg93<def> = ADDiu %vreg92<kill>, -1; CPURegs:%vreg93,%vreg92
	%vreg94<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg94
	%vreg95<def> = LE %vreg93<kill>, %vreg94<kill>; CPURegs:%vreg95,%vreg93,%vreg94
	JC %vreg95<kill>, <BB#21>; CPURegs:%vreg95
	Jmp <BB#20>
    Successors according to CFG: BB#20(16) BB#21(16)

BB#20: derived from LLVM BB %cond.true48
    Predecessors according to CFG: BB#19
	%vreg5<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg5
	ST %vreg5, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg5
	Jmp <BB#8>
    Successors according to CFG: BB#8(16)

BB#21: derived from LLVM BB %cond.false49
    Predecessors according to CFG: BB#19
	%vreg96<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg96
	%vreg97<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg97
	%vreg98<def> = ADDu %vreg97<kill>, %vreg96<kill>; CPURegs:%vreg98,%vreg97,%vreg96
	%vreg6<def> = ADDiu %vreg98<kill>, -1; CPURegs:%vreg6,%vreg98
	ST %vreg6, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg6
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#23: derived from LLVM BB %for.cond54
    Predecessors according to CFG: BB#8 BB#24
	%vreg37<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg37
	%vreg38<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg38
	%vreg39<def> = GT %vreg38<kill>, %vreg37<kill>; CPURegs:%vreg39,%vreg38,%vreg37
	JC %vreg39<kill>, <BB#25>; CPURegs:%vreg39
	Jmp <BB#24>
    Successors according to CFG: BB#24(124) BB#25(4)

BB#24: derived from LLVM BB %for.body56
    Predecessors according to CFG: BB#23
	%vreg61<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg61
	%vreg62<def> = ADDiu %vreg61, 1; CPURegs:%vreg62,%vreg61
	ST %vreg62<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg62
	%vreg63<def> = MovGR %ZERO, 2; CPURegs:%vreg63
	%vreg64<def> = SHL %vreg61, %vreg63; CPURegs:%vreg64,%vreg61,%vreg63
	%vreg65<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg65
	%vreg66<def> = ADDu %vreg65<kill>, %vreg64<kill>; CPURegs:%vreg66,%vreg65,%vreg64
	%vreg67<def> = LD %vreg66<kill>, 0; mem:LD4[%arrayidx58] CPURegs:%vreg67,%vreg66
	%vreg68<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg68
	%vreg69<def> = ADDiu %vreg68, 1; CPURegs:%vreg69,%vreg68
	ST %vreg69<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg69
	%vreg70<def> = SHL %vreg68, %vreg63; CPURegs:%vreg70,%vreg68,%vreg63
	%vreg71<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg71
	%vreg72<def,tied1> = MovIGL %vreg71<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg72,%vreg71
	%vreg73<def> = ADDu %vreg72<kill>, %vreg70<kill>; CPURegs:%vreg73,%vreg72,%vreg70
	ST %vreg67<kill>, %vreg73<kill>, 0; mem:ST4[%arrayidx60] CPURegs:%vreg67,%vreg73
	Jmp <BB#23>
    Successors according to CFG: BB#23

BB#25: derived from LLVM BB %for.end61
    Predecessors according to CFG: BB#23
	%vreg40<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg40
	ST %vreg40<kill>, <fi#10>, 0; mem:ST4[%i] CPURegs:%vreg40
	ST %vreg33, <fi#11>, 0; mem:ST4[%k62] CPURegs:%vreg33
    Successors according to CFG: BB#26

BB#26: derived from LLVM BB %for.cond63
    Predecessors according to CFG: BB#25 BB#27
	%vreg42<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg42
	%vreg43<def> = LD <fi#10>, 0; mem:LD4[%i] CPURegs:%vreg43
	%vreg44<def> = GT %vreg43<kill>, %vreg42<kill>; CPURegs:%vreg44,%vreg43,%vreg42
	JC %vreg44<kill>, <BB#28>; CPURegs:%vreg44
	Jmp <BB#27>
    Successors according to CFG: BB#27(124) BB#28(4)

BB#27: derived from LLVM BB %for.body65
    Predecessors according to CFG: BB#26
	%vreg48<def> = LD <fi#11>, 0; mem:LD4[%k62] CPURegs:%vreg48
	%vreg49<def> = ADDiu %vreg48, 1; CPURegs:%vreg49,%vreg48
	ST %vreg49<kill>, <fi#11>, 0; mem:ST4[%k62] CPURegs:%vreg49
	%vreg50<def> = MovGR %ZERO, 2; CPURegs:%vreg50
	%vreg51<def> = SHL %vreg48, %vreg50; CPURegs:%vreg51,%vreg48,%vreg50
	%vreg52<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg52
	%vreg53<def,tied1> = MovIGL %vreg52<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg53,%vreg52
	%vreg54<def> = ADDu %vreg53<kill>, %vreg51<kill>; CPURegs:%vreg54,%vreg53,%vreg51
	%vreg55<def> = LD %vreg54<kill>, 0; mem:LD4[%arrayidx67] CPURegs:%vreg55,%vreg54
	%vreg56<def> = LD <fi#10>, 0; mem:LD4[%i] CPURegs:%vreg56
	%vreg57<def> = ADDiu %vreg56, 1; CPURegs:%vreg57,%vreg56
	ST %vreg57<kill>, <fi#10>, 0; mem:ST4[%i] CPURegs:%vreg57
	%vreg58<def> = SHL %vreg56, %vreg50; CPURegs:%vreg58,%vreg56,%vreg50
	%vreg59<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg59
	%vreg60<def> = ADDu %vreg59<kill>, %vreg58<kill>; CPURegs:%vreg60,%vreg59,%vreg58
	ST %vreg55<kill>, %vreg60<kill>, 0; mem:ST4[%arrayidx69] CPURegs:%vreg55,%vreg60
	Jmp <BB#26>
    Successors according to CFG: BB#26

BB#28: derived from LLVM BB %for.end70
    Predecessors according to CFG: BB#26
	%vreg46<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg46
	%vreg47<def> = SHL %vreg46<kill>, %vreg13; CPURegs:%vreg47,%vreg46,%vreg13
	ST %vreg47<kill>, <fi#4>, 0; mem:ST4[%dist] CPURegs:%vreg47
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#29: derived from LLVM BB %while.end71
    Predecessors according to CFG: BB#3
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg20
    Successors according to CFG: BB#30

BB#30: derived from LLVM BB %return
    Predecessors according to CFG: BB#29 BB#1
	%vreg163<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg163
	%V0<def> = COPY %vreg163; CPURegs:%vreg163
	RetLR %V0<imp-use>

# End machine code for function merge_sort.


#####==========stderr_obj==========#####:
# Machine code for function merge_sort: SSA
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg8, %A1 in %vreg9

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg9<def> = COPY %A1; CPURegs:%vreg9
	%vreg8<def> = COPY %A0; CPURegs:%vreg8
	%vreg10<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg10
	ST %vreg8, <fi#1>, 0; mem:ST4[%Array.addr] CPURegs:%vreg8
	ST %vreg9, <fi#2>, 0; mem:ST4[%start.addr] CPURegs:%vreg9
	ST %vreg10, <fi#3>, 0; mem:ST4[%end.addr] CPURegs:%vreg10
	%vreg11<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg11
	%vreg12<def> = LE %vreg11<kill>, %vreg10; CPURegs:%vreg12,%vreg11,%vreg10
	JC %vreg12<kill>, <BB#2>; CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg162<def> = MovGR %ZERO, -1; CPURegs:%vreg162
	ST %vreg162<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg162
	Jmp <BB#30>
    Successors according to CFG: BB#30

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg13<def> = MovGR %ZERO, 1; CPURegs:%vreg13
	ST %vreg13, <fi#4>, 0; mem:ST4[%dist] CPURegs:%vreg13
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#28
	%vreg14<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg14
	%vreg15<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg15
	%vreg16<def> = SUBu %vreg15<kill>, %vreg14<kill>; CPURegs:%vreg16,%vreg15,%vreg14
	%vreg17<def> = ADDiu %vreg16<kill>, 1; CPURegs:%vreg17,%vreg16
	%vreg18<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg18
	%vreg19<def> = GE %vreg18<kill>, %vreg17<kill>; CPURegs:%vreg19,%vreg18,%vreg17
	JC %vreg19<kill>, <BB#29>; CPURegs:%vreg19
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#29(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	%vreg21<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg21
	ST %vreg21, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg21
	%vreg22<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg21, %vreg22<kill>; CPURegs:%vreg23,%vreg21,%vreg22
	%vreg24<def> = ADDiu %vreg23, -1; CPURegs:%vreg24,%vreg23
	ST %vreg24<kill>, <fi#6>, 0; mem:ST4[%a1_e] CPURegs:%vreg24
	ST %vreg23, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg23
	%vreg25<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg25
	%vreg26<def> = ADDu %vreg23, %vreg25<kill>; CPURegs:%vreg26,%vreg23,%vreg25
	%vreg27<def> = ADDiu %vreg26<kill>, -1; CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg28
	%vreg29<def> = LE %vreg27<kill>, %vreg28<kill>; CPURegs:%vreg29,%vreg27,%vreg28
	JC %vreg29<kill>, <BB#6>; CPURegs:%vreg29
	Jmp <BB#5>
    Successors according to CFG: BB#5(16) BB#6(16)

BB#5: derived from LLVM BB %cond.true
    Predecessors according to CFG: BB#4
	%vreg0<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg0
	Jmp <BB#7>
    Successors according to CFG: BB#7

BB#6: derived from LLVM BB %cond.false
    Predecessors according to CFG: BB#4
	%vreg30<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg30
	%vreg31<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg31
	%vreg32<def> = ADDu %vreg31<kill>, %vreg30<kill>; CPURegs:%vreg32,%vreg31,%vreg30
	%vreg1<def> = ADDiu %vreg32<kill>, -1; CPURegs:%vreg1,%vreg32
    Successors according to CFG: BB#7

BB#7: derived from LLVM BB %cond.end
    Predecessors according to CFG: BB#6 BB#5
	%vreg2<def> = PHI %vreg1, <BB#6>, %vreg0, <BB#5>; CPURegs:%vreg2,%vreg1,%vreg0
	ST %vreg2, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg2
	%vreg33<def> = MovGR %ZERO, 0; CPURegs:%vreg33
	ST %vreg33, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg33
    Successors according to CFG: BB#8

BB#8: derived from LLVM BB %while.cond10
    Predecessors according to CFG: BB#7 BB#20 BB#21
	%vreg34<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg34
	%vreg35<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg35
	%vreg36<def> = GT %vreg35<kill>, %vreg34<kill>; CPURegs:%vreg36,%vreg35,%vreg34
	JC %vreg36<kill>, <BB#23>; CPURegs:%vreg36
	Jmp <BB#9>
    Successors according to CFG: BB#9(124) BB#23(4)

BB#9: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#8 BB#14 BB#13
	%vreg75<def> = LD <fi#6>, 0; mem:LD4[%a1_e] CPURegs:%vreg75
	%vreg76<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg76
	%vreg77<def> = GT %vreg76<kill>, %vreg75<kill>; CPURegs:%vreg77,%vreg76,%vreg75
	JC %vreg77<kill>, <BB#11>; CPURegs:%vreg77
	Jmp <BB#10>
    Successors according to CFG: BB#10(16) BB#11(16)

BB#31: 
    Predecessors according to CFG: BB#10
	%vreg167<def> = MovGR %ZERO, 1; CPURegs:%vreg167
	Jmp <BB#11>
    Successors according to CFG: BB#11

BB#10: derived from LLVM BB %land.rhs
    Predecessors according to CFG: BB#9
	%vreg78<def> = LD <fi#8>, 0; mem:LD4[%a2_e] CPURegs:%vreg78
	%vreg79<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg79
	%vreg3<def> = LE %vreg79<kill>, %vreg78<kill>; CPURegs:%vreg3,%vreg79,%vreg78
	%vreg166<def> = MovGR %ZERO, 0; CPURegs:%vreg166
	JNC %vreg79<kill>, <BB#11>; CPURegs:%vreg79
	Jmp <BB#31>
    Successors according to CFG: BB#11 BB#31

BB#11: derived from LLVM BB %land.end
    Predecessors according to CFG: BB#9 BB#10 BB#31
	%vreg4<def> = PHI %vreg33, <BB#9>, %vreg166, <BB#10>, %vreg167, <BB#31>; CPURegs:%vreg4,%vreg33,%vreg166,%vreg167
	%vreg80<def> = EQI %vreg4, 0; CPURegs:%vreg80,%vreg4
	JC %vreg80<kill>, <BB#15>; CPURegs:%vreg80
	Jmp <BB#12>
    Successors according to CFG: BB#12(124) BB#15(4)

BB#12: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#11
	%vreg125<def> = MovGR %ZERO, 2; CPURegs:%vreg125
	%vreg126<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg126
	%vreg127<def> = SHL %vreg126<kill>, %vreg125; CPURegs:%vreg127,%vreg126,%vreg125
	%vreg128<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg128
	%vreg129<def> = SHL %vreg128<kill>, %vreg125; CPURegs:%vreg129,%vreg128,%vreg125
	%vreg130<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg130
	%vreg131<def> = ADDu %vreg130, %vreg129<kill>; CPURegs:%vreg131,%vreg130,%vreg129
	%vreg132<def> = ADDu %vreg130, %vreg127<kill>; CPURegs:%vreg132,%vreg130,%vreg127
	%vreg133<def> = LD %vreg132<kill>, 0; mem:LD4[%arrayidx15] CPURegs:%vreg133,%vreg132
	%vreg134<def> = LD %vreg131<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg134,%vreg131
	%vreg135<def> = LE %vreg134<kill>, %vreg133<kill>; CPURegs:%vreg135,%vreg134,%vreg133
	JC %vreg135<kill>, <BB#14>; CPURegs:%vreg135
	Jmp <BB#13>
    Successors according to CFG: BB#13(16) BB#14(16)

BB#13: derived from LLVM BB %if.then17
    Predecessors according to CFG: BB#12
	%vreg149<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg149
	%vreg150<def> = ADDiu %vreg149, 1; CPURegs:%vreg150,%vreg149
	ST %vreg150<kill>, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg150
	%vreg152<def> = SHL %vreg149, %vreg125; CPURegs:%vreg152,%vreg149,%vreg125
	%vreg153<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg153
	%vreg154<def> = ADDu %vreg153<kill>, %vreg152<kill>; CPURegs:%vreg154,%vreg153,%vreg152
	%vreg155<def> = LD %vreg154<kill>, 0; mem:LD4[%arrayidx18] CPURegs:%vreg155,%vreg154
	%vreg156<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg156
	%vreg157<def> = ADDiu %vreg156, 1; CPURegs:%vreg157,%vreg156
	ST %vreg157<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg157
	%vreg158<def> = SHL %vreg156, %vreg125; CPURegs:%vreg158,%vreg156,%vreg125
	%vreg159<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg159
	%vreg160<def,tied1> = MovIGL %vreg159<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg160,%vreg159
	%vreg161<def> = ADDu %vreg160<kill>, %vreg158<kill>; CPURegs:%vreg161,%vreg160,%vreg158
	ST %vreg155<kill>, %vreg161<kill>, 0; mem:ST4[%arrayidx20] CPURegs:%vreg155,%vreg161
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#14: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#12
	%vreg136<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg136
	%vreg137<def> = ADDiu %vreg136, 1; CPURegs:%vreg137,%vreg136
	ST %vreg137<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg137
	%vreg139<def> = SHL %vreg136, %vreg125; CPURegs:%vreg139,%vreg136,%vreg125
	%vreg140<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg140
	%vreg141<def> = ADDu %vreg140<kill>, %vreg139<kill>; CPURegs:%vreg141,%vreg140,%vreg139
	%vreg142<def> = LD %vreg141<kill>, 0; mem:LD4[%arrayidx22] CPURegs:%vreg142,%vreg141
	%vreg143<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg143
	%vreg144<def> = ADDiu %vreg143, 1; CPURegs:%vreg144,%vreg143
	ST %vreg144<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg144
	%vreg145<def> = SHL %vreg143, %vreg125; CPURegs:%vreg145,%vreg143,%vreg125
	%vreg146<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg146
	%vreg147<def,tied1> = MovIGL %vreg146<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg147,%vreg146
	%vreg148<def> = ADDu %vreg147<kill>, %vreg145<kill>; CPURegs:%vreg148,%vreg147,%vreg145
	ST %vreg142<kill>, %vreg148<kill>, 0; mem:ST4[%arrayidx24] CPURegs:%vreg142,%vreg148
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#15: derived from LLVM BB %for.cond26
    Predecessors according to CFG: BB#11 BB#16
	%vreg81<def> = LD <fi#6>, 0; mem:LD4[%a1_e] CPURegs:%vreg81
	%vreg82<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg82
	%vreg83<def> = GT %vreg82<kill>, %vreg81<kill>; CPURegs:%vreg83,%vreg82,%vreg81
	JC %vreg83<kill>, <BB#17>; CPURegs:%vreg83
	Jmp <BB#16>
    Successors according to CFG: BB#16(124) BB#17(4)

BB#16: derived from LLVM BB %for.body28
    Predecessors according to CFG: BB#15
	%vreg112<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg112
	%vreg113<def> = ADDiu %vreg112, 1; CPURegs:%vreg113,%vreg112
	ST %vreg113<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg113
	%vreg114<def> = MovGR %ZERO, 2; CPURegs:%vreg114
	%vreg115<def> = SHL %vreg112, %vreg114; CPURegs:%vreg115,%vreg112,%vreg114
	%vreg116<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg116
	%vreg117<def> = ADDu %vreg116<kill>, %vreg115<kill>; CPURegs:%vreg117,%vreg116,%vreg115
	%vreg118<def> = LD %vreg117<kill>, 0; mem:LD4[%arrayidx30] CPURegs:%vreg118,%vreg117
	%vreg119<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg119
	%vreg120<def> = ADDiu %vreg119, 1; CPURegs:%vreg120,%vreg119
	ST %vreg120<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg120
	%vreg121<def> = SHL %vreg119, %vreg114; CPURegs:%vreg121,%vreg119,%vreg114
	%vreg122<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg122
	%vreg123<def,tied1> = MovIGL %vreg122<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg123,%vreg122
	%vreg124<def> = ADDu %vreg123<kill>, %vreg121<kill>; CPURegs:%vreg124,%vreg123,%vreg121
	ST %vreg118<kill>, %vreg124<kill>, 0; mem:ST4[%arrayidx32] CPURegs:%vreg118,%vreg124
	Jmp <BB#15>
    Successors according to CFG: BB#15

BB#17: derived from LLVM BB %for.cond34
    Predecessors according to CFG: BB#15 BB#18
	%vreg84<def> = LD <fi#8>, 0; mem:LD4[%a2_e] CPURegs:%vreg84
	%vreg85<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg85
	%vreg86<def> = GT %vreg85<kill>, %vreg84<kill>; CPURegs:%vreg86,%vreg85,%vreg84
	JC %vreg86<kill>, <BB#19>; CPURegs:%vreg86
	Jmp <BB#18>
    Successors according to CFG: BB#18(124) BB#19(4)

BB#18: derived from LLVM BB %for.body36
    Predecessors according to CFG: BB#17
	%vreg99<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg99
	%vreg100<def> = ADDiu %vreg99, 1; CPURegs:%vreg100,%vreg99
	ST %vreg100<kill>, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg100
	%vreg101<def> = MovGR %ZERO, 2; CPURegs:%vreg101
	%vreg102<def> = SHL %vreg99, %vreg101; CPURegs:%vreg102,%vreg99,%vreg101
	%vreg103<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg103
	%vreg104<def> = ADDu %vreg103<kill>, %vreg102<kill>; CPURegs:%vreg104,%vreg103,%vreg102
	%vreg105<def> = LD %vreg104<kill>, 0; mem:LD4[%arrayidx38] CPURegs:%vreg105,%vreg104
	%vreg106<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg106
	%vreg107<def> = ADDiu %vreg106, 1; CPURegs:%vreg107,%vreg106
	ST %vreg107<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg107
	%vreg108<def> = SHL %vreg106, %vreg101; CPURegs:%vreg108,%vreg106,%vreg101
	%vreg109<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg109
	%vreg110<def,tied1> = MovIGL %vreg109<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg110,%vreg109
	%vreg111<def> = ADDu %vreg110<kill>, %vreg108<kill>; CPURegs:%vreg111,%vreg110,%vreg108
	ST %vreg105<kill>, %vreg111<kill>, 0; mem:ST4[%arrayidx40] CPURegs:%vreg105,%vreg111
	Jmp <BB#17>
    Successors according to CFG: BB#17

BB#19: derived from LLVM BB %for.end41
    Predecessors according to CFG: BB#17
	%vreg87<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg87
	ST %vreg87, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg87
	%vreg88<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg88
	%vreg89<def> = ADDu %vreg87, %vreg88<kill>; CPURegs:%vreg89,%vreg87,%vreg88
	%vreg90<def> = ADDiu %vreg89, -1; CPURegs:%vreg90,%vreg89
	ST %vreg90<kill>, <fi#6>, 0; mem:ST4[%a1_e] CPURegs:%vreg90
	ST %vreg89, <fi#7>, 0; mem:ST4[%a2_i] CPURegs:%vreg89
	%vreg91<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg91
	%vreg92<def> = ADDu %vreg89, %vreg91<kill>; CPURegs:%vreg92,%vreg89,%vreg91
	%vreg93<def> = ADDiu %vreg92<kill>, -1; CPURegs:%vreg93,%vreg92
	%vreg94<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg94
	%vreg95<def> = LE %vreg93<kill>, %vreg94<kill>; CPURegs:%vreg95,%vreg93,%vreg94
	JC %vreg95<kill>, <BB#21>; CPURegs:%vreg95
	Jmp <BB#20>
    Successors according to CFG: BB#20(16) BB#21(16)

BB#20: derived from LLVM BB %cond.true48
    Predecessors according to CFG: BB#19
	%vreg5<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg5
	ST %vreg5, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg5
	Jmp <BB#8>
    Successors according to CFG: BB#8(16)

BB#21: derived from LLVM BB %cond.false49
    Predecessors according to CFG: BB#19
	%vreg96<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg96
	%vreg97<def> = LD <fi#7>, 0; mem:LD4[%a2_i] CPURegs:%vreg97
	%vreg98<def> = ADDu %vreg97<kill>, %vreg96<kill>; CPURegs:%vreg98,%vreg97,%vreg96
	%vreg6<def> = ADDiu %vreg98<kill>, -1; CPURegs:%vreg6,%vreg98
	ST %vreg6, <fi#8>, 0; mem:ST4[%a2_e] CPURegs:%vreg6
	Jmp <BB#8>
    Successors according to CFG: BB#8

BB#23: derived from LLVM BB %for.cond54
    Predecessors according to CFG: BB#8 BB#24
	%vreg37<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg37
	%vreg38<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg38
	%vreg39<def> = GT %vreg38<kill>, %vreg37<kill>; CPURegs:%vreg39,%vreg38,%vreg37
	JC %vreg39<kill>, <BB#25>; CPURegs:%vreg39
	Jmp <BB#24>
    Successors according to CFG: BB#24(124) BB#25(4)

BB#24: derived from LLVM BB %for.body56
    Predecessors according to CFG: BB#23
	%vreg61<def> = LD <fi#5>, 0; mem:LD4[%a1_i] CPURegs:%vreg61
	%vreg62<def> = ADDiu %vreg61, 1; CPURegs:%vreg62,%vreg61
	ST %vreg62<kill>, <fi#5>, 0; mem:ST4[%a1_i] CPURegs:%vreg62
	%vreg63<def> = MovGR %ZERO, 2; CPURegs:%vreg63
	%vreg64<def> = SHL %vreg61, %vreg63; CPURegs:%vreg64,%vreg61,%vreg63
	%vreg65<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg65
	%vreg66<def> = ADDu %vreg65<kill>, %vreg64<kill>; CPURegs:%vreg66,%vreg65,%vreg64
	%vreg67<def> = LD %vreg66<kill>, 0; mem:LD4[%arrayidx58] CPURegs:%vreg67,%vreg66
	%vreg68<def> = LD <fi#9>, 0; mem:LD4[%k] CPURegs:%vreg68
	%vreg69<def> = ADDiu %vreg68, 1; CPURegs:%vreg69,%vreg68
	ST %vreg69<kill>, <fi#9>, 0; mem:ST4[%k] CPURegs:%vreg69
	%vreg70<def> = SHL %vreg68, %vreg63; CPURegs:%vreg70,%vreg68,%vreg63
	%vreg71<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg71
	%vreg72<def,tied1> = MovIGL %vreg71<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg72,%vreg71
	%vreg73<def> = ADDu %vreg72<kill>, %vreg70<kill>; CPURegs:%vreg73,%vreg72,%vreg70
	ST %vreg67<kill>, %vreg73<kill>, 0; mem:ST4[%arrayidx60] CPURegs:%vreg67,%vreg73
	Jmp <BB#23>
    Successors according to CFG: BB#23

BB#25: derived from LLVM BB %for.end61
    Predecessors according to CFG: BB#23
	%vreg40<def> = LD <fi#2>, 0; mem:LD4[%start.addr] CPURegs:%vreg40
	ST %vreg40<kill>, <fi#10>, 0; mem:ST4[%i] CPURegs:%vreg40
	ST %vreg33, <fi#11>, 0; mem:ST4[%k62] CPURegs:%vreg33
    Successors according to CFG: BB#26

BB#26: derived from LLVM BB %for.cond63
    Predecessors according to CFG: BB#25 BB#27
	%vreg42<def> = LD <fi#3>, 0; mem:LD4[%end.addr] CPURegs:%vreg42
	%vreg43<def> = LD <fi#10>, 0; mem:LD4[%i] CPURegs:%vreg43
	%vreg44<def> = GT %vreg43<kill>, %vreg42<kill>; CPURegs:%vreg44,%vreg43,%vreg42
	JC %vreg44<kill>, <BB#28>; CPURegs:%vreg44
	Jmp <BB#27>
    Successors according to CFG: BB#27(124) BB#28(4)

BB#27: derived from LLVM BB %for.body65
    Predecessors according to CFG: BB#26
	%vreg48<def> = LD <fi#11>, 0; mem:LD4[%k62] CPURegs:%vreg48
	%vreg49<def> = ADDiu %vreg48, 1; CPURegs:%vreg49,%vreg48
	ST %vreg49<kill>, <fi#11>, 0; mem:ST4[%k62] CPURegs:%vreg49
	%vreg50<def> = MovGR %ZERO, 2; CPURegs:%vreg50
	%vreg51<def> = SHL %vreg48, %vreg50; CPURegs:%vreg51,%vreg48,%vreg50
	%vreg52<def> = MovIGH %ZERO, <ga:@t_array>[TF=3]; CPURegs:%vreg52
	%vreg53<def,tied1> = MovIGL %vreg52<tied0>, <ga:@t_array>[TF=4]; CPURegs:%vreg53,%vreg52
	%vreg54<def> = ADDu %vreg53<kill>, %vreg51<kill>; CPURegs:%vreg54,%vreg53,%vreg51
	%vreg55<def> = LD %vreg54<kill>, 0; mem:LD4[%arrayidx67] CPURegs:%vreg55,%vreg54
	%vreg56<def> = LD <fi#10>, 0; mem:LD4[%i] CPURegs:%vreg56
	%vreg57<def> = ADDiu %vreg56, 1; CPURegs:%vreg57,%vreg56
	ST %vreg57<kill>, <fi#10>, 0; mem:ST4[%i] CPURegs:%vreg57
	%vreg58<def> = SHL %vreg56, %vreg50; CPURegs:%vreg58,%vreg56,%vreg50
	%vreg59<def> = LD <fi#1>, 0; mem:LD4[%Array.addr] CPURegs:%vreg59
	%vreg60<def> = ADDu %vreg59<kill>, %vreg58<kill>; CPURegs:%vreg60,%vreg59,%vreg58
	ST %vreg55<kill>, %vreg60<kill>, 0; mem:ST4[%arrayidx69] CPURegs:%vreg55,%vreg60
	Jmp <BB#26>
    Successors according to CFG: BB#26

BB#28: derived from LLVM BB %for.end70
    Predecessors according to CFG: BB#26
	%vreg46<def> = LD <fi#4>, 0; mem:LD4[%dist] CPURegs:%vreg46
	%vreg47<def> = SHL %vreg46<kill>, %vreg13; CPURegs:%vreg47,%vreg46,%vreg13
	ST %vreg47<kill>, <fi#4>, 0; mem:ST4[%dist] CPURegs:%vreg47
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#29: derived from LLVM BB %while.end71
    Predecessors according to CFG: BB#3
	%vreg20<def> = MovGR %ZERO, 0; CPURegs:%vreg20
	ST %vreg20<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg20
    Successors according to CFG: BB#30

BB#30: derived from LLVM BB %return
    Predecessors according to CFG: BB#29 BB#1
	%vreg163<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg163
	%V0<def> = COPY %vreg163; CPURegs:%vreg163
	RetLR %V0<imp-use>

# End machine code for function merge_sort.

