
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=20, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.g_Array>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.g_Array>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = LD %vreg2, 16; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+16] CPURegs:%vreg3,%vreg2
	ST %vreg3<kill>, <fi#1>, 16; mem:ST4[%0+16] CPURegs:%vreg3
	%vreg4<def> = LD %vreg2, 12; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+12] CPURegs:%vreg4,%vreg2
	ST %vreg4<kill>, <fi#1>, 12; mem:ST4[%0+12] CPURegs:%vreg4
	%vreg5<def> = LD %vreg2, 8; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+8] CPURegs:%vreg5,%vreg2
	ST %vreg5<kill>, <fi#1>, 8; mem:ST4[%0+8] CPURegs:%vreg5
	%vreg6<def> = LD %vreg2, 4; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+4] CPURegs:%vreg6,%vreg2
	ST %vreg6<kill>, <fi#1>, 4; mem:ST4[%0+4] CPURegs:%vreg6
	%vreg7<def> = LD %vreg2, 0; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)] CPURegs:%vreg7,%vreg2
	ST %vreg7<kill>, <fi#1>, 0; mem:ST4[%0] CPURegs:%vreg7
	ST %vreg0, <fi#2>, 0; mem:ST4[%sum] CPURegs:%vreg0
	ST %vreg0, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg8<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg8
	%vreg9<def> = LTI %vreg8<kill>, 5; CPURegs:%vreg9,%vreg8
	JNC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg12
	%vreg13<def> = SHL %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LEA <fi#1>, 0; CPURegs:%vreg14
	%vreg15<def> = ADDu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%sum] CPURegs:%vreg17
	%vreg18<def> = ADDu %vreg17<kill>, %vreg16<kill>; CPURegs:%vreg18,%vreg17,%vreg16
	ST %vreg18<kill>, <fi#2>, 0; mem:ST4[%sum] CPURegs:%vreg18
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg19
	%vreg20<def> = ADDiu %vreg19<kill>, 1; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg20
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%sum] CPURegs:%vreg10
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=20, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.g_Array>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.g_Array>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = LD %vreg2, 16; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+16] CPURegs:%vreg3,%vreg2
	ST %vreg3<kill>, <fi#1>, 16; mem:ST4[%0+16] CPURegs:%vreg3
	%vreg4<def> = LD %vreg2, 12; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+12] CPURegs:%vreg4,%vreg2
	ST %vreg4<kill>, <fi#1>, 12; mem:ST4[%0+12] CPURegs:%vreg4
	%vreg5<def> = LD %vreg2, 8; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+8] CPURegs:%vreg5,%vreg2
	ST %vreg5<kill>, <fi#1>, 8; mem:ST4[%0+8] CPURegs:%vreg5
	%vreg6<def> = LD %vreg2, 4; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)+4] CPURegs:%vreg6,%vreg2
	ST %vreg6<kill>, <fi#1>, 4; mem:ST4[%0+4] CPURegs:%vreg6
	%vreg7<def> = LD %vreg2, 0; mem:LD4[bitcast ([5 x i32]* @main.g_Array to i8*)] CPURegs:%vreg7,%vreg2
	ST %vreg7<kill>, <fi#1>, 0; mem:ST4[%0] CPURegs:%vreg7
	ST %vreg0, <fi#2>, 0; mem:ST4[%sum] CPURegs:%vreg0
	ST %vreg0, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg8<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg8
	%vreg9<def> = LTI %vreg8<kill>, 5; CPURegs:%vreg9,%vreg8
	JNC %vreg9<kill>, <BB#4>; CPURegs:%vreg9
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg11<def> = MovGR %ZERO, 2; CPURegs:%vreg11
	%vreg12<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg12
	%vreg13<def> = SHL %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	%vreg14<def> = LEA <fi#1>, 0; CPURegs:%vreg14
	%vreg15<def> = ADDu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD %vreg15<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg16,%vreg15
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%sum] CPURegs:%vreg17
	%vreg18<def> = ADDu %vreg17<kill>, %vreg16<kill>; CPURegs:%vreg18,%vreg17,%vreg16
	ST %vreg18<kill>, <fi#2>, 0; mem:ST4[%sum] CPURegs:%vreg18
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%i] CPURegs:%vreg19
	%vreg20<def> = ADDiu %vreg19<kill>, 1; CPURegs:%vreg20,%vreg19
	ST %vreg20<kill>, <fi#3>, 0; mem:ST4[%i] CPURegs:%vreg20
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%sum] CPURegs:%vreg10
	%V0<def> = COPY %vreg10; CPURegs:%vreg10
	RetLR %V0<imp-use>

# End machine code for function main.

