
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%px.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%ph.addr] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 16; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg5<def> = LD <fi#0>, 0; mem:LD4[%px.addr] CPURegs:%vreg5
	%vreg6<def> = ADDiu %vreg5, 4; CPURegs:%vreg6,%vreg5
	%vreg7<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg7
	ST %vreg6<kill>, <fi#0>, 0; mem:ST4[%px.addr] CPURegs:%vreg6
	ST %vreg7<kill>, %vreg5, 0; mem:ST4[%2] CPURegs:%vreg7,%vreg5
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%ph.addr] CPURegs:%vreg8
	%vreg9<def> = ADDiu %vreg8, 4; CPURegs:%vreg9,%vreg8
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg10
	ST %vreg9<kill>, <fi#1>, 0; mem:ST4[%ph.addr] CPURegs:%vreg9
	ST %vreg10<kill>, %vreg8, 0; mem:ST4[%4] CPURegs:%vreg10,%vreg8
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg11<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg11
	%vreg12<def> = ADDiu %vreg11<kill>, 1; CPURegs:%vreg12,%vreg11
	ST %vreg12<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg2,%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%px] CPURegs:%vreg2
	%vreg3<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = ADDiu %vreg4, 60; CPURegs:%vreg5,%vreg4
	ST %vreg5<kill>, <fi#4>, 0; mem:ST4[%ph] CPURegs:%vreg5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%A1<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	ST %vreg0, <fi#1>, 0; mem:ST4[%y] CPURegs:%vreg0
	ST %vreg0, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = LTI %vreg6<kill>, 16; CPURegs:%vreg7,%vreg6
	JNC %vreg7<kill>, <BB#4>; CPURegs:%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%px] CPURegs:%vreg9
	%vreg10<def> = ADDiu %vreg9, 4; CPURegs:%vreg10,%vreg9
	ST %vreg10<kill>, <fi#3>, 0; mem:ST4[%px] CPURegs:%vreg10
	%vreg11<def> = LD %vreg9, 0; mem:LD4[%1] CPURegs:%vreg11,%vreg9
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%ph] CPURegs:%vreg12
	%vreg13<def> = ADDiu %vreg12, -4; CPURegs:%vreg13,%vreg12
	ST %vreg13<kill>, <fi#4>, 0; mem:ST4[%ph] CPURegs:%vreg13
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%3] CPURegs:%vreg14,%vreg12
	%vreg15<def> = MUL32 %vreg11<kill>, %vreg14<kill>; CPURegs:%vreg15,%vreg11,%vreg14
	%vreg16<def> = LD <fi#1>, 0; mem:LD4[%y] CPURegs:%vreg16
	%vreg17<def> = ADDu %vreg16<kill>, %vreg15<kill>; CPURegs:%vreg17,%vreg16,%vreg15
	ST %vreg17<kill>, <fi#1>, 0; mem:ST4[%y] CPURegs:%vreg17
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg18<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDiu %vreg18<kill>, 1; CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%y] CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function pin_down: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%px.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%ph.addr] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 16; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#4>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg5<def> = LD <fi#0>, 0; mem:LD4[%px.addr] CPURegs:%vreg5
	%vreg6<def> = ADDiu %vreg5, 4; CPURegs:%vreg6,%vreg5
	%vreg7<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg7
	ST %vreg6<kill>, <fi#0>, 0; mem:ST4[%px.addr] CPURegs:%vreg6
	ST %vreg7<kill>, %vreg5, 0; mem:ST4[%2] CPURegs:%vreg7,%vreg5
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%ph.addr] CPURegs:%vreg8
	%vreg9<def> = ADDiu %vreg8, 4; CPURegs:%vreg9,%vreg8
	%vreg10<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg10
	ST %vreg9<kill>, <fi#1>, 0; mem:ST4[%ph.addr] CPURegs:%vreg9
	ST %vreg10<kill>, %vreg8, 0; mem:ST4[%4] CPURegs:%vreg10,%vreg8
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg11<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg11
	%vreg12<def> = ADDiu %vreg11<kill>, 1; CPURegs:%vreg12,%vreg11
	ST %vreg12<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg12
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	RetLR

# End machine code for function pin_down.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <ga:@main.x>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@main.x>[TF=4]; CPURegs:%vreg2,%vreg1
	ST %vreg2, <fi#3>, 0; mem:ST4[%px] CPURegs:%vreg2
	%vreg3<def> = MovIGH %ZERO, <ga:@main.h>[TF=3]; CPURegs:%vreg3
	%vreg4<def,tied1> = MovIGL %vreg3<tied0>, <ga:@main.h>[TF=4]; CPURegs:%vreg4,%vreg3
	%vreg5<def> = ADDiu %vreg4, 60; CPURegs:%vreg5,%vreg4
	ST %vreg5<kill>, <fi#4>, 0; mem:ST4[%ph] CPURegs:%vreg5
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%A1<def> = COPY %vreg4; CPURegs:%vreg4
	CALL <ga:@pin_down>, %A0, %A1, <regmask>, %SP<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	ST %vreg0, <fi#1>, 0; mem:ST4[%y] CPURegs:%vreg0
	ST %vreg0, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = LTI %vreg6<kill>, 16; CPURegs:%vreg7,%vreg6
	JNC %vreg7<kill>, <BB#4>; CPURegs:%vreg7
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#4(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%px] CPURegs:%vreg9
	%vreg10<def> = ADDiu %vreg9, 4; CPURegs:%vreg10,%vreg9
	ST %vreg10<kill>, <fi#3>, 0; mem:ST4[%px] CPURegs:%vreg10
	%vreg11<def> = LD %vreg9, 0; mem:LD4[%1] CPURegs:%vreg11,%vreg9
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%ph] CPURegs:%vreg12
	%vreg13<def> = ADDiu %vreg12, -4; CPURegs:%vreg13,%vreg12
	ST %vreg13<kill>, <fi#4>, 0; mem:ST4[%ph] CPURegs:%vreg13
	%vreg14<def> = LD %vreg12, 0; mem:LD4[%3] CPURegs:%vreg14,%vreg12
	%vreg15<def> = MUL32 %vreg11<kill>, %vreg14<kill>; CPURegs:%vreg15,%vreg11,%vreg14
	%vreg16<def> = LD <fi#1>, 0; mem:LD4[%y] CPURegs:%vreg16
	%vreg17<def> = ADDu %vreg16<kill>, %vreg15<kill>; CPURegs:%vreg17,%vreg16,%vreg15
	ST %vreg17<kill>, <fi#1>, 0; mem:ST4[%y] CPURegs:%vreg17
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg18<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg18
	%vreg19<def> = ADDiu %vreg18<kill>, 1; CPURegs:%vreg19,%vreg18
	ST %vreg19<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg19
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1
	%vreg8<def> = LD <fi#1>, 0; mem:LD4[%y] CPURegs:%vreg8
	%V0<def> = COPY %vreg8; CPURegs:%vreg8
	RetLR %V0<imp-use>

# End machine code for function main.

