
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	%A1<def> = COPY %vreg2; CPURegs:%vreg2
	CALL <ga:@mul_sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = MovGR %ZERO, -3; CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, -4; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@mul_sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	%vreg7<def> = ADDu %vreg3, %vreg6; CPURegs:%vreg7,%vreg3,%vreg6
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function mul_sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%x1.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%x2.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#0>, 0; mem:LD4[%x1.addr] CPURegs:%vreg2
	%vreg3<def> = MUL32 %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	%vreg4<def> = MovIGH %ZERO, <ga:@mul_sum.sum>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@mul_sum.sum>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = LD %vreg5, 0; mem:LD4[@mul_sum.sum] CPURegs:%vreg6,%vreg5
	%vreg7<def> = ADDu %vreg6<kill>, %vreg3<kill>; CPURegs:%vreg7,%vreg6,%vreg3
	ST %vreg7, %vreg5, 0; mem:ST4[@mul_sum.sum] CPURegs:%vreg7,%vreg5
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function mul_sum.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = MovGR %ZERO, 1; CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	%A1<def> = COPY %vreg2; CPURegs:%vreg2
	CALL <ga:@mul_sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = MovGR %ZERO, -3; CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, -4; CPURegs:%vreg5
	%A0<def> = COPY %vreg4; CPURegs:%vreg4
	%A1<def> = COPY %vreg5; CPURegs:%vreg5
	CALL <ga:@mul_sum>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %V0; CPURegs:%vreg6
	%vreg7<def> = ADDu %vreg3, %vreg6; CPURegs:%vreg7,%vreg3,%vreg6
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.

# Machine code for function mul_sum: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%x1.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%x2.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#0>, 0; mem:LD4[%x1.addr] CPURegs:%vreg2
	%vreg3<def> = MUL32 %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	%vreg4<def> = MovIGH %ZERO, <ga:@mul_sum.sum>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <ga:@mul_sum.sum>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = LD %vreg5, 0; mem:LD4[@mul_sum.sum] CPURegs:%vreg6,%vreg5
	%vreg7<def> = ADDu %vreg6<kill>, %vreg3<kill>; CPURegs:%vreg7,%vreg6,%vreg3
	ST %vreg7, %vreg5, 0; mem:ST4[@mul_sum.sum] CPURegs:%vreg7,%vreg5
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function mul_sum.

