
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function testb: SSA
Frame Objects:
  fi#-4: size=4, align=4, fixed, at location [SP+20]
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-4>, 0; mem:LD4[FixedStack-4] CPURegs:%vreg2
	%vreg3<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg3
	%vreg4<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg4
	%vreg5<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg5
	ST %vreg0, <fi#0>, 0; mem:ST4[%gA1.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%sA1.addr] CPURegs:%vreg1
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%pgA2.addr] CPURegs:%vreg5
	ST %vreg4<kill>, <fi#3>, 0; mem:ST4[%psA2.addr] CPURegs:%vreg4
	ST %vreg3<kill>, <fi#4>, 0; mem:ST4[%gB1.addr] CPURegs:%vreg3
	ST %vreg2<kill>, <fi#5>, 0; mem:ST4[%pgB2.addr] CPURegs:%vreg2
	%vreg6<def> = MovGR %ZERO, 10; CPURegs:%vreg6
	ST %vreg6<kill>, <fi#6>, 0; mem:ST4[%localb] CPURegs:%vreg6
	%vreg7<def> = LD <fi#2>, 0; mem:LD4[%pgA2.addr] CPURegs:%vreg7
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%gA1.addr] CPURegs:%vreg8
	ST %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%1] CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%psA2.addr] CPURegs:%vreg9
	%vreg10<def> = LD <fi#1>, 0; mem:LD4[%sA1.addr] CPURegs:%vreg10
	ST %vreg10<kill>, %vreg9<kill>, 0; mem:ST4[%3] CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD <fi#5>, 0; mem:LD4[%pgB2.addr] CPURegs:%vreg11
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%gB1.addr] CPURegs:%vreg12
	ST %vreg12<kill>, %vreg11<kill>, 0; mem:ST4[%5] CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD <fi#2>, 0; mem:LD4[%pgA2.addr] CPURegs:%vreg13
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%7] CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD <fi#0>, 0; mem:LD4[%gA1.addr] CPURegs:%vreg15
	%vreg16<def> = ADDu %vreg15<kill>, %vreg14<kill>; CPURegs:%vreg16,%vreg15,%vreg14
	%vreg17<def> = LD <fi#1>, 0; mem:LD4[%sA1.addr] CPURegs:%vreg17
	%vreg18<def> = ADDu %vreg16<kill>, %vreg17<kill>; CPURegs:%vreg18,%vreg16,%vreg17
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%psA2.addr] CPURegs:%vreg19
	%vreg20<def> = LD %vreg19<kill>, 0; mem:LD4[%10] CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg18<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg18,%vreg20
	%vreg22<def> = MovIGH %ZERO, <ga:@init_gB>[TF=3]; CPURegs:%vreg22
	%vreg23<def,tied1> = MovIGL %vreg22<tied0>, <ga:@init_gB>[TF=4]; CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg23<kill>, 0; mem:LD4[@init_gB] CPURegs:%vreg24,%vreg23
	%vreg25<def> = ADDu %vreg21<kill>, %vreg24<kill>; CPURegs:%vreg25,%vreg21,%vreg24
	%vreg26<def> = MovIGH %ZERO, <ga:@uninit_gB>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@uninit_gB>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD %vreg27<kill>, 0; mem:LD4[@uninit_gB] CPURegs:%vreg28,%vreg27
	%vreg29<def> = ADDu %vreg25<kill>, %vreg28<kill>; CPURegs:%vreg29,%vreg25,%vreg28
	%vreg30<def> = LD <fi#6>, 0; mem:LD4[%localb] CPURegs:%vreg30
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	ST %vreg31<kill>, <fi#6>, 0; mem:ST4[%localb] CPURegs:%vreg31
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg32<def> = LEA <fi#6>, 0; CPURegs:%vreg32
	%A0<def> = COPY %vreg32; CPURegs:%vreg32
	CALL <ga:@neg>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg34<def> = LD <fi#6>, 0; mem:LD4[%localb] CPURegs:%vreg34
	%V0<def> = COPY %vreg34; CPURegs:%vreg34
	RetLR %V0<imp-use>

# End machine code for function testb.

# Machine code for function neg: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%x.addr] CPURegs:%vreg0
	%vreg1<def> = LD %vreg0, 0; mem:LD4[%0] CPURegs:%vreg1,%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	%vreg3<def> = SUBu %vreg2, %vreg1<kill>; CPURegs:%vreg3,%vreg2,%vreg1
	ST %vreg3<kill>, %vreg0, 0; mem:ST4[%2] CPURegs:%vreg3,%vreg0
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function neg.


#####==========stderr_obj==========#####:
# Machine code for function testb: SSA
Frame Objects:
  fi#-4: size=4, align=4, fixed, at location [SP+20]
  fi#-3: size=4, align=8, fixed, at location [SP+16]
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-4>, 0; mem:LD4[FixedStack-4] CPURegs:%vreg2
	%vreg3<def> = LD <fi#-3>, 0; mem:LD4[FixedStack-3](align=8) CPURegs:%vreg3
	%vreg4<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg4
	%vreg5<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg5
	ST %vreg0, <fi#0>, 0; mem:ST4[%gA1.addr] CPURegs:%vreg0
	ST %vreg1, <fi#1>, 0; mem:ST4[%sA1.addr] CPURegs:%vreg1
	ST %vreg5<kill>, <fi#2>, 0; mem:ST4[%pgA2.addr] CPURegs:%vreg5
	ST %vreg4<kill>, <fi#3>, 0; mem:ST4[%psA2.addr] CPURegs:%vreg4
	ST %vreg3<kill>, <fi#4>, 0; mem:ST4[%gB1.addr] CPURegs:%vreg3
	ST %vreg2<kill>, <fi#5>, 0; mem:ST4[%pgB2.addr] CPURegs:%vreg2
	%vreg6<def> = MovGR %ZERO, 10; CPURegs:%vreg6
	ST %vreg6<kill>, <fi#6>, 0; mem:ST4[%localb] CPURegs:%vreg6
	%vreg7<def> = LD <fi#2>, 0; mem:LD4[%pgA2.addr] CPURegs:%vreg7
	%vreg8<def> = LD <fi#0>, 0; mem:LD4[%gA1.addr] CPURegs:%vreg8
	ST %vreg8<kill>, %vreg7<kill>, 0; mem:ST4[%1] CPURegs:%vreg8,%vreg7
	%vreg9<def> = LD <fi#3>, 0; mem:LD4[%psA2.addr] CPURegs:%vreg9
	%vreg10<def> = LD <fi#1>, 0; mem:LD4[%sA1.addr] CPURegs:%vreg10
	ST %vreg10<kill>, %vreg9<kill>, 0; mem:ST4[%3] CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD <fi#5>, 0; mem:LD4[%pgB2.addr] CPURegs:%vreg11
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%gB1.addr] CPURegs:%vreg12
	ST %vreg12<kill>, %vreg11<kill>, 0; mem:ST4[%5] CPURegs:%vreg12,%vreg11
	%vreg13<def> = LD <fi#2>, 0; mem:LD4[%pgA2.addr] CPURegs:%vreg13
	%vreg14<def> = LD %vreg13<kill>, 0; mem:LD4[%7] CPURegs:%vreg14,%vreg13
	%vreg15<def> = LD <fi#0>, 0; mem:LD4[%gA1.addr] CPURegs:%vreg15
	%vreg16<def> = ADDu %vreg15<kill>, %vreg14<kill>; CPURegs:%vreg16,%vreg15,%vreg14
	%vreg17<def> = LD <fi#1>, 0; mem:LD4[%sA1.addr] CPURegs:%vreg17
	%vreg18<def> = ADDu %vreg16<kill>, %vreg17<kill>; CPURegs:%vreg18,%vreg16,%vreg17
	%vreg19<def> = LD <fi#3>, 0; mem:LD4[%psA2.addr] CPURegs:%vreg19
	%vreg20<def> = LD %vreg19<kill>, 0; mem:LD4[%10] CPURegs:%vreg20,%vreg19
	%vreg21<def> = ADDu %vreg18<kill>, %vreg20<kill>; CPURegs:%vreg21,%vreg18,%vreg20
	%vreg22<def> = MovIGH %ZERO, <ga:@init_gB>[TF=3]; CPURegs:%vreg22
	%vreg23<def,tied1> = MovIGL %vreg22<tied0>, <ga:@init_gB>[TF=4]; CPURegs:%vreg23,%vreg22
	%vreg24<def> = LD %vreg23<kill>, 0; mem:LD4[@init_gB] CPURegs:%vreg24,%vreg23
	%vreg25<def> = ADDu %vreg21<kill>, %vreg24<kill>; CPURegs:%vreg25,%vreg21,%vreg24
	%vreg26<def> = MovIGH %ZERO, <ga:@uninit_gB>[TF=3]; CPURegs:%vreg26
	%vreg27<def,tied1> = MovIGL %vreg26<tied0>, <ga:@uninit_gB>[TF=4]; CPURegs:%vreg27,%vreg26
	%vreg28<def> = LD %vreg27<kill>, 0; mem:LD4[@uninit_gB] CPURegs:%vreg28,%vreg27
	%vreg29<def> = ADDu %vreg25<kill>, %vreg28<kill>; CPURegs:%vreg29,%vreg25,%vreg28
	%vreg30<def> = LD <fi#6>, 0; mem:LD4[%localb] CPURegs:%vreg30
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	ST %vreg31<kill>, <fi#6>, 0; mem:ST4[%localb] CPURegs:%vreg31
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg32<def> = LEA <fi#6>, 0; CPURegs:%vreg32
	%A0<def> = COPY %vreg32; CPURegs:%vreg32
	CALL <ga:@neg>, %A0, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg34<def> = LD <fi#6>, 0; mem:LD4[%localb] CPURegs:%vreg34
	%V0<def> = COPY %vreg34; CPURegs:%vreg34
	RetLR %V0<imp-use>

# End machine code for function testb.

# Machine code for function neg: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%x.addr] CPURegs:%vreg0
	%vreg1<def> = LD %vreg0, 0; mem:LD4[%0] CPURegs:%vreg1,%vreg0
	%vreg2<def> = MovGR %ZERO, 0; CPURegs:%vreg2
	%vreg3<def> = SUBu %vreg2, %vreg1<kill>; CPURegs:%vreg3,%vreg2,%vreg1
	ST %vreg3<kill>, %vreg0, 0; mem:ST4[%2] CPURegs:%vreg3,%vreg0
	%V0<def> = COPY %vreg2; CPURegs:%vreg2
	RetLR %V0<imp-use>

# End machine code for function neg.

