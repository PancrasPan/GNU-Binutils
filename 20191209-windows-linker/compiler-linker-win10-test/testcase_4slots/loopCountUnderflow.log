
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%sum] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %do.body
    Predecessors according to CFG: BB#0 BB#2
	%vreg1<def> = MovIGH %ZERO, <ga:@i>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@i>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = LD %vreg2, 0; mem:LD4[@i] CPURegs:%vreg3,%vreg2
	%vreg4<def> = ADDiu %vreg3, -1; CPURegs:%vreg4,%vreg3
	ST %vreg4<kill>, %vreg2, 0; mem:ST4[@i] CPURegs:%vreg4,%vreg2
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = SHL %vreg3, %vreg5<kill>; CPURegs:%vreg6,%vreg3,%vreg5
	%vreg7<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = ADDu %vreg8<kill>, %vreg6<kill>; CPURegs:%vreg9,%vreg8,%vreg6
	%vreg10<def> = LD %vreg9<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%sum] CPURegs:%vreg11
	%vreg12<def> = ADDu %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	ST %vreg12<kill>, <fi#0>, 0; mem:ST4[%sum] CPURegs:%vreg12
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD %vreg2, 0; mem:LD4[@i] CPURegs:%vreg15,%vreg2
	%vreg16<def> = NEQI %vreg15<kill>, 0; CPURegs:%vreg16,%vreg15
	JC %vreg16<kill>, <BB#1>; CPURegs:%vreg16
	Jmp <BB#3>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#2
	%vreg17<def> = LD <fi#0>, 0; mem:LD4[%sum] CPURegs:%vreg17
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function add.


#####==========stderr_obj==========#####:
# Machine code for function add: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0<kill>, <fi#0>, 0; mem:ST4[%sum] CPURegs:%vreg0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %do.body
    Predecessors according to CFG: BB#0 BB#2
	%vreg1<def> = MovIGH %ZERO, <ga:@i>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <ga:@i>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = LD %vreg2, 0; mem:LD4[@i] CPURegs:%vreg3,%vreg2
	%vreg4<def> = ADDiu %vreg3, -1; CPURegs:%vreg4,%vreg3
	ST %vreg4<kill>, %vreg2, 0; mem:ST4[@i] CPURegs:%vreg4,%vreg2
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = SHL %vreg3, %vreg5<kill>; CPURegs:%vreg6,%vreg3,%vreg5
	%vreg7<def> = MovIGH %ZERO, <ga:@a>[TF=3]; CPURegs:%vreg7
	%vreg8<def,tied1> = MovIGL %vreg7<tied0>, <ga:@a>[TF=4]; CPURegs:%vreg8,%vreg7
	%vreg9<def> = ADDu %vreg8<kill>, %vreg6<kill>; CPURegs:%vreg9,%vreg8,%vreg6
	%vreg10<def> = LD %vreg9<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg10,%vreg9
	%vreg11<def> = LD <fi#0>, 0; mem:LD4[%sum] CPURegs:%vreg11
	%vreg12<def> = ADDu %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	ST %vreg12<kill>, <fi#0>, 0; mem:ST4[%sum] CPURegs:%vreg12
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %do.cond
    Predecessors according to CFG: BB#1
	%vreg15<def> = LD %vreg2, 0; mem:LD4[@i] CPURegs:%vreg15,%vreg2
	%vreg16<def> = NEQI %vreg15<kill>, 0; CPURegs:%vreg16,%vreg15
	JC %vreg16<kill>, <BB#1>; CPURegs:%vreg16
	Jmp <BB#3>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %do.end
    Predecessors according to CFG: BB#2
	%vreg17<def> = LD <fi#0>, 0; mem:LD4[%sum] CPURegs:%vreg17
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function add.

