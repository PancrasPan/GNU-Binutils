
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=12, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 8; mem:ST4[%0+8] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 4; mem:ST4[%0+4] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%0] CPURegs:%vreg0
	ST %vreg0, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 4; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#3>, 0; mem:ST4[%j] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#4>, 0; mem:ST4[%k] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#6
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 4; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#7>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#7(4)

BB#2: derived from LLVM BB %while.cond1
    Predecessors according to CFG: BB#1 BB#3
	%vreg8<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg8
	%vreg9<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = GE %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	JC %vreg10<kill>, <BB#4>; CPURegs:%vreg10
	Jmp <BB#3>
    Successors according to CFG: BB#3(124) BB#4(4)

BB#3: derived from LLVM BB %while.body3
    Predecessors according to CFG: BB#2
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg17
	%vreg18<def> = ADDiu %vreg17<kill>, 1; CPURegs:%vreg18,%vreg17
	ST %vreg18<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg18
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#4: derived from LLVM BB %while.cond4
    Predecessors according to CFG: BB#2 BB#5
	%vreg11<def> = LD <fi#3>, 0; mem:LD4[%j] CPURegs:%vreg11
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg12
	%vreg13<def> = GE %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	JC %vreg13<kill>, <BB#6>; CPURegs:%vreg13
	Jmp <BB#5>
    Successors according to CFG: BB#5(124) BB#6(4)

BB#5: derived from LLVM BB %while.body6
    Predecessors according to CFG: BB#4
	%vreg15<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg15
	%vreg16<def> = ADDiu %vreg15<kill>, 1; CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#4>, 0; mem:ST4[%k] CPURegs:%vreg16
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#6: derived from LLVM BB %while.end8
    Predecessors according to CFG: BB#4
	%vreg14<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg14
	ST %vreg14<kill>, <fi#1>, 4; mem:ST4[%arrayidx] CPURegs:%vreg14
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#7: derived from LLVM BB %while.end9
    Predecessors according to CFG: BB#1
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg5
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%j] CPURegs:%vreg6
	%vreg7<def> = SUBu %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=12, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 8; mem:ST4[%0+8] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 4; mem:ST4[%0+4] CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%0] CPURegs:%vreg0
	ST %vreg0, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg0
	%vreg1<def> = MovGR %ZERO, 4; CPURegs:%vreg1
	ST %vreg1<kill>, <fi#3>, 0; mem:ST4[%j] CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 2; CPURegs:%vreg2
	ST %vreg2<kill>, <fi#4>, 0; mem:ST4[%k] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#0 BB#6
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 4; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#7>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#7(4)

BB#2: derived from LLVM BB %while.cond1
    Predecessors according to CFG: BB#1 BB#3
	%vreg8<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg8
	%vreg9<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg9
	%vreg10<def> = GE %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	JC %vreg10<kill>, <BB#4>; CPURegs:%vreg10
	Jmp <BB#3>
    Successors according to CFG: BB#3(124) BB#4(4)

BB#3: derived from LLVM BB %while.body3
    Predecessors according to CFG: BB#2
	%vreg17<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg17
	%vreg18<def> = ADDiu %vreg17<kill>, 1; CPURegs:%vreg18,%vreg17
	ST %vreg18<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg18
	Jmp <BB#2>
    Successors according to CFG: BB#2

BB#4: derived from LLVM BB %while.cond4
    Predecessors according to CFG: BB#2 BB#5
	%vreg11<def> = LD <fi#3>, 0; mem:LD4[%j] CPURegs:%vreg11
	%vreg12<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg12
	%vreg13<def> = GE %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	JC %vreg13<kill>, <BB#6>; CPURegs:%vreg13
	Jmp <BB#5>
    Successors according to CFG: BB#5(124) BB#6(4)

BB#5: derived from LLVM BB %while.body6
    Predecessors according to CFG: BB#4
	%vreg15<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg15
	%vreg16<def> = ADDiu %vreg15<kill>, 1; CPURegs:%vreg16,%vreg15
	ST %vreg16<kill>, <fi#4>, 0; mem:ST4[%k] CPURegs:%vreg16
	Jmp <BB#4>
    Successors according to CFG: BB#4

BB#6: derived from LLVM BB %while.end8
    Predecessors according to CFG: BB#4
	%vreg14<def> = LD <fi#4>, 0; mem:LD4[%k] CPURegs:%vreg14
	ST %vreg14<kill>, <fi#1>, 4; mem:ST4[%arrayidx] CPURegs:%vreg14
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#7: derived from LLVM BB %while.end9
    Predecessors according to CFG: BB#1
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg5
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%j] CPURegs:%vreg6
	%vreg7<def> = SUBu %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	%V0<def> = COPY %vreg7; CPURegs:%vreg7
	RetLR %V0<imp-use>

# End machine code for function main.

