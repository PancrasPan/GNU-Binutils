
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function integer_div: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%dividend.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%divisor.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg2
	%vreg3<def> = GEU %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	JC %vreg3<kill>, <BB#2>; CPURegs:%vreg3
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg44<def> = MovGR %ZERO, 0; CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg44
	Jmp <BB#12>
    Successors according to CFG: BB#12

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	ST %vreg4, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg4
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#10
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg6
	%vreg7<def> = LEU %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#11>; CPURegs:%vreg7
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#11(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	ST %vreg4, <fi#3>, 0; mem:ST4[%k] CPURegs:%vreg4
	%vreg9<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg9
	ST %vreg9<kill>, <fi#4>, 0; mem:ST4[%c] CPURegs:%vreg9
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg10
	%vreg11<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg11
	%vreg12<def> = LTU %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	JC %vreg12<kill>, <BB#9>; CPURegs:%vreg12
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#9(4)

BB#6: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#5
	%vreg13<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg13
	%vreg14<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg14
	%vreg15<def> = SUBu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg16
	%vreg17<def> = GEU %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	JC %vreg17<kill>, <BB#8>; CPURegs:%vreg17
	Jmp <BB#7>
    Successors according to CFG: BB#7(4) BB#8(124)

BB#7: derived from LLVM BB %if.then4
    Predecessors according to CFG: BB#6
	%vreg23<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg23
	%vreg24<def> = MovGR %ZERO, 1; CPURegs:%vreg24
	%vreg25<def> = SHL %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	%vreg26<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg26
	%vreg27<def> = ADDu %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	ST %vreg27<kill>, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg27
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#8: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#6
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg19<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg19
	%vreg20<def> = SHL %vreg19<kill>, %vreg18<kill>; CPURegs:%vreg20,%vreg19,%vreg18
	ST %vreg20<kill>, <fi#4>, 0; mem:ST4[%c] CPURegs:%vreg20
	%vreg21<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg21
	%vreg22<def> = ADDiu %vreg21<kill>, 1; CPURegs:%vreg22,%vreg21
	ST %vreg22<kill>, <fi#3>, 0; mem:ST4[%k] CPURegs:%vreg22
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#9: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#5 BB#7
	%vreg28<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg28
	%vreg29<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg29
	%vreg30<def> = SUBu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg31
	%vreg32<def> = LTU %vreg30<kill>, %vreg31<kill>; CPURegs:%vreg32,%vreg30,%vreg31
	JC %vreg32<kill>, <BB#11>; CPURegs:%vreg32
	Jmp <BB#10>
    Successors according to CFG: BB#11(4) BB#10(124)

BB#10: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#9
	%vreg33<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg33
	%vreg34<def> = ADDiu %vreg33<kill>, -1; CPURegs:%vreg34,%vreg33
	%vreg35<def> = MovGR %ZERO, 1; CPURegs:%vreg35
	%vreg36<def> = SHL %vreg35, %vreg34<kill>; CPURegs:%vreg36,%vreg35,%vreg34
	%vreg37<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg37
	%vreg38<def> = ADDu %vreg37<kill>, %vreg36<kill>; CPURegs:%vreg38,%vreg37,%vreg36
	ST %vreg38<kill>, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg38
	%vreg39<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg39
	%vreg40<def> = SRL %vreg39<kill>, %vreg35; CPURegs:%vreg40,%vreg39,%vreg35
	%vreg41<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg41
	%vreg42<def> = SUBu %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	ST %vreg42<kill>, <fi#1>, 0; mem:ST4[%dividend.addr] CPURegs:%vreg42
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#11: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#3 BB#9
	%vreg43<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg43
	ST %vreg43<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg43
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %return
    Predecessors according to CFG: BB#11 BB#1
	%vreg45<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg45
	%V0<def> = COPY %vreg45; CPURegs:%vreg45
	RetLR %V0<imp-use>

# End machine code for function integer_div.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = MovGR %ZERO, 7; CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 3; CPURegs:%vreg2
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	%A1<def> = COPY %vreg2; CPURegs:%vreg2
	CALL <ga:@integer_div>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	ST %vreg3, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg3
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	ST %vreg4<kill>, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	ST %vreg5<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg5
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function integer_div: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	ST %vreg0, <fi#1>, 0; mem:ST4[%dividend.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%divisor.addr] CPURegs:%vreg1
	%vreg2<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg2
	%vreg3<def> = GEU %vreg2<kill>, %vreg1; CPURegs:%vreg3,%vreg2,%vreg1
	JC %vreg3<kill>, <BB#2>; CPURegs:%vreg3
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg44<def> = MovGR %ZERO, 0; CPURegs:%vreg44
	ST %vreg44<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg44
	Jmp <BB#12>
    Successors according to CFG: BB#12

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg4<def> = MovGR %ZERO, 0; CPURegs:%vreg4
	ST %vreg4, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg4
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#10
	%vreg5<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg5
	%vreg6<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg6
	%vreg7<def> = LEU %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	JC %vreg7<kill>, <BB#11>; CPURegs:%vreg7
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#11(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	ST %vreg4, <fi#3>, 0; mem:ST4[%k] CPURegs:%vreg4
	%vreg9<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg9
	ST %vreg9<kill>, <fi#4>, 0; mem:ST4[%c] CPURegs:%vreg9
    Successors according to CFG: BB#5

BB#5: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#4 BB#8
	%vreg10<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg10
	%vreg11<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg11
	%vreg12<def> = LTU %vreg11<kill>, %vreg10<kill>; CPURegs:%vreg12,%vreg11,%vreg10
	JC %vreg12<kill>, <BB#9>; CPURegs:%vreg12
	Jmp <BB#6>
    Successors according to CFG: BB#6(124) BB#9(4)

BB#6: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#5
	%vreg13<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg13
	%vreg14<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg14
	%vreg15<def> = SUBu %vreg14<kill>, %vreg13<kill>; CPURegs:%vreg15,%vreg14,%vreg13
	%vreg16<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg16
	%vreg17<def> = GEU %vreg15<kill>, %vreg16<kill>; CPURegs:%vreg17,%vreg15,%vreg16
	JC %vreg17<kill>, <BB#8>; CPURegs:%vreg17
	Jmp <BB#7>
    Successors according to CFG: BB#7(4) BB#8(124)

BB#7: derived from LLVM BB %if.then4
    Predecessors according to CFG: BB#6
	%vreg23<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg23
	%vreg24<def> = MovGR %ZERO, 1; CPURegs:%vreg24
	%vreg25<def> = SHL %vreg24<kill>, %vreg23<kill>; CPURegs:%vreg25,%vreg24,%vreg23
	%vreg26<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg26
	%vreg27<def> = ADDu %vreg26<kill>, %vreg25<kill>; CPURegs:%vreg27,%vreg26,%vreg25
	ST %vreg27<kill>, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg27
	Jmp <BB#9>
    Successors according to CFG: BB#9

BB#8: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#6
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg19<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg19
	%vreg20<def> = SHL %vreg19<kill>, %vreg18<kill>; CPURegs:%vreg20,%vreg19,%vreg18
	ST %vreg20<kill>, <fi#4>, 0; mem:ST4[%c] CPURegs:%vreg20
	%vreg21<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg21
	%vreg22<def> = ADDiu %vreg21<kill>, 1; CPURegs:%vreg22,%vreg21
	ST %vreg22<kill>, <fi#3>, 0; mem:ST4[%k] CPURegs:%vreg22
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#9: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#5 BB#7
	%vreg28<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg28
	%vreg29<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg29
	%vreg30<def> = SUBu %vreg29<kill>, %vreg28<kill>; CPURegs:%vreg30,%vreg29,%vreg28
	%vreg31<def> = LD <fi#2>, 0; mem:LD4[%divisor.addr] CPURegs:%vreg31
	%vreg32<def> = LTU %vreg30<kill>, %vreg31<kill>; CPURegs:%vreg32,%vreg30,%vreg31
	JC %vreg32<kill>, <BB#11>; CPURegs:%vreg32
	Jmp <BB#10>
    Successors according to CFG: BB#11(4) BB#10(124)

BB#10: derived from LLVM BB %if.end10
    Predecessors according to CFG: BB#9
	%vreg33<def> = LD <fi#3>, 0; mem:LD4[%k] CPURegs:%vreg33
	%vreg34<def> = ADDiu %vreg33<kill>, -1; CPURegs:%vreg34,%vreg33
	%vreg35<def> = MovGR %ZERO, 1; CPURegs:%vreg35
	%vreg36<def> = SHL %vreg35, %vreg34<kill>; CPURegs:%vreg36,%vreg35,%vreg34
	%vreg37<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg37
	%vreg38<def> = ADDu %vreg37<kill>, %vreg36<kill>; CPURegs:%vreg38,%vreg37,%vreg36
	ST %vreg38<kill>, <fi#5>, 0; mem:ST4[%res] CPURegs:%vreg38
	%vreg39<def> = LD <fi#4>, 0; mem:LD4[%c] CPURegs:%vreg39
	%vreg40<def> = SRL %vreg39<kill>, %vreg35; CPURegs:%vreg40,%vreg39,%vreg35
	%vreg41<def> = LD <fi#1>, 0; mem:LD4[%dividend.addr] CPURegs:%vreg41
	%vreg42<def> = SUBu %vreg41<kill>, %vreg40<kill>; CPURegs:%vreg42,%vreg41,%vreg40
	ST %vreg42<kill>, <fi#1>, 0; mem:ST4[%dividend.addr] CPURegs:%vreg42
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#11: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#3 BB#9
	%vreg43<def> = LD <fi#5>, 0; mem:LD4[%res] CPURegs:%vreg43
	ST %vreg43<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg43
    Successors according to CFG: BB#12

BB#12: derived from LLVM BB %return
    Predecessors according to CFG: BB#11 BB#1
	%vreg45<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg45
	%V0<def> = COPY %vreg45; CPURegs:%vreg45
	RetLR %V0<imp-use>

# End machine code for function integer_div.

# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = MovGR %ZERO, 7; CPURegs:%vreg1
	%vreg2<def> = MovGR %ZERO, 3; CPURegs:%vreg2
	%A0<def> = COPY %vreg1; CPURegs:%vreg1
	%A1<def> = COPY %vreg2; CPURegs:%vreg2
	CALL <ga:@integer_div>, %A0, %A1, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	ST %vreg3, <fi#1>, 0; mem:ST4[%a] CPURegs:%vreg3
	%vreg4<def> = MovGR %ZERO, 1; CPURegs:%vreg4
	ST %vreg4<kill>, <fi#2>, 0; mem:ST4[%b] CPURegs:%vreg4
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	ST %vreg5<kill>, <fi#3>, 0; mem:ST4[%c] CPURegs:%vreg5
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.

