
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
Constant Pool:
  cp#0: <i32 256, i32 512, i32 768, i32 1024, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, align=64
  cp#1: zeroinitializer, align=64

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <cp#0>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = VLOAD32 %vreg2<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg3 CPURegs:%vreg2
	VSTORE32 %vreg3<kill>, <fi#1>, 0; mem:ST64[%a] CPU512Regs:%vreg3
	%vreg4<def> = MovIGH %ZERO, <cp#1>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <cp#1>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg6 CPURegs:%vreg5
	VSTORE32 %vreg6, <fi#2>, 0; mem:ST64[%b] CPU512Regs:%vreg6
	%vreg7<def> = VLOAD32 <fi#1>, 0; mem:LD64[%a] CPU512Regs:%vreg7
	%vreg8<def> = VMAX40 %vreg7<kill>, %vreg6; CPU512Regs:%vreg8,%vreg7,%vreg6
	VSTORE32 %vreg8<kill>, <fi#3>, 0; mem:ST64[%c] CPU512Regs:%vreg8
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=64, align=64, at location [SP]
  fi#2: size=64, align=64, at location [SP]
  fi#3: size=64, align=64, at location [SP]
Constant Pool:
  cp#0: <i32 256, i32 512, i32 768, i32 1024, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, align=64
  cp#1: zeroinitializer, align=64

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	%vreg1<def> = MovIGH %ZERO, <cp#0>[TF=3]; CPURegs:%vreg1
	%vreg2<def,tied1> = MovIGL %vreg1<tied0>, <cp#0>[TF=4]; CPURegs:%vreg2,%vreg1
	%vreg3<def> = VLOAD32 %vreg2<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg3 CPURegs:%vreg2
	VSTORE32 %vreg3<kill>, <fi#1>, 0; mem:ST64[%a] CPU512Regs:%vreg3
	%vreg4<def> = MovIGH %ZERO, <cp#1>[TF=3]; CPURegs:%vreg4
	%vreg5<def,tied1> = MovIGL %vreg4<tied0>, <cp#1>[TF=4]; CPURegs:%vreg5,%vreg4
	%vreg6<def> = VLOAD32 %vreg5<kill>, 0; mem:LD64[ConstantPool] CPU512Regs:%vreg6 CPURegs:%vreg5
	VSTORE32 %vreg6, <fi#2>, 0; mem:ST64[%b] CPU512Regs:%vreg6
	%vreg7<def> = VLOAD32 <fi#1>, 0; mem:LD64[%a] CPU512Regs:%vreg7
	%vreg8<def> = VMAX40 %vreg7<kill>, %vreg6; CPU512Regs:%vreg8,%vreg7,%vreg6
	VSTORE32 %vreg8<kill>, <fi#3>, 0; mem:ST64[%c] CPU512Regs:%vreg8
	%V0<def> = COPY %vreg0; CPURegs:%vreg0
	RetLR %V0<imp-use>

# End machine code for function main.

