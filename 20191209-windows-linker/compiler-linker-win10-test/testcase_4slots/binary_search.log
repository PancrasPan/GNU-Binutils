
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function binarysearch: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg2
	%vreg3<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg3
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%value.addr] CPURegs:%vreg1
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%start.addr] CPURegs:%vreg3
	ST %vreg2, <fi#4>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg4<def> = LD <fi#3>, 0; mem:LD4[%start.addr] CPURegs:%vreg4
	%vreg5<def> = LE %vreg4<kill>, %vreg2; CPURegs:%vreg5,%vreg4,%vreg2
	JC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg40<def> = MovGR %ZERO, -1; CPURegs:%vreg40
	ST %vreg40<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg40
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%start.addr] CPURegs:%vreg6
	ST %vreg6<kill>, <fi#5>, 0; mem:ST4[%bottem] CPURegs:%vreg6
	%vreg7<def> = LD <fi#4>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	ST %vreg7<kill>, <fi#6>, 0; mem:ST4[%top] CPURegs:%vreg7
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#8 BB#7
	%vreg8<def> = LD <fi#6>, 0; mem:LD4[%top] CPURegs:%vreg8
	%vreg9<def> = LD <fi#5>, 0; mem:LD4[%bottem] CPURegs:%vreg9
	%vreg10<def> = GT %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	JC %vreg10<kill>, <BB#9>; CPURegs:%vreg10
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#9(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	%vreg12<def> = LD <fi#6>, 0; mem:LD4[%top] CPURegs:%vreg12
	%vreg13<def> = LD <fi#5>, 0; mem:LD4[%bottem] CPURegs:%vreg13
	%vreg14<def> = ADDu %vreg13<kill>, %vreg12<kill>; CPURegs:%vreg14,%vreg13,%vreg12
	%vreg15<def> = MovGR %ZERO, 31; CPURegs:%vreg15
	%vreg16<def> = SRL %vreg14, %vreg15<kill>; CPURegs:%vreg16,%vreg14,%vreg15
	%vreg17<def> = ADDu %vreg14, %vreg16<kill>; CPURegs:%vreg17,%vreg14,%vreg16
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg19<def> = SRA %vreg17<kill>, %vreg18<kill>; CPURegs:%vreg19,%vreg17,%vreg18
	ST %vreg19, <fi#7>, 0; mem:ST4[%midpos] CPURegs:%vreg19
	%vreg20<def> = MovGR %ZERO, 2; CPURegs:%vreg20
	%vreg21<def> = SHL %vreg19, %vreg20; CPURegs:%vreg21,%vreg19,%vreg20
	%vreg22<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg22<kill>, %vreg21<kill>; CPURegs:%vreg23,%vreg22,%vreg21
	%vreg24<def> = LD %vreg23<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg24,%vreg23
	%vreg25<def> = LD <fi#2>, 0; mem:LD4[%value.addr] CPURegs:%vreg25
	%vreg26<def> = NEQ %vreg24<kill>, %vreg25<kill>; CPURegs:%vreg26,%vreg24,%vreg25
	JC %vreg26<kill>, <BB#6>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#6(124)

BB#5: derived from LLVM BB %if.then3
    Predecessors according to CFG: BB#4
	%vreg39<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg39
	ST %vreg39<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg39
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#6: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg28<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg28
	%vreg29<def> = SHL %vreg28<kill>, %vreg20; CPURegs:%vreg29,%vreg28,%vreg20
	%vreg30<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg30
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	%vreg32<def> = LD %vreg31<kill>, 0; mem:LD4[%arrayidx4] CPURegs:%vreg32,%vreg31
	%vreg33<def> = LD <fi#2>, 0; mem:LD4[%value.addr] CPURegs:%vreg33
	%vreg34<def> = GE %vreg32<kill>, %vreg33<kill>; CPURegs:%vreg34,%vreg32,%vreg33
	JC %vreg34<kill>, <BB#8>; CPURegs:%vreg34
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#6
	%vreg37<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg37
	%vreg38<def> = ADDiu %vreg37<kill>, 1; CPURegs:%vreg38,%vreg37
	ST %vreg38<kill>, <fi#5>, 0; mem:ST4[%bottem] CPURegs:%vreg38
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#8: derived from LLVM BB %if.else8
    Predecessors according to CFG: BB#6
	%vreg35<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg35
	%vreg36<def> = ADDiu %vreg35<kill>, -1; CPURegs:%vreg36,%vreg35
	ST %vreg36<kill>, <fi#6>, 0; mem:ST4[%top] CPURegs:%vreg36
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#3
	%vreg11<def> = MovGR %ZERO, -2; CPURegs:%vreg11
	ST %vreg11<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg11
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#5 BB#1
	%vreg41<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg41
	%V0<def> = COPY %vreg41; CPURegs:%vreg41
	RetLR %V0<imp-use>

# End machine code for function binarysearch.


#####==========stderr_obj==========#####:
# Machine code for function binarysearch: SSA
Frame Objects:
  fi#-2: size=4, align=4, fixed, at location [SP+12]
  fi#-1: size=4, align=8, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1

BB#0: derived from LLVM BB %entry
    Live Ins: %A0 %A1
	%vreg1<def> = COPY %A1; CPURegs:%vreg1
	%vreg0<def> = COPY %A0; CPURegs:%vreg0
	%vreg2<def> = LD <fi#-2>, 0; mem:LD4[FixedStack-2] CPURegs:%vreg2
	%vreg3<def> = LD <fi#-1>, 0; mem:LD4[FixedStack-1](align=8) CPURegs:%vreg3
	ST %vreg0, <fi#1>, 0; mem:ST4[%array.addr] CPURegs:%vreg0
	ST %vreg1, <fi#2>, 0; mem:ST4[%value.addr] CPURegs:%vreg1
	ST %vreg3<kill>, <fi#3>, 0; mem:ST4[%start.addr] CPURegs:%vreg3
	ST %vreg2, <fi#4>, 0; mem:ST4[%end.addr] CPURegs:%vreg2
	%vreg4<def> = LD <fi#3>, 0; mem:LD4[%start.addr] CPURegs:%vreg4
	%vreg5<def> = LE %vreg4<kill>, %vreg2; CPURegs:%vreg5,%vreg4,%vreg2
	JC %vreg5<kill>, <BB#2>; CPURegs:%vreg5
	Jmp <BB#1>
    Successors according to CFG: BB#1(16) BB#2(16)

BB#1: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#0
	%vreg40<def> = MovGR %ZERO, -1; CPURegs:%vreg40
	ST %vreg40<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg40
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#2: derived from LLVM BB %if.end
    Predecessors according to CFG: BB#0
	%vreg6<def> = LD <fi#3>, 0; mem:LD4[%start.addr] CPURegs:%vreg6
	ST %vreg6<kill>, <fi#5>, 0; mem:ST4[%bottem] CPURegs:%vreg6
	%vreg7<def> = LD <fi#4>, 0; mem:LD4[%end.addr] CPURegs:%vreg7
	ST %vreg7<kill>, <fi#6>, 0; mem:ST4[%top] CPURegs:%vreg7
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %while.cond
    Predecessors according to CFG: BB#2 BB#8 BB#7
	%vreg8<def> = LD <fi#6>, 0; mem:LD4[%top] CPURegs:%vreg8
	%vreg9<def> = LD <fi#5>, 0; mem:LD4[%bottem] CPURegs:%vreg9
	%vreg10<def> = GT %vreg9<kill>, %vreg8<kill>; CPURegs:%vreg10,%vreg9,%vreg8
	JC %vreg10<kill>, <BB#9>; CPURegs:%vreg10
	Jmp <BB#4>
    Successors according to CFG: BB#4(124) BB#9(4)

BB#4: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#3
	%vreg12<def> = LD <fi#6>, 0; mem:LD4[%top] CPURegs:%vreg12
	%vreg13<def> = LD <fi#5>, 0; mem:LD4[%bottem] CPURegs:%vreg13
	%vreg14<def> = ADDu %vreg13<kill>, %vreg12<kill>; CPURegs:%vreg14,%vreg13,%vreg12
	%vreg15<def> = MovGR %ZERO, 31; CPURegs:%vreg15
	%vreg16<def> = SRL %vreg14, %vreg15<kill>; CPURegs:%vreg16,%vreg14,%vreg15
	%vreg17<def> = ADDu %vreg14, %vreg16<kill>; CPURegs:%vreg17,%vreg14,%vreg16
	%vreg18<def> = MovGR %ZERO, 1; CPURegs:%vreg18
	%vreg19<def> = SRA %vreg17<kill>, %vreg18<kill>; CPURegs:%vreg19,%vreg17,%vreg18
	ST %vreg19, <fi#7>, 0; mem:ST4[%midpos] CPURegs:%vreg19
	%vreg20<def> = MovGR %ZERO, 2; CPURegs:%vreg20
	%vreg21<def> = SHL %vreg19, %vreg20; CPURegs:%vreg21,%vreg19,%vreg20
	%vreg22<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg22
	%vreg23<def> = ADDu %vreg22<kill>, %vreg21<kill>; CPURegs:%vreg23,%vreg22,%vreg21
	%vreg24<def> = LD %vreg23<kill>, 0; mem:LD4[%arrayidx] CPURegs:%vreg24,%vreg23
	%vreg25<def> = LD <fi#2>, 0; mem:LD4[%value.addr] CPURegs:%vreg25
	%vreg26<def> = NEQ %vreg24<kill>, %vreg25<kill>; CPURegs:%vreg26,%vreg24,%vreg25
	JC %vreg26<kill>, <BB#6>; CPURegs:%vreg26
	Jmp <BB#5>
    Successors according to CFG: BB#5(4) BB#6(124)

BB#5: derived from LLVM BB %if.then3
    Predecessors according to CFG: BB#4
	%vreg39<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg39
	ST %vreg39<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg39
	Jmp <BB#10>
    Successors according to CFG: BB#10

BB#6: derived from LLVM BB %if.else
    Predecessors according to CFG: BB#4
	%vreg28<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg28
	%vreg29<def> = SHL %vreg28<kill>, %vreg20; CPURegs:%vreg29,%vreg28,%vreg20
	%vreg30<def> = LD <fi#1>, 0; mem:LD4[%array.addr] CPURegs:%vreg30
	%vreg31<def> = ADDu %vreg30<kill>, %vreg29<kill>; CPURegs:%vreg31,%vreg30,%vreg29
	%vreg32<def> = LD %vreg31<kill>, 0; mem:LD4[%arrayidx4] CPURegs:%vreg32,%vreg31
	%vreg33<def> = LD <fi#2>, 0; mem:LD4[%value.addr] CPURegs:%vreg33
	%vreg34<def> = GE %vreg32<kill>, %vreg33<kill>; CPURegs:%vreg34,%vreg32,%vreg33
	JC %vreg34<kill>, <BB#8>; CPURegs:%vreg34
	Jmp <BB#7>
    Successors according to CFG: BB#7(16) BB#8(16)

BB#7: derived from LLVM BB %if.then6
    Predecessors according to CFG: BB#6
	%vreg37<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg37
	%vreg38<def> = ADDiu %vreg37<kill>, 1; CPURegs:%vreg38,%vreg37
	ST %vreg38<kill>, <fi#5>, 0; mem:ST4[%bottem] CPURegs:%vreg38
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#8: derived from LLVM BB %if.else8
    Predecessors according to CFG: BB#6
	%vreg35<def> = LD <fi#7>, 0; mem:LD4[%midpos] CPURegs:%vreg35
	%vreg36<def> = ADDiu %vreg35<kill>, -1; CPURegs:%vreg36,%vreg35
	ST %vreg36<kill>, <fi#6>, 0; mem:ST4[%top] CPURegs:%vreg36
	Jmp <BB#3>
    Successors according to CFG: BB#3

BB#9: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#3
	%vreg11<def> = MovGR %ZERO, -2; CPURegs:%vreg11
	ST %vreg11<kill>, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg11
    Successors according to CFG: BB#10

BB#10: derived from LLVM BB %return
    Predecessors according to CFG: BB#9 BB#5 BB#1
	%vreg41<def> = LD <fi#0>, 0; mem:LD4[%retval] CPURegs:%vreg41
	%V0<def> = COPY %vreg41; CPURegs:%vreg41
	RetLR %V0<imp-use>

# End machine code for function binarysearch.

