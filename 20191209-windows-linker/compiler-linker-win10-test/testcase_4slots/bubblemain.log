
#####==========stderr_mid==========#####:
'' is not a recognized processor for this target (ignoring processor)

#####==========stderr_asm==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	CALL <ga:@bubblesort>, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = MovGR %ZERO, 1; CPURegs:%vreg2
	ST %vreg2, <fi#1>, 0; mem:ST4[%Inorder] CPURegs:%vreg2
	ST %vreg2, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#4
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 5; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#5>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#5(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = SHL %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	%vreg8<def> = MovIGH %ZERO, <ga:@SortArray>[TF=3]; CPURegs:%vreg8
	%vreg9<def,tied1> = MovIGL %vreg8<tied0>, <ga:@SortArray>[TF=4]; CPURegs:%vreg9,%vreg8
	%vreg10<def> = ADDu %vreg9<kill>, %vreg7<kill>; CPURegs:%vreg10,%vreg9,%vreg7
	%vreg11<def> = LD %vreg10, -4; mem:LD4[%arrayidx1] CPURegs:%vreg11,%vreg10
	%vreg12<def> = LD %vreg10, 0; mem:LD4[%arrayidx] CPURegs:%vreg12,%vreg10
	%vreg13<def> = GE %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	JC %vreg13<kill>, <BB#4>; CPURegs:%vreg13
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	ST %vreg0, <fi#1>, 0; mem:ST4[%Inorder] CPURegs:%vreg0
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg14<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg14
	%vreg15<def> = ADDiu %vreg14<kill>, 1; CPURegs:%vreg15,%vreg14
	ST %vreg15<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg17<def> = LD <fi#1>, 0; mem:LD4[%Inorder] CPURegs:%vreg17
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function main.


#####==========stderr_obj==========#####:
# Machine code for function main: SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MovGR %ZERO, 0; CPURegs:%vreg0
	ST %vreg0, <fi#0>, 0; mem:ST4[%retval] CPURegs:%vreg0
	ADJCALLSTACKDOWN 8, %SP<imp-def,dead>, %SP<imp-use>
	CALL <ga:@bubblesort>, <regmask>, %SP<imp-def>, %V0<imp-def>
	ADJCALLSTACKUP 8, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = MovGR %ZERO, 1; CPURegs:%vreg2
	ST %vreg2, <fi#1>, 0; mem:ST4[%Inorder] CPURegs:%vreg2
	ST %vreg2, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg2
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.cond
    Predecessors according to CFG: BB#0 BB#4
	%vreg3<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg3
	%vreg4<def> = LTI %vreg3<kill>, 5; CPURegs:%vreg4,%vreg3
	JNC %vreg4<kill>, <BB#5>; CPURegs:%vreg4
	Jmp <BB#2>
    Successors according to CFG: BB#2(124) BB#5(4)

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1
	%vreg5<def> = MovGR %ZERO, 2; CPURegs:%vreg5
	%vreg6<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg6
	%vreg7<def> = SHL %vreg6<kill>, %vreg5<kill>; CPURegs:%vreg7,%vreg6,%vreg5
	%vreg8<def> = MovIGH %ZERO, <ga:@SortArray>[TF=3]; CPURegs:%vreg8
	%vreg9<def,tied1> = MovIGL %vreg8<tied0>, <ga:@SortArray>[TF=4]; CPURegs:%vreg9,%vreg8
	%vreg10<def> = ADDu %vreg9<kill>, %vreg7<kill>; CPURegs:%vreg10,%vreg9,%vreg7
	%vreg11<def> = LD %vreg10, -4; mem:LD4[%arrayidx1] CPURegs:%vreg11,%vreg10
	%vreg12<def> = LD %vreg10, 0; mem:LD4[%arrayidx] CPURegs:%vreg12,%vreg10
	%vreg13<def> = GE %vreg12<kill>, %vreg11<kill>; CPURegs:%vreg13,%vreg12,%vreg11
	JC %vreg13<kill>, <BB#4>; CPURegs:%vreg13
	Jmp <BB#3>
    Successors according to CFG: BB#3(4) BB#4(124)

BB#3: derived from LLVM BB %if.then
    Predecessors according to CFG: BB#2
	ST %vreg0, <fi#1>, 0; mem:ST4[%Inorder] CPURegs:%vreg0
	Jmp <BB#5>
    Successors according to CFG: BB#5

BB#4: derived from LLVM BB %for.inc
    Predecessors according to CFG: BB#2
	%vreg14<def> = LD <fi#2>, 0; mem:LD4[%i] CPURegs:%vreg14
	%vreg15<def> = ADDiu %vreg14<kill>, 1; CPURegs:%vreg15,%vreg14
	ST %vreg15<kill>, <fi#2>, 0; mem:ST4[%i] CPURegs:%vreg15
	Jmp <BB#1>
    Successors according to CFG: BB#1

BB#5: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#1 BB#3
	%vreg17<def> = LD <fi#1>, 0; mem:LD4[%Inorder] CPURegs:%vreg17
	%V0<def> = COPY %vreg17; CPURegs:%vreg17
	RetLR %V0<imp-use>

# End machine code for function main.

